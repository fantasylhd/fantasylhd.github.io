<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>day46_maven</title>
      <link href="/2020/04/12/day47-maven/"/>
      <url>/2020/04/12/day47-maven/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day46_maven</title>
      <link href="/2020/04/12/gong-han-mo-shi/"/>
      <url>/2020/04/12/gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day46_redis</title>
      <link href="/2020/04/12/day46-redis/"/>
      <url>/2020/04/12/day46-redis/</url>
      
        <content type="html"><![CDATA[<h1 id="day46-redis"><a href="#day46-redis" class="headerlink" title="day46_redis"></a>day46_redis</h1><h2 id="1-1-什么是NOSQL"><a href="#1-1-什么是NOSQL" class="headerlink" title="1.1 什么是NOSQL"></a>1.1 什么是NOSQL</h2><h3 id="1-1-1-什么是NOSQL"><a href="#1-1-1-什么是NOSQL" class="headerlink" title="1.1.1 什么是NOSQL"></a>1.1.1 什么是NOSQL</h3><p>NoSQL(NoSQL = Not Only SQL)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。</p><h3 id="1-1-2-为什么需要NOSQL"><a href="#1-1-2-为什么需要NOSQL" class="headerlink" title="1.1.2 为什么需要NOSQL"></a>1.1.2 为什么需要NOSQL</h3><p>随着互联网的高速崛起，网站的用户群的增加，访问量的上升，传统数据库上都开始出现了性能瓶颈，web程序不再仅仅专注在功能上，同时也在追求性能。所以NOSQL数据库应运而上，具体表现为对如下三高问题的解决：</p><ol><li>High performance - 对数据库高并发读写的需求</li><li>Huge Storage - 对海量数据的高效率存储和访问的需求</li><li>High Scalability &amp;&amp; High Availability- 对数据库的高可扩展性和高可用性的需求</li></ol><h3 id="1-1-3-主流的NOSQL产品"><a href="#1-1-3-主流的NOSQL产品" class="headerlink" title="1.1.3 主流的NOSQL产品"></a>1.1.3 主流的NOSQL产品</h3><p><img src="/2020/04/12/day46-redis/1.png" alt></p><h3 id="1-1-4-NOSQL的特点"><a href="#1-1-4-NOSQL的特点" class="headerlink" title="1.1.4 NOSQL的特点"></a>1.1.4 NOSQL的特点</h3><p>在大数据存取上具备关系型数据库无法比拟的性能优势，例如：</p><ul><li>易扩展</li></ul><p>NoSQL数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。也无形之间，在架构的层面上带来了可扩展的能力。</p><ul><li>大数据量，高性能</li></ul><p>NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀。这得益于它的无关系性，数据库的结构简单。</p><ul><li>灵活的数据模型</li></ul><p>NoSQL无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式。而在关系数据库里，增删字段是一件非常麻烦的事情。如果是非常大数据量的表，增加字段简直就是一个噩梦。这点在大数据量的Web2.0时代尤其明显。</p><ul><li>高可用</li></ul><p>NoSQL在不太影响性能的情况，就可以方便的实现高可用的架构。比如Cassandra，HBase模型，通过复制模型也能实现高可用。</p><h2 id="1-2-Redis"><a href="#1-2-Redis" class="headerlink" title="1.2  Redis"></a>1.2  Redis</h2><h3 id="1-2-1-什么是Redis"><a href="#1-2-1-什么是Redis" class="headerlink" title="1.2.1 什么是Redis"></a>1.2.1 什么是Redis</h3><p>Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次/s,写的速度是81000次/s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求。</p><h3 id="1-2-2-redis的应用场景"><a href="#1-2-2-redis的应用场景" class="headerlink" title="1.2.2 redis的应用场景"></a>1.2.2 redis的应用场景</h3><ol><li>缓存（数据查询、短连接、新闻内容、商品内容等等）</li><li>聊天室的在线好友列表</li><li>任务队列。（秒杀、抢购、12306等等）</li><li>应用排行榜</li><li>网站访问统计</li><li>数据过期处理（可以精确到毫秒</li><li>分布式集群架构中的session分离</li></ol><h3 id="1-2-3-Redis的数据类型"><a href="#1-2-3-Redis的数据类型" class="headerlink" title="1.2.3 Redis的数据类型"></a>1.2.3 Redis的数据类型</h3><p>redis是一种高级的key-value的存储系统，其中value支持五种数据类型：</p><ol><li>字符串（String）</li><li>哈希（hash）</li><li>字符串列表（list）</li><li>字符串集合（set）</li><li>有序字符串集合（sorted set）</li></ol><p>关于key的定义，注意如下几点：</p><p>key不要太长，最好不要操作1024个字节，这不仅会消耗内存还会降低查找效率，key不要太短，如果太短会降低key的可读性，在项目中，key最好有一个统一的命名规范。</p><h4 id="字符串类型string"><a href="#字符串类型string" class="headerlink" title="字符串类型string"></a>字符串类型string</h4><p>字符串类型是Redis中最为基础的数据存储类型，它在Redis中是二进制安全的，这便意味着该类型存入和获取的数据相同。在Redis中字符串类型的Value最多可以容纳的数据长度是512M。</p><p>字符串类型string常用命令</p><p>set key value</p><ul><li>设定key持有指定的字符串value，如果该key存在则进行覆盖操作。总是返回”OK”</li></ul><pre class=" language-java"><code class="language-java"><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span> set company <span class="token string">"itcast"</span>OK<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span></code></pre><p>get key</p><ul><li>获取key的value。如果与该key关联的value不是String类型，redis将返回错误信息，因为get命令只能用于获取String value；如果该key不存在，返回(nil)。</li></ul><pre class=" language-java"><code class="language-java"><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span> set name <span class="token string">"itcast"</span>OK<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span> get name<span class="token string">"itcast"</span></code></pre><p>del key</p><ul><li>删除指定key<br>```java</li></ul><p>127.0.0.1:6379&gt; del name<br>(integer) 1<br>127.0.0.1:6379&gt; get name<br>(nil)</p><p>如果使用可以转换成整数的值，则可以使用下列的命令来实现数值操作</p><p>incr命令 自增<br>decr命令 自减<br>incrby key step 自增步数<br>decrby key step 自减步数</p><pre><code>#### 哈希类型hashRedis中的Hash类型可以看成具有String Key和String Value的map容器。所以该类型非常适合于存储值对象的信息。如Username、Password和Age等。如果Hash中包含很少的字段，那么该类型的数据也将仅占用很少的磁盘空间。每一个Hash可以存储4294967295个键值对。哈希类型hash常用命令hset key field value* 为指定的key设定field/value对（键值对）。```java127.0.0.1:6379&gt; hset myhash username haohao(integer) 1127.0.0.1:6379&gt;</code></pre><p>hget key field</p><ul><li>返回指定的key中的field的值<br>```java</li></ul><p>127.0.0.1:6379&gt; hset myhash username haohao<br>(integer) 1<br>127.0.0.1:6379&gt; hget myhash username<br>“haohao”</p><pre><code>hgetall key* 可以获取该键的所有数据```java127.0.0.1:6379&gt; hgetall myhash1) &quot;username&quot;2) &quot;tom&quot;3) &quot;password&quot;4) &quot;123&quot;127.0.0.1:6379&gt;</code></pre><h4 id="列表类型list"><a href="#列表类型list" class="headerlink" title="列表类型list"></a>列表类型list</h4><p>在Redis中，List类型是按照插入顺序排序的字符串链表。和数据结构中的普通链表一样，我们可以在其头部(left)和尾部(right)添加新的元素。在插入时，如果该键并不存在，Redis将为该键创建一个新的链表。与此相反，如果链表中所有的元素均被移除，那么该键也将会被从数据库中删除。List中可以包含的最大元素数量是4294967295</p><p>列表类型list常用命令</p><p>lpush key values value1 value2….</p><ul><li>在指定的key所关联的list的头部插入所有的values，如果该key不存在，该命令在插入的之前创建一个与该key关联的空链表，之后再向该链表的头部插入数据。插入成功，返回元素的个数。</li></ul><pre class=" language-java"><code class="language-java"><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span> lpush mylist a b <span class="token function">c</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span></code></pre><p>lpop key</p><ul><li>返回并弹出指定的key关联的链表中的第一个元素，即头部元素。如果该key不存在，返回nil；若key存在，则返回链表的头部元素<br>```java</li></ul><p>127.0.0.1:6379&gt; lpush mylist a b c<br>(integer) 3<br>127.0.0.1:6379&gt; lpop mylist<br>“c”<br>127.0.0.1:6379&gt; lpop mylist<br>“b”</p><pre><code>rpop key* 从尾部弹出元素。```java127.0.0.1:6379&gt; lpush mylist a b c(integer) 3127.0.0.1:6379&gt; rpop mylist&quot;a&quot;</code></pre><p>lrange key 索引 索引</p><ul><li>遍历该键的所有数据<br>```java</li></ul><p>127.0.0.1:6379&gt; LRANGE mylist 0 -1<br>1) “d”<br>2) “c”<br>3) “b”<br>4) “a”<br>5) “1”<br>6) “2”<br>7) “3”<br>8) “4”</p><pre><code>#### 集合类型set在Redis中，我们可以将Set类型看作为没有排序的字符集合，和List类型一样，我们也可以在该类型的数据值上执行添加、删除或判断某一元素是否存在等操作。需要说明的是，这些操作的时间复杂度为O(1)，即常量时间内完成次操作。Set可包含的最大元素数量是4294967295，和List类型不同的是，Set集合中不允许出现重复的元素。集合类型set的常用命令sadd key values value1、value2…* 向set中添加数据，如果该key的值已有则不会重复添加```java127.0.0.1:6379&gt; sadd myset a b c(integer) 3</code></pre><p>smembers key</p><ul><li>获取set中所有的成员<br>```java</li></ul><p>127.0.0.1:6379&gt; sadd myset a b c<br>(integer) 3<br>127.0.0.1:6379&gt; smembers myset<br>1) “c”<br>2) “a”<br>3) “b”</p><pre><code>#### 有序集合类型sortset在redis中,可以保证不重复的元素,仍然可以进行排序有序集合类型sortset常用命令zadd key values value1、value2…* 向set中添加成员```java127.0.0.1:6379&gt; zadd 5 lisi 10 xiaoming 7 xiaohua 8 xiaogou</code></pre><p>zrem key value</p><ul><li>移除set中的成员<pre class=" language-java"><code class="language-java">ZREM myset lisi</code></pre></li></ul><p>zrange key 索引 索引</p><ul><li>通过索引区间返回有序集合成指定区间内的成员<br>```java</li></ul><p>127.0.0.1:6379&gt; zrange myset 0 -1<br>1) “lisi”<br>2) “xiaohua”<br>3) “xiaogou”<br>4) “xiaoming”</p><pre><code>#### Redis的通用命令keys pattern* 获取所有与pattern匹配的key，返回所有与该key匹配的keys。*表示任意一个或多个字符，?表示任意一个字符del key1 key2…* 删除指定的keyexists key* 判断该key是否存在，1代表存在，0代表不存在type key* 获取指定key的类型。该命令将以字符串的格式返回。 返回的字符串为string、list、set、hash，如果key不存在返回none### 1.2.4 Redis的持久化#### Redis持久化概述Redis的高性能是由于其将所有数据都存储在了内存中，为了使Redis在重启之后仍能保证数据不丢失，需要将数据从内存中同步到硬盘中，这一过程就是持久化。Redis支持两种方式的持久化，一种是RDB方式，一种是AOF方式。可以单独使用其中一种或将二者结合使用。* RDB持久化（默认支持，无需配置）该机制是指在指定的时间间隔内将内存中的数据集快照写入磁盘。* AOF持久化该机制将以日志的形式记录服务器所处理的每一个写操作，在Redis服务器启动之初会读取该文件来重新构建数据库，以保证启动后数据库中的数据是完整的。* 无持久化我们可以通过配置的方式禁用Redis服务器的持久化功能，这样我们就可以将Redis视为一个功能加强版的memcached了。* redis可以同时使用RDB和AOF#### RDB持久化机制RDB持久化机制优点:* 一旦采用该方式，那么你的整个Redis数据库将只包含一个文件，这对于文件备份而言是非常完美的。比如，你可能打算每个小时归档一次最近24小时的数据，同时还要每天归档一次最近30天的数据。通过这样的备份策略，一旦系统出现灾难性故障，我们可以非常容易的进行恢复。* 对于灾难恢复而言，RDB是非常不错的选择。因为我们可以非常轻松的将一个单独的文件压缩后再转移到其它存储介质上* 性能最大化。对于Redis的服务进程而言，在开始持久化时，它唯一需要做的只是fork（分叉）出子进程，之后再由子进程完成这些持久化的工作，这样就可以极大的避免服务进程执行IO操作了。相比于AOF机制，如果数据集很大，RDB的启动效率会更高 RDB持久化机制缺点:* 如果你想保证数据的高可用性，即最大限度的避免数据丢失，那么RDB将不是一个很好的选择。因为系统一旦在定时持久化之前出现宕机现象，此前没有来得及写入磁盘的数据都将丢失。* 由于RDB是通过fork子进程来协助完成数据持久化工作的，因此，如果当数据集较大时，可能会导致整个服务器停止服务几百毫秒，甚至是1秒钟RDB持久化机制的配置:在redis.windows.conf配置文件中有如下配置：```java################################ SNAPSHOTTING ################################### Save the DB on disk:## save &lt;seconds&gt; &lt;changes&gt;## Will save the DB if both the given number of seconds and the given# number of write operations against the DB occurred.## In the example below the behaviour will be to save:# after 900 sec (15 min) if at least 1 key changed# after 300 sec (5 min) if at least 10 keys changed# after 60 sec if at least 10000 keys changed## Note: you can disable saving at all commenting all the &quot;save&quot; lines.## It is also possible to remove all the previously configured save# points by adding a save directive with a single empty string argument# like in the following example:## save &quot;&quot;save 900 1save 300 10save 60 10000</code></pre><p>其中，上面配置的是RDB方式数据持久化时机：</p><p><img src="/2020/04/12/day46-redis/2.jpg" alt></p><h4 id="AOF持久化机制"><a href="#AOF持久化机制" class="headerlink" title="AOF持久化机制"></a>AOF持久化机制</h4><p>AOF持久化机制优点:</p><ul><li><p>该机制可以带来更高的数据安全性，即数据持久性。Redis中提供了3中同步策略，即每秒同步、每修改同步和不同步。事实上，每秒同步也是异步完成的，其效率也是非常高的，所差的是一旦系统出现宕机现象，那么这一秒钟之内修改的数据将会丢失。而每修改同步，我们可以将其视为同步持久化，即每次发生的数据变化都会被立即记录到磁盘中。可以预见，这种方式在效率上是最低的。至于无同步，无需多言，我想大家都能正确的理解它。</p></li><li><p>由于该机制对日志文件的写入操作采用的是append模式，因此在写入过程中即使出现宕机现象，也不会破坏日志文件中已经存在的内容。然而如果我们本次操作只是写入了一半数据就出现了系统崩溃问题，不用担心，在Redis下一次启动之前，我们可以通redis-check-aof工具来帮助我们解决数据一致性的问题。</p></li><li><p>如果日志过大，Redis可以自动启用rewrite机制。即Redis以append模式不断的将修改数据写入到老的磁盘文件中，同时Redis还会创建一个新的文件用于记录此期间有哪些修改命令被执行。因此在进行rewrite切换时可以更好的保证数据安全性。</p></li><li><p>AOF包含一个格式清晰、易于理解的日志文件用于记录所有的修改操作。事实上，我们也可以通过该文件完成数据的重建</p></li></ul><p>AOF持久化机制缺点:</p><ul><li><p>对于相同数量的数据集而言，AOF文件通常要大于RDB文件</p></li><li><p>根据同步策略的不同，AOF在运行效率上往往会慢于RDB。总之，每秒同步策略的效率是比较高的，同步禁用策略的效率和RDB一样高效。</p></li></ul><p>AOF持久化机制配置:</p><p>开启AOF持久化</p><pre class=" language-java"><code class="language-java">############################## APPEND ONLY MODE ################################ By <span class="token keyword">default</span> Redis asynchronously dumps the dataset on disk<span class="token punctuation">.</span> This mode is# good enough in many applications<span class="token punctuation">,</span> but an issue with the Redis process or# a power outage may result into a few minutes of writes <span class="token function">lost</span> <span class="token punctuation">(</span>depending on# the configured save points<span class="token punctuation">)</span><span class="token punctuation">.</span>## The Append Only File is an alternative persistence mode that provides# much better durability<span class="token punctuation">.</span> For instance using the <span class="token keyword">default</span> data fsync policy# <span class="token punctuation">(</span>see later in the config file<span class="token punctuation">)</span> Redis can lose just one second of writes in a# dramatic event like a server power outage<span class="token punctuation">,</span> or a single write <span class="token keyword">if</span> something# wrong with the Redis process itself happens<span class="token punctuation">,</span> but the operating system is# still running correctly<span class="token punctuation">.</span>## AOF and RDB persistence can be enabled at the same time without problems<span class="token punctuation">.</span># If the AOF is enabled on startup Redis will load the AOF<span class="token punctuation">,</span> that is the file# with the better durability guarantees<span class="token punctuation">.</span>## Please check http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>redis<span class="token punctuation">.</span>io<span class="token operator">/</span>topics<span class="token operator">/</span>persistence <span class="token keyword">for</span> more information<span class="token punctuation">.</span>appendonly no</code></pre><p>将appendonly修改为yes，开启aof持久化机制，默认会在目录下产生一个appendonly.aof文件</p><p>AOF持久化时机:<br><img src="/2020/04/12/day46-redis/3.jpg" alt></p><h2 id="1-3-Jedis"><a href="#1-3-Jedis" class="headerlink" title="1.3 Jedis"></a>1.3 Jedis</h2><h3 id="1-3-1-jedis的介绍"><a href="#1-3-1-jedis的介绍" class="headerlink" title="1.3.1 jedis的介绍"></a>1.3.1 jedis的介绍</h3><p>Redis不仅是使用命令来操作，现在基本上主流的语言都有客户端支持，比如java、C、C#、C++、php、Node.js、Go等。 在官方网站里列一些Java的客户端，有Jedis、Redisson、Jredis、JDBC-Redis、等其中官方推荐使用Jedis和Redisson。 在企业中用的最多的就是Jedis.</p><p>使用Jedis操作redis需要导入jar包</p><h3 id="1-3-2-jedis的基本操作"><a href="#1-3-2-jedis的基本操作" class="headerlink" title="1.3.2 jedis的基本操作"></a>1.3.2 jedis的基本操作</h3><h4 id="jedis常用API"><a href="#jedis常用API" class="headerlink" title="jedis常用API"></a>jedis常用API</h4><p><img src="/2020/04/12/day46-redis/4.jpg" alt></p><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtilSnapshot</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//0. 导入jar包o</span>        <span class="token comment" spellcheck="true">//1.  建立与redis的连接</span>        Jedis connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 使用该连接 执行命令</span>        <span class="token comment" spellcheck="true">//connection.set("test","小明");</span>        String s <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.关闭连接</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-3-jedis连接池的使用"><a href="#1-3-3-jedis连接池的使用" class="headerlink" title="1.3.3 jedis连接池的使用"></a>1.3.3 jedis连接池的使用</h3><p>jedis连接资源的创建与销毁是很消耗程序性能，所以jedis为我们提供了jedis的池化技术，jedisPool在创建时初始化一些连接资源存储到连接池中，使用jedis连接资源时不需要创建，而是从连接池中获取一个资源进行redis的操作，使用完毕后，不需要销毁该jedis连接资源，而是将该资源归还给连接池，供其他请求使用。</p><p>jedisPool的基本使用</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        获取连接  不能自己创建了   首先创建一个连接池        GenericObjectPoolConfig poolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericObjectPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化</span>        poolConfig<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最大空闲</span>        poolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最多..</span>        poolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        poolConfig<span class="token punctuation">.</span><span class="token function">setMaxWaitMillis</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JedisPool pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>poolConfig<span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需要连接 从池中借出一个</span>        Jedis connection <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//操作方法</span>        String s <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//归还连接池</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Jedis connection <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>jedis连接池工具类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> JedisPool pool <span class="token operator">=</span>null<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取连接  不能自己创建了   首先创建一个连接池</span>        GenericObjectPoolConfig poolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericObjectPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties properties<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>RedisUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"redis.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> minIdle <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"redis.minIdle"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> maxIdle <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"redis.maxIdle"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> maxTotal <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"redis.maxTotal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> maxWaitMillis <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"redis.maxWaitMillis"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String host <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"redis.host"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> port <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"redis.port"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//初始化</span>            poolConfig<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span>minIdle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//最大空闲</span>            poolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span>maxIdle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//最多..</span>            poolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span>maxTotal<span class="token punctuation">)</span><span class="token punctuation">;</span>            poolConfig<span class="token punctuation">.</span><span class="token function">setMaxWaitMillis</span><span class="token punctuation">(</span>maxWaitMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>            pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>poolConfig<span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closePool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        pool<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Jedis <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//需要连接 从池中借出一个</span>        Jedis connection <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis connection <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day45-AJAX-Json</title>
      <link href="/2020/04/12/day45-ajax-json/"/>
      <url>/2020/04/12/day45-ajax-json/</url>
      
        <content type="html"><![CDATA[<h1 id="day45-AJAX-amp-Json"><a href="#day45-AJAX-amp-Json" class="headerlink" title="day45_AJAX&amp;Json"></a>day45_AJAX&amp;Json</h1><h2 id="1-1-AJAX"><a href="#1-1-AJAX" class="headerlink" title="1.1 AJAX"></a>1.1 AJAX</h2><h3 id="1-1-1-AJAX原理"><a href="#1-1-1-AJAX原理" class="headerlink" title="1.1.1 AJAX原理"></a>1.1.1 AJAX原理</h3><h4 id="什么是异步请求和异步请求"><a href="#什么是异步请求和异步请求" class="headerlink" title="什么是异步请求和异步请求"></a>什么是异步请求和异步请求</h4><p>AJAX=Asynchronous Javascript And XML</p><p>同步现象：客户端发送请求到服务器端，当服务器返回响应之前，客户端都处于等待，卡死<br>状态</p><p>异步现象：客户端发送请求到服务器端，无论服务器是否返回响应，客户端都可以随 意做其<br>他事情，不会被卡死</p><h3 id="1-1-2-AJAX的使用"><a href="#1-1-2-AJAX的使用" class="headerlink" title="1.1.2 AJAX的使用"></a>1.1.2 AJAX的使用</h3><p>页面发起请求，会将请求发送给浏览器内核中的Ajax引擎，Ajax引擎会提交请求到客户端，<br>在这段时间里，客户端可以任意进行任意操作，直到服务器端将数据返回给 Ajax引擎后，会触发你设置的事件，从而执行自定义的js逻辑代码完成某种页面功能。</p><p><img src="/2020/04/12/day45-ajax-json/1.png" alt></p><h4 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h4><ol><li>获得ajax引擎</li><li>设置回调函数</li><li>确定请求路径</li><li>发送请求</li></ol><h4 id="原生态JavaScript实现AJAX程序"><a href="#原生态JavaScript实现AJAX程序" class="headerlink" title="原生态JavaScript实现AJAX程序"></a>原生态JavaScript实现AJAX程序</h4><pre class=" language-javascript"><code class="language-javascript">    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">function</span> <span class="token function">req</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.创建ajax的核心引擎对象 XMLHttpRequest对象</span>            <span class="token keyword">var</span> xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>xhr<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//兼容ie 5 6 7的</span>                xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//2.提前告知这个对象 后续操作(回调函数)</span>            xhr<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//操作 获取服务器端返回的数据</span>                    <span class="token keyword">var</span> data<span class="token operator">=</span>xhr<span class="token punctuation">.</span>responseText                    <span class="token comment" spellcheck="true">//alert(data);</span>                    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>data<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//3.告知这个对象 请求方式 请求地址</span>            xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"http://localhost/hello?username=xiaoming"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//4.调用发送方法</span>            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="1-1-3-jQuery实现AJAX"><a href="#1-1-3-jQuery实现AJAX" class="headerlink" title="1.1.3 jQuery实现AJAX"></a>1.1.3 jQuery实现AJAX</h3><h4 id="get-函数实现AJAJX-不带参"><a href="#get-函数实现AJAJX-不带参" class="headerlink" title="$.get()函数实现AJAJX(不带参)"></a>$.get()函数实现AJAJX(不带参)</h4><pre class=" language-javascript"><code class="language-javascript">    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">function</span> <span class="token function">req</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost/hello"</span><span class="token punctuation">,</span><span class="token string">"username=xiaoming"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>注意：get和post函数的写法完全一致，区别在于get提交参数在请求行，而post提交参数在请求体</p><h4 id="post-函数实现AJAJX-不带参"><a href="#post-函数实现AJAJX-不带参" class="headerlink" title="$.post()函数实现AJAJX(不带参)"></a>$.post()函数实现AJAJX(不带参)</h4><pre class=" language-javascript"><code class="language-javascript">   <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">function</span> <span class="token function">req</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://localhost/hello"</span><span class="token punctuation">,</span><span class="token string">"username=xiaoming"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>注意：不带方法签名，去掉｛｝，不在需要写方法签名，例如 url: data:等，但是注意参<br>数的顺序不能错，参数的顺序必须是 url-&gt;data-&gt;success-&gt;dataType，</p><h4 id="ajax-函数实现AJAJX-带参"><a href="#ajax-函数实现AJAJX-带参" class="headerlink" title="$.ajax()函数实现AJAJX(带参)"></a>$.ajax()函数实现AJAJX(带参)</h4><p>$.ajax方法是get和post的底层实现方法，该方法使用更灵活，参数更丰富，并可以设置异步或同步。上层方法简单易用，代码量较少。底层方法灵活性更强，方法签名更多，代码量比较多</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">function</span> <span class="token function">req</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                url<span class="token punctuation">:</span><span class="token string">"http://localhost/hello"</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token string">"username=xiaoming"</span><span class="token punctuation">,</span>                type<span class="token punctuation">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                error<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"出错了...."</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="1-2-Json"><a href="#1-2-Json" class="headerlink" title="1.2 Json"></a>1.2 Json</h2><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。JSON采用完全独立于语言的文本格式，就是说不同的编程语言JSON数据是一致的。JS原生支持JSON。</p><h3 id="1-2-1-JSON的两种数据格式"><a href="#1-2-1-JSON的两种数据格式" class="headerlink" title="1.2.1 JSON的两种数据格式"></a>1.2.1 JSON的两种数据格式</h3><ol><li><p>数组格式：var json2=”[1,’hello’,true]”;</p></li><li><p>对象格式：var json1=”{‘username’:’小明’,’age’:18,’vip’:true}”;</p></li></ol><p>两种格式可以进行任意的嵌套</p><h3 id="1-2-2-JSON数据解析"><a href="#1-2-2-JSON数据解析" class="headerlink" title="1.2.2 JSON数据解析"></a>1.2.2 JSON数据解析</h3><pre class=" language-javascript"><code class="language-javascript">      <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment" spellcheck="true">//对象</span>        <span class="token keyword">var</span> json1<span class="token operator">=</span><span class="token string">"{'username':'小明','age':18,'vip':true}"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最早诞生于js  肯定出一个简单方法用它的数据</span>        <span class="token comment" spellcheck="true">//黑魔法函数</span>        <span class="token keyword">var</span> jsonObj1<span class="token operator">=</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token operator">+</span>json1<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>jsonObj1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//数组形式的</span>        <span class="token keyword">var</span> json2<span class="token operator">=</span><span class="token string">"[1,'hello',true]"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> jsonObj2<span class="token operator">=</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token operator">+</span>json2<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>jsonObj2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="1-2-3-JS中特有的JSON格式"><a href="#1-2-3-JS中特有的JSON格式" class="headerlink" title="1.2.3 JS中特有的JSON格式"></a>1.2.3 JS中特有的JSON格式</h3><ol><li><p>数组格式： var json4=[“1”,”你好”,true,100];</p></li><li><p>对象格式： var json3={ “username”:”小明明”, “age”:19,”password”:”123”};</p></li></ol><p>解析</p><pre class=" language-javascript"><code class="language-javascript">      <span class="token operator">&lt;</span>script<span class="token operator">></span>      <span class="token keyword">var</span> json3<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"username"</span><span class="token punctuation">:</span><span class="token string">"小明明"</span><span class="token punctuation">,</span>            <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span>            <span class="token string">"password"</span><span class="token punctuation">:</span><span class="token string">"123"</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>json3<span class="token punctuation">.</span>password<span class="token punctuation">)</span>        <span class="token keyword">var</span> json4<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"你好"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>json4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//开始嵌套</span>        <span class="token keyword">var</span> json5<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"username"</span><span class="token punctuation">:</span><span class="token string">"小明明"</span><span class="token punctuation">,</span>            <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span>            <span class="token string">"password"</span><span class="token punctuation">:</span><span class="token string">"123"</span><span class="token punctuation">,</span>            <span class="token string">"hobbies"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"smoking"</span><span class="token punctuation">,</span><span class="token string">"drink"</span><span class="token punctuation">,</span><span class="token string">"tangtou"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>json5<span class="token punctuation">.</span>hobbies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="1-2-4-AJAX的json数据使用"><a href="#1-2-4-AJAX的json数据使用" class="headerlink" title="1.2.4 AJAX的json数据使用"></a>1.2.4 AJAX的json数据使用</h3><p>客户端向服务器发送请求，服务器响应的数据必须是json格式</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">function</span> <span class="token function">req</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                url<span class="token punctuation">:</span><span class="token string">"http://localhost/hello"</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token string">"username=xiaoming"</span><span class="token punctuation">,</span>                type<span class="token punctuation">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>                dataType<span class="token punctuation">:</span><span class="token string">'json'</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                error<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"出错了...."</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="1-2-5-Java数据转成json格式数据"><a href="#1-2-5-Java数据转成json格式数据" class="headerlink" title="1.2.5 Java数据转成json格式数据"></a>1.2.5 Java数据转成json格式数据</h3><p>json的转换插件是通过java的一些工具，直接将java对象或集合转换成json字符串。常用的<br>json转换工具有如下几种：</p><ol><li>jsonlib</li><li>Gson</li><li>fastjson</li></ol><p>导入jar包后</p><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacksonTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>        String <span class="token punctuation">[</span><span class="token punctuation">]</span> ss<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token string">"小绿"</span><span class="token punctuation">,</span><span class="token string">"小黑"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"大郎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"次郎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"二蛋郎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"大郎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"次郎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"二蛋郎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>        Map map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"大郎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"job"</span><span class="token punctuation">,</span><span class="token string">"卖炊饼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"吃烧饼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"喝凉水"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"戴帽子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"大郎"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"吃烧饼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"喝凉水"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"戴帽子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"大郎"</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"吃烧饼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"喝凉水"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"戴帽子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"二郎"</span><span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"吃烧饼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"喝凉水"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"戴帽子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"金莲.."</span><span class="token punctuation">,</span> list3<span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobbies<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobbies<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> hobbies<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getHobbies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hobbies<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHobbies</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobbies<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> hobbies<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day44jQuery高级</title>
      <link href="/2020/04/12/day44jquery-gao-ji/"/>
      <url>/2020/04/12/day44jquery-gao-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="day44jQuery高级"><a href="#day44jQuery高级" class="headerlink" title="day44jQuery高级"></a>day44jQuery高级</h1><h2 id="1-1-jQuery遍历"><a href="#1-1-jQuery遍历" class="headerlink" title="1.1 jQuery遍历"></a>1.1 jQuery遍历</h2><p>jQuery对象本身就是数组对象，通过jQuery选择器获得的都是满足该选择器条件的元素对象的集合体。因此在常常需要对jQuery对象进行遍历。我们会学习三种遍历jQuery的方法</p><h3 id="1-1-1-传统循环遍历"><a href="#1-1-1-传统循环遍历" class="headerlink" title="1.1.1 传统循环遍历"></a>1.1.1 传统循环遍历</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">/**             * 传统形式遍历             */</span>            window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//dom对象获取所有的标签option</span>                <span class="token keyword">var</span> options <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"option"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>options<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>options<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="1-1-2-jQuery对象的方法"><a href="#1-1-2-jQuery对象的方法" class="headerlink" title="1.1.2 jQuery对象的方法"></a>1.1.2 jQuery对象的方法</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//jQuery方式获取option标签</span>                <span class="token keyword">var</span> $option <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"option"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//jQuery对象调用函数each</span>                <span class="token comment" spellcheck="true">/**                 *  匿名函数,回调函数                 *  each函数调用                 *  参数: 索引, 遍历到的元素                 *  each遍历数组,遍历一次调用一次匿名函数                 */</span>                $option<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//alert(index+"==="+element);</span>                    <span class="token comment" spellcheck="true">//jQuery对象本质数组,遍历的元素DOM对象</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>  <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="1-1-3-jQuery全局函数each遍历"><a href="#1-1-3-jQuery全局函数each遍历" class="headerlink" title="1.1.3 jQuery全局函数each遍历"></a>1.1.3 jQuery全局函数each遍历</h3><p>  jQuery框架定义函数,each</p><p>  不需要jQuery对象调用, $调用的</p><p>  $.each()  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//jQuery方式获取option标签</span>                <span class="token keyword">var</span> $option <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"option"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">var</span> options <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"option"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//jQuery符号$直接调用全局函数each</span>                <span class="token comment" spellcheck="true">/**                 * 全局函数each的参数                 * 被遍历的对象                 * 回调函数,传递索引和元素                 * 好处: 遍历的容器可以是jQuery对象,也可以是DOM对象                 */</span>                $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="1-1-4-增强for"><a href="#1-1-4-增强for" class="headerlink" title="1.1.4 增强for"></a>1.1.4 增强for</h3><pre class=" language-java"><code class="language-java">格式<span class="token operator">:</span>  <span class="token keyword">for</span><span class="token punctuation">(</span> 元素  of  容器<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>举例<span class="token operator">:</span> <span class="token keyword">for</span><span class="token punctuation">(</span>element of $<span class="token punctuation">(</span><span class="token string">"options"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    执行语句<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h2 id="1-2-jQuery的事件"><a href="#1-2-jQuery的事件" class="headerlink" title="1.2 jQuery的事件"></a>1.2 jQuery的事件</h2><h3 id="1-2-1-常用事件"><a href="#1-2-1-常用事件" class="headerlink" title="1.2.1 常用事件"></a>1.2.1 常用事件</h3><p><img src="/2020/04/12/day44jquery-gao-ji/1.jpg" alt></p><h3 id="1-2-2-DOM对象绑定事件"><a href="#1-2-2-DOM对象绑定事件" class="headerlink" title="1.2.2 DOM对象绑定事件"></a>1.2.2 DOM对象绑定事件</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取按钮</span>                <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//DOM对象的事件属性</span>                btn<span class="token punctuation">.</span>onclick  <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"按钮被点击"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="1-2-3-jQuery对象绑定事件"><a href="#1-2-3-jQuery对象绑定事件" class="headerlink" title="1.2.3 jQuery对象绑定事件"></a>1.2.3 jQuery对象绑定事件</h3><p>on(events,selector,fn(data))函数绑定</p><ol><li>参数events：事件名称，多个事件之间空格分开。”click mouseover”</li><li>参数selector：绑定事件元素的子代元素，不传递参数，表示该元素自己绑定事件</li><li>参数data：事件中要传递给响应函数的参数</li><li>参数fn：事件相应的函数</li></ol><p>  jQuery对象中函数,实现对一个事件源同时绑定多个事件 on</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>          绑定一个事件 <span class="token punctuation">:</span>           <span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"事件名称"</span> <span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span> <span class="token punctuation">,</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                         <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"always  on ... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">*</span> 绑定多个事件<span class="token punctuation">,</span> 做多个事情<span class="token punctuation">.</span>  相当于是绑定多个键值对<span class="token punctuation">.</span>          <span class="token operator">*</span>   <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key<span class="token punctuation">:</span>value <span class="token punctuation">,</span> key<span class="token punctuation">:</span>value <span class="token punctuation">,</span>key<span class="token punctuation">:</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">*</span>          <span class="token operator">*</span>  <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"事件名"</span><span class="token punctuation">:</span>f <span class="token function">unction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token operator">*</span>         <span class="token operator">...</span>          <span class="token operator">*</span>       <span class="token punctuation">}</span>  <span class="token punctuation">,</span>         <span class="token operator">*</span>      <span class="token string">"事件名2"</span> <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token operator">*</span>          <span class="token operator">...</span>           <span class="token operator">*</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">*</span>               <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token string">"mouseover"</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 改变颜色 </span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token string">"mouseout"</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token string">"click"</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="1-2-4-jQuery解绑事件"><a href="#1-2-4-jQuery解绑事件" class="headerlink" title="1.2.4 jQuery解绑事件"></a>1.2.4 jQuery解绑事件</h3><p>  jQuery对象的函数 off</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            对象<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"事件名称"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#f"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"mouseover"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="1-3-validate表单验证插件"><a href="#1-3-validate表单验证插件" class="headerlink" title="1.3 validate表单验证插件"></a>1.3 validate表单验证插件</h2><p>网络上有许多成熟的插件共使用者参考，插件就是将jquery实现的常用操作进行封装，封装后的“小框架“就可以叫做插件，按照插件的语法去操作可以实现很多复杂 的功能，而我们需要做的是学会该插件的使用语法即可。我们仅是要使用的是jquery关于表单校验的插件。</p><p>使用步骤</p><ol><li>下载jquery-validation插件</li><li>将该插件（也就是一个js文件）导入到我们的工程中</li><li>在要使用校验插件的html中引入该js文件</li></ol><h3 id="1-3-1-表单验证案例"><a href="#1-3-1-表单验证案例" class="headerlink" title="1.3.1 表单验证案例"></a>1.3.1 表单验证案例</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#empForm"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//表单验证的规则</span>                    rules<span class="token punctuation">:</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//真实姓名,必须填写</span>                        realname<span class="token punctuation">:</span><span class="token string">"required"</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//登录名,必须填写,长度5-8</span>                        username<span class="token punctuation">:</span><span class="token punctuation">{</span>                            required<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                            rangelength<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//密码规则,必须填写,长度6-12</span>                        psw<span class="token punctuation">:</span><span class="token punctuation">{</span>                            required<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                            rangelength<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//确认密码,必须填写,和密码一致</span>                        psw2<span class="token punctuation">:</span><span class="token punctuation">{</span>                            required<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                            equalTo<span class="token punctuation">:</span><span class="token string">"#psw"</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//性别规则,必须选择一个</span>                        gender<span class="token punctuation">:</span><span class="token string">"required"</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//年龄规则,必须填写,范围26-50之间</span>                        age<span class="token punctuation">:</span><span class="token punctuation">{</span>                            required<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                            range<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//学历规则,必须选一个</span>                        edu<span class="token punctuation">:</span><span class="token string">"required"</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//生日规则,必须填写,格式正确,合法 </span>                        birthday<span class="token punctuation">:</span><span class="token punctuation">{</span>                            required<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                            dateISO<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                            date<span class="token punctuation">:</span><span class="token boolean">true</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//爱好规则,必须选一个</span>                        checkbox1<span class="token punctuation">:</span><span class="token string">"required"</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//邮箱规则,必须填写,符号邮件地址规则</span>                        email<span class="token punctuation">:</span><span class="token punctuation">{</span>                            required<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                            email<span class="token punctuation">:</span><span class="token boolean">true</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">//验证消息</span>                    messages<span class="token punctuation">:</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//真实姓名消息</span>                        realname<span class="token punctuation">:</span><span class="token string">"请填写真实姓名"</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//登录名消息</span>                        username<span class="token punctuation">:</span><span class="token punctuation">{</span>                            required<span class="token punctuation">:</span><span class="token string">"必须填写登录名"</span><span class="token punctuation">,</span>                            rangelength<span class="token punctuation">:</span><span class="token string">"用户名长度必须5-8位"</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//密码消息</span>                        psw<span class="token punctuation">:</span><span class="token punctuation">{</span>                            required<span class="token punctuation">:</span><span class="token string">"必须填写密码"</span><span class="token punctuation">,</span>                            rangelength<span class="token punctuation">:</span><span class="token string">"密码长度必须6-12位"</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//确认密码消息</span>                        psw2<span class="token punctuation">:</span><span class="token punctuation">{</span>                            required<span class="token punctuation">:</span><span class="token string">"必须填写密码"</span><span class="token punctuation">,</span>                            equalTo<span class="token punctuation">:</span><span class="token string">"两次密码不一致"</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//姓名消息</span>                        gender<span class="token punctuation">:</span><span class="token string">"必须选"</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//年龄消息</span>                        age<span class="token punctuation">:</span><span class="token punctuation">{</span>                            required<span class="token punctuation">:</span><span class="token string">"必须填写年龄"</span><span class="token punctuation">,</span>                            range<span class="token punctuation">:</span><span class="token string">"年龄必须在26-50之间"</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//学历消息</span>                        edu<span class="token punctuation">:</span><span class="token string">"请选择一个学历"</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//生日消息</span>                        birthday<span class="token punctuation">:</span><span class="token punctuation">{</span>                            required<span class="token punctuation">:</span><span class="token string">"必须填写生日"</span><span class="token punctuation">,</span>                            dateISO<span class="token punctuation">:</span><span class="token string">"日期格式不正确"</span><span class="token punctuation">,</span>                            date<span class="token punctuation">:</span><span class="token string">"日期不存在"</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//爱好消息</span>                        checkbox1<span class="token punctuation">:</span><span class="token string">"请选择一个爱好"</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//邮箱消息</span>                        email<span class="token punctuation">:</span><span class="token punctuation">{</span>                            required<span class="token punctuation">:</span><span class="token string">"必须填写邮箱"</span><span class="token punctuation">,</span>                            email<span class="token punctuation">:</span><span class="token string">"邮箱格式不正确"</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="1-3-2-自定义验证规则"><a href="#1-3-2-自定义验证规则" class="headerlink" title="1.3.2 自定义验证规则"></a>1.3.2 自定义验证规则</h3><p>  标准语法规则, jQuery选择符号$调用插件属性validator</p><p>  属性调用插件函数 addMethod()</p><p>  参数:</p><ul><li>规则名</li><li>回调函数</li></ul><pre class=" language-javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">/*             * 匿名函数中具有三个参数             * value   : 文本框输入的值             * element : 文本框标签对象             * param   : 规则后面的参数   range:[5,10]             */</span>            <span class="token comment" spellcheck="true">//自定义身份证号的15位规则</span>            $<span class="token punctuation">.</span>validator<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token string">"cart15"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>element<span class="token punctuation">,</span>param<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//文本框输入的值 value判断</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">18</span><span class="token punctuation">)</span>                  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//定义15位规则,全数字</span>                <span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex">/^[0-9]{15}$/</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//自定义身份证号的是18位规则</span>            $<span class="token punctuation">.</span>validator<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token string">"cart18"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>element<span class="token punctuation">,</span>param<span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">15</span><span class="token punctuation">)</span>                   <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//定义18位规则,前17个数字,最后一位可以是数字,可以是X</span>                <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^[0-9]{17}[0-9X]{1}$/</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//自定义身份证的长度规则</span>            $<span class="token punctuation">.</span>validator<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token string">"cartlength"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>element<span class="token punctuation">,</span>param<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">15</span> <span class="token operator">||</span> value<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">18</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//身份证号规则</span>cart<span class="token punctuation">:</span><span class="token punctuation">{</span>    required<span class="token punctuation">:</span><span class="token string">"必须填写身份证号"</span><span class="token punctuation">,</span>    cartlength<span class="token punctuation">:</span><span class="token string">"身份证号码长度只能是15或18位"</span><span class="token punctuation">,</span>    cart15<span class="token punctuation">:</span><span class="token string">"15位格式全数字"</span><span class="token punctuation">,</span>    cart18<span class="token punctuation">:</span><span class="token string">"18位格式全数字,最后一位可以是X"</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-3-日期插件"><a href="#1-3-3-日期插件" class="headerlink" title="1.3.3 日期插件"></a>1.3.3 日期插件</h3><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>                     引入第三方提供的日期插件 <span class="token punctuation">.</span>                     <span class="token number">1</span><span class="token punctuation">.</span> 拷贝 My97DatePicker 目录 到 js目录下                      <span class="token number">2</span><span class="token punctuation">.</span> 引入 WdatePicker<span class="token punctuation">.</span>js 文件                      <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"../js/My97DatePicker/WdatePicker.js"</span> type<span class="token operator">=</span><span class="token string">"text/javascript"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>                     <span class="token number">3</span><span class="token punctuation">.</span> 文本框绑定点击事件 <span class="token punctuation">,</span> 调用 <span class="token function">WdatePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>tr<span class="token operator">></span>    <span class="token operator">&lt;</span>td<span class="token operator">></span>出生日期<span class="token punctuation">(</span><span class="token number">1982</span><span class="token operator">/</span><span class="token number">09</span><span class="token operator">/</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"birthday"</span> name<span class="token operator">=</span><span class="token string">"birthday"</span> value<span class="token operator">=</span><span class="token string">""</span> onclick<span class="token operator">=</span><span class="token string">"WdatePicker()"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day43jQuery基础</title>
      <link href="/2020/04/12/day43jquery-ji-chu/"/>
      <url>/2020/04/12/day43jquery-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="day43jQuery基础"><a href="#day43jQuery基础" class="headerlink" title="day43jQuery基础"></a>day43jQuery基础</h1><h2 id="1-1-jQuery入门"><a href="#1-1-jQuery入门" class="headerlink" title="1.1  jQuery入门"></a>1.1  jQuery入门</h2><h3 id="1-1-1-jQuery介绍"><a href="#1-1-1-jQuery介绍" class="headerlink" title="1.1.1 jQuery介绍"></a>1.1.1 jQuery介绍</h3><p>jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀JavaScript代码库（或JavaScript框架）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。jQuery实现了跨越浏览器，开发者不需要在关注浏览器的兼容性了，但是从2.0版本开始，不在兼容IE6，7，8</p><h3 id="1-1-2-jQuery基本使用方式"><a href="#1-1-2-jQuery基本使用方式" class="headerlink" title="1.1.2 jQuery基本使用方式"></a>1.1.2 jQuery基本使用方式</h3><p>页面中引入jQuery文件</p><pre class=" language-javaScript"><code class="language-javaScript"><script src="../js/jquery-3.3.1.min.js" type="text/javascript" charset="utf-8"></script></code></pre><p>首先调用jQuery中的核心函数，函数的名就是jQuery，在此函数的参数中传递匿名函数，这<br>个匿名函数将在页面加载完成后执行，相当于window.onload(在页面中只能执行一次)，同事函数名jQuery可以简写为$。同时$也是jQuery中的选择器，可以查找页面中的标签元素。</p><pre class=" language-javaScript"><code class="language-javaScript">        <script type="text/javascript">        $(function(){            alert("hello jQuery !!!")        });        $(function(){            alert("hello jQuery222 !!!")        });        </script></code></pre><h3 id="1-1-3-DOM对象和jQuery对象的相互转换"><a href="#1-1-3-DOM对象和jQuery对象的相互转换" class="headerlink" title="1.1.3 DOM对象和jQuery对象的相互转换"></a>1.1.3 DOM对象和jQuery对象的相互转换</h3><p>DOM对象和jQuery对象相互是不通用的，也就是说document.getXXX()获取到的元素，属于<br>DOM对象，只能调用DOM对象中提供的方法和属性。而使用$(“XX”)获取到的元素属于jQuery对象，只能调用jQuery对象的方法。</p><p>将DOM对象转成jQuery对象，使用$包裹即可</p><pre class=" language-javaScript"><code class="language-javaScript">var $jquery = $(dom对象)；</code></pre><p>jQuery对象转成DOM对象</p><pre class=" language-javaScript"><code class="language-javaScript">var dom = $jquery[0];</code></pre><h2 id="1-2-jQuery选择器"><a href="#1-2-jQuery选择器" class="headerlink" title="1.2 jQuery选择器"></a>1.2 jQuery选择器</h2><p>jQuery的选择器与css的选择器的作用是完全一样的，目的是精确快速的定位到某个html元素上并获取该元素对象，进而使用jQuery的方法对该html进行操作。jQuery常用的选择器有如下：基本选择器，层级选择器，属性选择器，基本过滤选择器，表单属性选择器等</p><h3 id="1-2-1-基本选择器"><a href="#1-2-1-基本选择器" class="headerlink" title="1.2.1 基本选择器"></a>1.2.1 基本选择器</h3><ol><li>标签选择器（元素选择器）：$(“html标签名”)</li><li>id选择器：$(“#id的属性值”)</li><li>类选择器：$(“.class的属性值”)</li></ol><h3 id="1-2-2-层级选择器"><a href="#1-2-2-层级选择器" class="headerlink" title="1.2.2 层级选择器"></a>1.2.2 层级选择器</h3><ol><li>获得A元素内部的所有的B元素：$(“A B “)</li><li>获得A元素下面的所有B子元素：$(“A &gt; B”)</li><li>获得A元素同级下一个B元素：$(“A + B”)</li><li>获得A元素同级所有后面B元素：$(“A ~ B”)</li></ol><p>siblings方法,选择所有的同级标签</p><h3 id="1-2-3-属性选择器"><a href="#1-2-3-属性选择器" class="headerlink" title="1.2.3 属性选择器"></a>1.2.3 属性选择器</h3><ol><li>$(“标签名[属性名]”)  包含这个属性就选择</li></ol><ol start="2"><li>$(“标签名[属性名=值]”) 有这个属性的值就选择</li></ol><ol start="3"><li>标签名[属性名!=’属性值’]  不含某种属性值 ,就选择</li></ol><ol start="4"><li>标签名[属性名*=’属性值’]  *=  包含属性值 包含属性就选择</li></ol><ol start="5"><li>标签名[属性名$=’属性值’]  $=  以属性值结束 以什么结束就选择</li></ol><ol start="6"><li>标签名[属性名^=’属性值’]  ^=  以属性值开始. 以什么开始就选择</li></ol><ol start="7"><li>$(“标签名[属性名!=值][属性名!=值][属性名!=值]”) 含有多个满足的元素就选择</li></ol><h3 id="1-2-4-基本过滤选择器"><a href="#1-2-4-基本过滤选择器" class="headerlink" title="1.2.4 基本过滤选择器"></a>1.2.4 基本过滤选择器</h3><ol><li>$(“div:first”).css(“background-color”, “red”);  first：  第一个标签</li></ol><ol start="2"><li>$(“div:last”).css(“background-color”, “red”);   last：   最后一个标签’</li></ol><ol start="3"><li>$(“div:not(.one)”).css(“background-color”, “red”);  not： 取反</li></ol><ol start="4"><li>$(“div:even”).css(“background-color”, “red”);     even:  下标为偶数</li></ol><ol start="5"><li>$(“div:odd”).css(“background-color”, “green”);    odd:    下标为奇数</li></ol><ol start="6"><li>$(“div:gt(3)”).css(“background-color”, “green”);  gt(index): 大于index的<br>标签</li></ol><ol start="7"><li>$(“div:lt(3)”).css(“background-color”, “green”);   lt(index)：小于index的标签</li></ol><ol start="8"><li>$(“div:eq(3)”).css(“background-color”, “green”);   eq(index) 等于index的标签</li></ol><ol start="9"><li><p>$(“:header”).css(“background-color”, “green”);  header：获得标题</p></li><li><p>$(“:animated”).css(“background-color”, “green”);  animated：获得正在执行的动画标签</p></li></ol><h3 id="1-2-5-表单属性选择器"><a href="#1-2-5-表单属性选择器" class="headerlink" title="1.2.5 表单属性选择器"></a>1.2.5 表单属性选择器</h3><ol><li>可用： :enabled</li></ol><ol start="2"><li>不可用： :disabled</li></ol><ol start="3"><li>选中（单选radio ，多选checkbox）： :checked</li></ol><ol start="4"><li>选择（下列列表 select ）： :selected</li></ol><p>注意：这些选择器可以适当的结合使用</p><h2 id="1-3-jQuery的DOM方法操作"><a href="#1-3-jQuery的DOM方法操作" class="headerlink" title="1.3 jQuery的DOM方法操作"></a>1.3 jQuery的DOM方法操作</h2><h3 id="1-3-1-文本-值操作"><a href="#1-3-1-文本-值操作" class="headerlink" title="1.3.1 文本/值操作"></a>1.3.1 文本/值操作</h3><ol><li>html() === innerHTML</li></ol><ol start="2"><li>text() === innerText</li></ol><ol start="3"><li>val() === value</li></ol><p>注意：括号内 传递参数代表赋值 空参代表获取</p><h3 id="1-3-2-属性操作"><a href="#1-3-2-属性操作" class="headerlink" title="1.3.2 属性操作"></a>1.3.2 属性操作</h3><ol><li>attr() === setAttribute和getAttribute</li></ol><ol start="2"><li>attr(属性名称); — 获取属性的值</li></ol><ol start="3"><li>attr(属性名称,属性值) — 设置的属性的值</li></ol><ol start="4"><li>removeAttr(“属性名称”);— 移除属性</li></ol><ol start="5"><li>prop(“属性名称”));— 表单内使用获得属性值</li></ol><h3 id="1-3-3-css操作"><a href="#1-3-3-css操作" class="headerlink" title="1.3.3 css操作"></a>1.3.3 css操作</h3><ol><li>addClass（值） === attr(“class”,值)</li></ol><ol start="2"><li>removeClass（class值） === removeAttr（“class值”）：不传参全部移除</li></ol><ol start="3"><li>css() ==== js对象.style.属性</li></ol><ol start="4"><li>css(css属性名) 获取css属性名称对应值</li></ol><ol start="5"><li>css(css属性名,值) 设置css样式</li></ol><ol start="6"><li>toggleClass(“属性值”);</li></ol><h3 id="1-3-4-元素创建-内部插入"><a href="#1-3-4-元素创建-内部插入" class="headerlink" title="1.3.4 元素创建/内部插入"></a>1.3.4 元素创建/内部插入</h3><ol><li>append() 追加子节点</li></ol><ol start="2"><li>prepend() 追加子节点，在最前</li></ol><ol start="3"><li>remove() 移除节点</li></ol><ol start="4"><li>empty() 清空所有子节点</li></ol><h3 id="1-3-5-动画效果"><a href="#1-3-5-动画效果" class="headerlink" title="1.3.5 动画效果"></a>1.3.5 动画效果</h3><h4 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h4><ol><li>show(speed ,fn) 显示参数 speed，显示速度，单位：毫秒。固定字符串：slow, normal, orfast参数 fn，显示成功之后回调函数。</li></ol><ol start="2"><li>hide() 隐藏</li></ol><ol start="3"><li>toggle() 切换</li></ol><h4 id="元素的滑动显示与隐藏"><a href="#元素的滑动显示与隐藏" class="headerlink" title="元素的滑动显示与隐藏"></a>元素的滑动显示与隐藏</h4><ol><li>slideDown() 显示，高度变大。</li></ol><ol start="2"><li>slideUp() 隐藏，高度变小。</li></ol><ol start="3"><li>slideToggle() 切换</li></ol><h4 id="元素的淡入淡出的显示与隐藏"><a href="#元素的淡入淡出的显示与隐藏" class="headerlink" title="元素的淡入淡出的显示与隐藏"></a>元素的淡入淡出的显示与隐藏</h4><ol><li>fadeIn() 显示</li></ol><ol start="2"><li>fadeOut() 隐藏</li></ol><ol start="3"><li>fadeToggle() 切换</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day42jdbc条件查询-分页</title>
      <link href="/2020/04/12/day42jdbc-tiao-jian-cha-xun-fen-ye/"/>
      <url>/2020/04/12/day42jdbc-tiao-jian-cha-xun-fen-ye/</url>
      
        <content type="html"><![CDATA[<h1 id="day42jdbc条件查询-amp-分页"><a href="#day42jdbc条件查询-amp-分页" class="headerlink" title="day42jdbc条件查询&amp;分页"></a>day42jdbc条件查询&amp;分页</h1><h2 id="1-1-案例：后台商品展示"><a href="#1-1-案例：后台商品展示" class="headerlink" title="1.1 案例：后台商品展示"></a>1.1 案例：后台商品展示</h2><p>在管理员页面,显示所有商品信息.  dao/service 不用改变 . 提供一个新的Servlet , 跳转到管理员商品显示页面. </p><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/adminall"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminAllServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建 Service 对象</span>        ProductService pservice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用查找所有商品的方法</span>        List<span class="token operator">&lt;</span>Product<span class="token operator">></span> all <span class="token operator">=</span> pservice<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 保存request 域中</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>all<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span> <span class="token punctuation">,</span> all<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 跳转 管理员的商品页面</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/admin/product/list.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductDao</span> <span class="token punctuation">{</span>    QueryRunner qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span>C3P0Utils<span class="token punctuation">.</span><span class="token function">getDS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Product<span class="token operator">></span> <span class="token function">queryAllProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM product"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  qr<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span> sql<span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Product<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建 Dao</span>    ProductDao productDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Product<span class="token operator">></span> <span class="token function">queryAllProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Product<span class="token operator">></span> products <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            products <span class="token operator">=</span> productDao<span class="token punctuation">.</span><span class="token function">queryAllProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> products<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="domian"><a href="#domian" class="headerlink" title="domian"></a>domian</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String pid<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> market_price<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> shop_price<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pimage<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pdate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> is_hot<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pdesc<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> pflag<span class="token punctuation">;</span>    <span class="token keyword">private</span> String cid<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>   </code></pre><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>c<span class="token operator">:</span>forEach var<span class="token operator">=</span><span class="token string">"p"</span> items<span class="token operator">=</span><span class="token string">"${list}"</span> varStatus<span class="token operator">=</span><span class="token string">"num"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>tr onmouseover<span class="token operator">=</span><span class="token string">"this.style.backgroundColor = 'white'"</span>    onmouseout<span class="token operator">=</span><span class="token string">"this.style.backgroundColor = '#F5FAFE';"</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"CURSOR: hand; HEIGHT: 22px"</span> align<span class="token operator">=</span><span class="token string">"center"</span>    width<span class="token operator">=</span><span class="token string">"18%"</span><span class="token operator">></span>$<span class="token punctuation">{</span>num<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"CURSOR: hand; HEIGHT: 22px"</span> align<span class="token operator">=</span><span class="token string">"center"</span>    width<span class="token operator">=</span><span class="token string">"17%"</span><span class="token operator">></span><span class="token operator">&lt;</span>img width<span class="token operator">=</span><span class="token string">"40"</span> height<span class="token operator">=</span><span class="token string">"45"</span> src<span class="token operator">=</span><span class="token string">"${p.pimage}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"CURSOR: hand; HEIGHT: 22px"</span> align<span class="token operator">=</span><span class="token string">"center"</span>    width<span class="token operator">=</span><span class="token string">"17%"</span><span class="token operator">></span>$<span class="token punctuation">{</span>p<span class="token punctuation">.</span>pname<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"CURSOR: hand; HEIGHT: 22px"</span> align<span class="token operator">=</span><span class="token string">"center"</span>    width<span class="token operator">=</span><span class="token string">"17%"</span><span class="token operator">></span>$<span class="token punctuation">{</span>p<span class="token punctuation">.</span>shop_price<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                <span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"CURSOR: hand; HEIGHT: 22px"</span> align<span class="token operator">=</span><span class="token string">"center"</span>    width<span class="token operator">=</span><span class="token string">"17%"</span><span class="token operator">></span>$<span class="token punctuation">{</span>p<span class="token punctuation">.</span>is_hot<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token string">"是"</span><span class="token operator">:</span><span class="token string">"否"</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                <span class="token operator">&lt;</span>td align<span class="token operator">=</span><span class="token string">"center"</span> style<span class="token operator">=</span><span class="token string">"HEIGHT: 22px"</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>a    href<span class="token operator">=</span><span class="token string">"${ pageContext.request.contextPath }/admin/product/edit.jsp"</span><span class="token operator">></span>                                        <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"${pageContext.request.contextPath}/images/i_edit.gif"</span>    border<span class="token operator">=</span><span class="token string">"0"</span> style<span class="token operator">=</span><span class="token string">"CURSOR: hand"</span><span class="token operator">></span>                                   <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>                                 $  <span class="token punctuation">{</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">}</span>  获取 p对象中 pid <span class="token punctuation">,</span>作为删除参数                                 <span class="token operator">--</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>td align<span class="token operator">=</span><span class="token string">"center"</span> style<span class="token operator">=</span><span class="token string">"HEIGHT: 22px"</span><span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">></span> <span class="token operator">&lt;</span>img                                        src<span class="token operator">=</span><span class="token string">"${pageContext.request.contextPath}/images/i_del.gif"</span>                                        width<span class="token operator">=</span><span class="token string">"16"</span> height<span class="token operator">=</span><span class="token string">"16"</span> border<span class="token operator">=</span><span class="token string">"0"</span> style<span class="token operator">=</span><span class="token string">"CURSOR: hand"</span> onclick<span class="token operator">=</span><span class="token string">"deleteProduct(${p.pid})"</span><span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span>forEach<span class="token operator">></span></code></pre><h2 id="1-2-后台商品删除"><a href="#1-2-后台商品删除" class="headerlink" title="1.2 后台商品删除"></a>1.2 后台商品删除</h2><h3 id="Dao-1"><a href="#Dao-1" class="headerlink" title="Dao"></a>Dao</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*     删除商品 , 通过 pid 删除商品信息     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span>  <span class="token function">deleteProductByPid</span><span class="token punctuation">(</span>String pid<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// sql</span>        String sql <span class="token operator">=</span> <span class="token string">"DELETE FROM product WHERE pid = ? "</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 查询</span>        <span class="token keyword">return</span>  qr<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="Service-1"><a href="#Service-1" class="headerlink" title="Service"></a>Service</h3><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/*    删除商品 , 通过 pid 删除商品信息    */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">deleteProductByPid</span><span class="token punctuation">(</span>String pid<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用 dao 删除方法</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> pdao<span class="token punctuation">.</span><span class="token function">deleteProductByPid</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断删除结果 为1 成功</span>            <span class="token keyword">return</span>  i<span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="Servlet-1"><a href="#Servlet-1" class="headerlink" title="Servlet"></a>Servlet</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/delete"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeleteServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取参数 pid</span>        String pid <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"pid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建 service</span>        ProductService ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用 删除方法</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">deleteProductByPid</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 页面展示-- 查询所有商品 ,否则会无信息显示</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/adminall"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="JSP-1"><a href="#JSP-1" class="headerlink" title="JSP"></a>JSP</h3><pre class=" language-jsp"><code class="language-jsp">            function deleteProduct(pid){                // 弹出确认框                var b = window.confirm("是否真的删除该商品?");                if(b){                   window.location.href = "${pageContext.request.contextPath}/delete?pid="+pid;                }            }</code></pre><h2 id="1-3-后台商品条件查询"><a href="#1-3-后台商品条件查询" class="headerlink" title="1.3 后台商品条件查询"></a>1.3 后台商品条件查询</h2><p>设置条件 : 关键字 / 最低价/ 最高价 / 是否热卖 ,组合条件.</p><ol><li>拼接sql </li><li>设置JavaBean对象 ,封装查询条件.</li></ol><h3 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h3><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/*     条件查询商品 , 通过 查询条件  ,返回符合条件的对象     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Product<span class="token operator">></span>  <span class="token function">queryConditionProduct</span><span class="token punctuation">(</span>QueryCondition qc <span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// sql -- SELECT * FROM product WHERE is_hot = 1 and shop_price > 1000</span>        StringBuilder sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span> <span class="token string">"SELECT * FROM product WHERE 1=1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         根据用户 选择  ,拼接 sql 语句, 选择的条件 需要拼接 , 未选择的条件, 不再拼接         */</span>        String keyword <span class="token operator">=</span> qc<span class="token punctuation">.</span><span class="token function">getKeyword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String min_price <span class="token operator">=</span> qc<span class="token punctuation">.</span><span class="token function">getMin_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String max_price <span class="token operator">=</span> qc<span class="token punctuation">.</span><span class="token function">getMax_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String is_hot <span class="token operator">=</span> qc<span class="token punctuation">.</span><span class="token function">getIs_hot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断 关键字</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>keyword<span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//拼接</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" and pname like '%"</span><span class="token operator">+</span>keyword<span class="token operator">+</span><span class="token string">"%'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断 min_price</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min_price<span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>min_price<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//拼接</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" and shop_price >= "</span> <span class="token operator">+</span> min_price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断 max_price</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>max_price<span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>max_price<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//拼接</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" and shop_price &lt;= "</span> <span class="token operator">+</span> max_price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断 is_hot</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>is_hot<span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>is_hot<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//拼接</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" and is_hot = "</span> <span class="token operator">+</span> is_hot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 查询</span>        List<span class="token operator">&lt;</span>Product<span class="token operator">></span> products <span class="token operator">=</span> qr<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Product<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  products<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h3><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/*        条件查询商品 , 通过 查询条件  ,返回符合条件的对象        */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Product<span class="token operator">></span>  <span class="token function">queryConditionProduct</span><span class="token punctuation">(</span>QueryCondition qc <span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Product<span class="token operator">></span> products <span class="token operator">=</span> pdao<span class="token punctuation">.</span><span class="token function">queryConditionProduct</span><span class="token punctuation">(</span>qc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> products<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="Servlet层"><a href="#Servlet层" class="headerlink" title="Servlet层"></a>Servlet层</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/condition"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 封装 查询对象</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> map <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        QueryCondition qc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 封装后 , qc 已经有值.</span>            BeanUtils<span class="token punctuation">.</span><span class="token function">populate</span><span class="token punctuation">(</span>qc <span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建 Service</span>        ProductService ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用查询方法</span>        List<span class="token operator">&lt;</span>Product<span class="token operator">></span> products <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">queryConditionProduct</span><span class="token punctuation">(</span>qc<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span> <span class="token punctuation">,</span> products<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回结果 ,  显示页面</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/admin/product/list.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="domian-1"><a href="#domian-1" class="headerlink" title="domian"></a>domian</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryCondition</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String  keyWord<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 关键字 , 模糊查询</span>    <span class="token keyword">private</span> String  min_price<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 最低价格</span>    <span class="token keyword">private</span> String  max_price<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 最高价格</span>    <span class="token keyword">private</span> String  is_hot<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 是否热卖</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>   </code></pre><h3 id="JSP-2"><a href="#JSP-2" class="headerlink" title="JSP"></a>JSP</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>form id<span class="token operator">=</span><span class="token string">"Form1"</span> name<span class="token operator">=</span><span class="token string">"Form1"</span> action<span class="token operator">=</span><span class="token string">"${pageContext.request.contextPath}/condition"</span>        method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>tr   style<span class="token operator">=</span><span class="token string">"FONT-WEIGHT: bold; FONT-SIZE: 12pt; HEIGHT: 25px; BACKGROUND-COLOR: #afd1f3"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>td align<span class="token operator">=</span><span class="token string">"center"</span> width<span class="token operator">=</span><span class="token string">"18%"</span><span class="token operator">></span>                关键字 <span class="token operator">:</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"keyword"</span> id<span class="token operator">=</span><span class="token string">"i1"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td align<span class="token operator">=</span><span class="token string">"center"</span> width<span class="token operator">=</span><span class="token string">"18%"</span><span class="token operator">></span>                最低价 <span class="token operator">:</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"min_price"</span> id<span class="token operator">=</span><span class="token string">"i2"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td align<span class="token operator">=</span><span class="token string">"center"</span> width<span class="token operator">=</span><span class="token string">"18%"</span><span class="token operator">></span>                最高价 <span class="token operator">:</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"max_price"</span> id<span class="token operator">=</span><span class="token string">"i3"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td align<span class="token operator">=</span><span class="token string">"center"</span> width<span class="token operator">=</span><span class="token string">"18%"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>select name<span class="token operator">=</span><span class="token string">"is_hot"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>不限<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>                    <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span>是<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>                    <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"0"</span><span class="token operator">></span>否<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td align<span class="token operator">=</span><span class="token string">"center"</span> width<span class="token operator">=</span><span class="token string">"18%"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"条件查询"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span></code></pre><h2 id="前台商品分页查询"><a href="#前台商品分页查询" class="headerlink" title="前台商品分页查询"></a>前台商品分页查询</h2><p>在前台分页显示商品信息 , 每页显示12条 </p><p>分析 :</p><pre class=" language-java"><code class="language-java">LIMIT  关键字 <span class="token punctuation">,</span> 做条目数量限制SELECT <span class="token operator">*</span> FROM product LIMIT <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">;</span># 从第一条开始 <span class="token punctuation">,</span> 查<span class="token number">10</span>条 SELECT <span class="token operator">*</span> FROM product LIMIT <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">;</span> # 从第一条开始 <span class="token punctuation">,</span> 查<span class="token number">5</span>条 SELECT <span class="token operator">*</span> FROM product LIMIT <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">;</span> # 从第六条开始 <span class="token punctuation">,</span> 查<span class="token number">5</span>条 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>#在前台<span class="token punctuation">.</span>每页显示<span class="token number">12</span>条  SELECT <span class="token operator">*</span> FROM product LIMIT <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">;</span>  # 第一页 <span class="token punctuation">,</span> 显示<span class="token number">12</span>条SELECT <span class="token operator">*</span> FROM product LIMIT <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">;</span> # 第二页 <span class="token punctuation">,</span> 显示<span class="token number">12</span>条SELECT <span class="token operator">*</span> FROM product LIMIT <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">;</span> # 第三页 <span class="token punctuation">,</span> 显示<span class="token number">12</span>条SELECT <span class="token operator">*</span> FROM product LIMIT <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">;</span> # 第四页 <span class="token punctuation">,</span> 显示n条SELECT <span class="token operator">*</span> FROM product <span class="token function">LIMIT</span> <span class="token punctuation">(</span>当前页<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">12</span><span class="token punctuation">(</span>每页个数<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">;</span>  总共显示的条数<span class="token comment" spellcheck="true">/*分页 : 商品数量 : totalNum 每页个数 : 12总页数   : Math.ceil( 1.0 * totalNum / 12) 当前页   : 用户页面点击, 传递到dao ,执行sql  查询数据结果 : List&lt;Product>*/</span></code></pre><h3 id="Dao层-1"><a href="#Dao层-1" class="headerlink" title="Dao层"></a>Dao层</h3><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Product<span class="token operator">></span> <span class="token function">queryPage</span><span class="token punctuation">(</span><span class="token keyword">int</span>  pageNum<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 分页查询</span>        <span class="token comment" spellcheck="true">// SELECT * FROM product LIMIT 0, 12;  # 第一页 , 显示12条</span>        <span class="token comment" spellcheck="true">// SELECT * FROM product LIMIT (当前页-1) * 12, 12; # 第四页 , 显示n条</span>        <span class="token comment" spellcheck="true">//</span>        String sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM product LIMIT ?, 12 "</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Product<span class="token operator">></span> query <span class="token operator">=</span> qr<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Product<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>pageNum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> query<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Long <span class="token function">queryTotalNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"SELECT count(*) FROM product"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  Integer 不可以 , 否则报错 ClassCastException .</span>        Long num <span class="token operator">=</span> <span class="token punctuation">(</span>Long<span class="token punctuation">)</span>qr<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ScalarHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> num <span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="domain"><a href="#domain" class="headerlink" title="domain"></a>domain</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageBean</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span>  String  everyNum <span class="token operator">=</span> <span class="token string">"12"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 规定 是 每页 12个 .</span>    <span class="token keyword">private</span>  String currentPage <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 当前页</span>    <span class="token keyword">private</span>  <span class="token keyword">int</span> totalCount<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 商品的总数量 .   47条</span>    <span class="token keyword">private</span>  <span class="token keyword">int</span> totalPage <span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 总页数   通过 totalCount /  everyNum -->向上取整 计算.  47/12 --> 4</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Product<span class="token operator">></span> productList<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h3 id="Service层-1"><a href="#Service层-1" class="headerlink" title="Service层"></a>Service层</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductService</span> <span class="token punctuation">{</span><span class="token keyword">public</span> PageBean <span class="token function">pageQueryProduct</span><span class="token punctuation">(</span>String currentPage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建 PageBean 对象</span>            PageBean pageBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 保存当前页</span>            pageBean<span class="token punctuation">.</span><span class="token function">setCurrentPage</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> totalPage <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 保存商品总数量</span>            Object o <span class="token operator">=</span> productDao<span class="token punctuation">.</span><span class="token function">queryTotalCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 计算 总页数</span>            totalPage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count <span class="token operator">/</span> <span class="token number">12.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pageBean<span class="token punctuation">.</span><span class="token function">setTotalCount</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 保存总页数</span>            pageBean<span class="token punctuation">.</span><span class="token function">setTotalPage</span><span class="token punctuation">(</span>totalPage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 保存 商品信息</span>            List<span class="token operator">&lt;</span>Product<span class="token operator">></span> products <span class="token operator">=</span> productDao<span class="token punctuation">.</span><span class="token function">pageQueryProduct</span><span class="token punctuation">(</span>pageBean<span class="token punctuation">)</span><span class="token punctuation">;</span>            pageBean<span class="token punctuation">.</span><span class="token function">setProductList</span><span class="token punctuation">(</span>products<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> pageBean<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Servlet层-1"><a href="#Servlet层-1" class="headerlink" title="Servlet层"></a>Servlet层</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/page"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 获取 提交参数 -- currentPage</span>        String currentPage <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"currentPage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 创建Service</span>        ProductService productService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 通过service分页查询</span>        PageBean pageBean <span class="token operator">=</span> productService<span class="token punctuation">.</span><span class="token function">pageQueryProduct</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 将结果返回到用户</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"pageBean"</span> <span class="token punctuation">,</span> pageBean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5. 转发页面</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/product_list.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="jsp"><a href="#jsp" class="headerlink" title="jsp"></a>jsp</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>分页 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"width: 380px; margin: 0 auto; margin-top: 50px;"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"pagination"</span> style<span class="token operator">=</span><span class="token string">"text-align: center; margin-top: 10px;"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"${pageBean.currentPage == 1}"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 不能点击 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"disabled"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span> aria<span class="token operator">-</span>label<span class="token operator">=</span><span class="token string">"Previous"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>span aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span><span class="token operator">&amp;</span>laquo<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"${pageBean.currentPage != 1}"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 可以点击 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>li <span class="token operator">></span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"${pageContext.request.contextPath}/page?currentPage=${pageBean.currentPage-1}"</span> aria<span class="token operator">-</span>label<span class="token operator">=</span><span class="token string">"Previous"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>span aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span><span class="token operator">&amp;</span>laquo<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">--</span><span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">--</span><span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>c<span class="token operator">:</span>forEach var<span class="token operator">=</span><span class="token string">"page"</span> begin<span class="token operator">=</span><span class="token string">"1"</span> end<span class="token operator">=</span><span class="token string">"${pageBean.totalPage}"</span> step<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span><span class="token operator">/</span>web13<span class="token operator">/</span>page<span class="token operator">?</span>currentPage<span class="token operator">=</span><span class="token number">4</span><span class="token operator">--</span><span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"${page==pageBean.currentPage}"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"${pageContext.request.contextPath}/page?currentPage=${page}"</span><span class="token operator">></span>$<span class="token punctuation">{</span>page<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">></span>            <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"${page!=pageBean.currentPage}"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span>                    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"${pageContext.request.contextPath}/page?currentPage=${page}"</span><span class="token operator">></span>$<span class="token punctuation">{</span>page<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span>forEach<span class="token operator">></span>        <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"${pageBean.currentPage == pageBean.totalPage}"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"disabled"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span> aria<span class="token operator">-</span>label<span class="token operator">=</span><span class="token string">"Next"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>span aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span><span class="token operator">&amp;</span>raquo<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"${pageBean.currentPage != pageBean.totalPage}"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"${pageContext.request.contextPath}/page?currentPage=${pageBean.currentPage+1}"</span> aria<span class="token operator">-</span>label<span class="token operator">=</span><span class="token string">"Next"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>span aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span><span class="token operator">&amp;</span>raquo<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 分页结束 <span class="token operator">--</span><span class="token operator">></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day41Filter-Listener-BaseServlet</title>
      <link href="/2020/04/12/day41filter-listener-baseservlet/"/>
      <url>/2020/04/12/day41filter-listener-baseservlet/</url>
      
        <content type="html"><![CDATA[<h1 id="day41Filter-amp-Listener-amp-BaseServlet"><a href="#day41Filter-amp-Listener-amp-BaseServlet" class="headerlink" title="day41Filter &amp; Listener &amp; BaseServlet"></a>day41Filter &amp; Listener &amp; BaseServlet</h1><h2 id="1-1-过滤器Filter"><a href="#1-1-过滤器Filter" class="headerlink" title="1.1 过滤器Filter"></a>1.1 过滤器Filter</h2><h3 id="1-1-1-Filter简介"><a href="#1-1-1-Filter简介" class="headerlink" title="1.1.1 Filter简介"></a>1.1.1 Filter简介</h3><p>filter是对客户端访问资源的过滤，符合条件放行，不符合条件不放行</p><p><img src="/2020/04/12/day41filter-listener-baseservlet/1.png" alt></p><h3 id="1-1-2-快速入门"><a href="#1-1-2-快速入门" class="headerlink" title="1.1.2 快速入门"></a>1.1.2 快速入门</h3><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol><li>编写一个过滤器的类实现Filter接口</li><li>实现接口中尚未实现的方法(着重实现doFilter方法)</li><li>在web.xml中（注解）进行配置(主要是配置要对哪些资源进行过滤)</li><li>在doFilter方法中书写过滤任务</li><li>FilterChain.doFilter方法放行</li></ol><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>过滤器doFilter方法默认拦截请求，如果需要经过过滤器之后，可以继续访问资源，要使用filterChain放行。</p><p>代码实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//  初始化方法.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyFilter.init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyFilter.doFilter  进入过滤器 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 放行 .</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 销毁方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyFilter.destroy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>filter<span class="token operator">></span>    <span class="token operator">&lt;</span>filter‐name<span class="token operator">></span>MyFilter1<span class="token operator">&lt;</span><span class="token operator">/</span>filter‐name<span class="token operator">></span>    <span class="token operator">&lt;</span>filter‐<span class="token keyword">class</span><span class="token operator">></span>com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>MyFilter1<span class="token operator">&lt;</span><span class="token operator">/</span>filter‐<span class="token keyword">class</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">></span><span class="token operator">&lt;</span>filter‐mapping<span class="token operator">></span>    <span class="token operator">&lt;</span>filter‐name<span class="token operator">></span>MyFilter1<span class="token operator">&lt;</span><span class="token operator">/</span>filter‐name<span class="token operator">></span>    <span class="token operator">&lt;</span>url‐pattern<span class="token operator">></span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">&lt;</span><span class="token operator">/</span>url‐pattern<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>filter‐mapping<span class="token operator">></span></code></pre><h4 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/*"</span><span class="token punctuation">)</span></code></pre><h3 id="1-1-3-过滤器的执行流程"><a href="#1-1-3-过滤器的执行流程" class="headerlink" title="1.1.3 过滤器的执行流程"></a>1.1.3 过滤器的执行流程</h3><h4 id="图解过滤器的执行流程"><a href="#图解过滤器的执行流程" class="headerlink" title="图解过滤器的执行流程"></a>图解过滤器的执行流程</h4><p><img src="/2020/04/12/day41filter-listener-baseservlet/2.png" alt></p><h3 id="1-1-4-Filter的API详解"><a href="#1-1-4-Filter的API详解" class="headerlink" title="1.1.4 Filter的API详解"></a>1.1.4 Filter的API详解</h3><h4 id="filter生命周期及其与生命周期相关的方法"><a href="#filter生命周期及其与生命周期相关的方法" class="headerlink" title="filter生命周期及其与生命周期相关的方法"></a>filter生命周期及其与生命周期相关的方法</h4><p>Filter接口有三个方法，并且这个三个都是与Filter的生命相关的方法</p><ol><li><p>init(Filterconfig) ：代表filter对象初始化方法 filter对象创建时执行</p></li><li><p>doFilter(ServletRequest,ServletResponse,FilterCha) ：代表filter执行过滤的<br>核心方法，如果某资源在已经被配置到这个filter进行过滤的话，那么每次访问这个资源都会执行</p></li><li><p>destory() ：代表是filter销毁方法 当filter对象销毁时执行该方法</p></li></ol><p>Filter对象的生命周期:</p><ol><li>Filter何时创建：服务器启动时就创建该filter对象</li><li>Filter何时执行过滤：每当一个请求的路径是满足过滤器的配置路径，那么就会执行一次过滤器的doFilter方法</li><li>Filter何时销毁：服务器关闭时filter销毁</li></ol><h4 id="Filter的API详解"><a href="#Filter的API详解" class="headerlink" title="Filter的API详解"></a>Filter的API详解</h4><ol><li><p>init(FilterConfig) :Filter对象创建候，立即执行init方法参数：FilterConfig是Filter的配置对象，该对象可以获得ServletContext对象</p></li><li><p>destory() :filter对象销毁前执行destory方法</p></li><li><p>doFilter(ServletRequest,ServletResponse,FilterChain) :filter执行过滤的核心方法，如果某资源在已经被配置到这个filter进行过滤的话，那么每次访问这个资源都会执行doFilter方法</p></li></ol><p>参数：</p><ul><li><p>ServletRequest / ServletResponse：每次在执行doFilter方法时 web容器负责创建一个request和一个response对象作为doFilter的参数传递进来。该request与该response就是在访问目标资源的service方法时的request和response。</p></li><li><p>FilterChain：过滤器链对象，通过该对象的doFilter方法可以放行该请求</p></li></ul><p><img src="/2020/04/12/day41filter-listener-baseservlet/3.png" alt></p><h3 id="1-1-5-Filter配置"><a href="#1-1-5-Filter配置" class="headerlink" title="1.1.5 Filter配置"></a>1.1.5 Filter配置</h3><h4 id="映射路径"><a href="#映射路径" class="headerlink" title="映射路径"></a>映射路径</h4><p>xml方式配置：</p><p>注解配置：</p><p>前面已经介绍过了</p><p>不管是注解配置还是xml配置，配置虚拟路径的语法都是一致的，如下：</p><ol><li><p>完全匹配</p><p> 语法：/sertvle1</p><p> 只有访问的地址是servlet1时，才执行该过滤器</p></li><li><p>目录匹配</p><p> 语法：/aaa/bbb/* ，经常使用</p><p> 当访问的目标资源 的地址是/aaa/bbb/任何资源 都执行该过滤器</p></li><li><p>扩展名匹配</p><p> 语法：*.abc  *.jsp</p><p> 当访问的目标资源的扩展名是 abc、jsp时 才执行该过滤器</p></li></ol><h4 id="拦截方式"><a href="#拦截方式" class="headerlink" title="拦截方式"></a>拦截方式</h4><p>有了上面学习的映射路径，我们可以控制过滤器过滤指定的内容，但是我们在访问资源的时候，并不是每次都是之间访问，有时是以转发的方式访问的，这就需要我们要让过滤器可以区分不同的访问资源的方式，有不同的拦截方式。</p><p>dispatcher：访问的方式</p><ul><li><p>REQUEST：默认值，代表直接访问某个资源时执行filter</p></li><li><p>FORWARD：转发时才执行filter</p></li></ul><h3 id="1-1-6-过滤器链"><a href="#1-1-6-过滤器链" class="headerlink" title="1.1.6 过滤器链"></a>1.1.6 过滤器链</h3><h4 id="什么是过滤器链"><a href="#什么是过滤器链" class="headerlink" title="什么是过滤器链"></a>什么是过滤器链</h4><p>我们java代码中，有时需要对同一个请求，进行多次不同业务的过滤，所以我们java代码中需要多个过滤器。只有所有的过滤器都对请求进行了放行，请求才能访问到目标资源，只要多个过滤器中只有一个过滤器不放行请求，那么这个请求都不能够访问到目标资源。多个过滤器组成的一个整体我们称为过滤器链。而且，过滤器链中的过滤器是一个一个的执行的，一个过滤器执行完毕之后，会执行下一个过滤器，后面没有过滤器了，才会访问到目标资源。只要其中一个过滤器没有放行，那么这个过滤器后面的过滤器也都不会执行了</p><p>提示：</p><ol><li><p>web.xml配置的Filter的执行顺序取决于filter-mapping的顺序</p></li><li><p>注解配置的filter的执行顺序取决于filter的类名称的字母排序</p></li></ol><h3 id="1-1-7-过滤器的应用场景"><a href="#1-1-7-过滤器的应用场景" class="headerlink" title="1.1.7 过滤器的应用场景"></a>1.1.7 过滤器的应用场景</h3><ol><li><p>处理全站中文乱码</p></li><li><p>登录权限检查</p></li></ol><h2 id="1-2-监听器Listener"><a href="#1-2-监听器Listener" class="headerlink" title="1.2 监听器Listener"></a>1.2 监听器Listener</h2><h3 id="1-2-1-什么是监听器"><a href="#1-2-1-什么是监听器" class="headerlink" title="1.2.1 什么是监听器"></a>1.2.1 什么是监听器</h3><p>监听器就是监听某个对象的的状态变化的组件 监听器的相关概念： </p><p>事件源：被监听的对象 —- 主要三个域对象request session servletContext </p><p>监听器：监听事件源对象 事件源对象的状态的变化都会触发监听器 </p><p>响应行为：监听器监听到事件源的状态变化时 所涉及的功能代码 —- 程序员编写代码</p><h3 id="1-2-2-监听器有哪些"><a href="#1-2-2-监听器有哪些" class="headerlink" title="1.2.2 监听器有哪些"></a>1.2.2 监听器有哪些</h3><ol><li><p>第一维度：按照被监听的对象划分：ServletRequest域 HttpSession ServletContext域 </p></li><li><p>第二维度：安装监听的内容分：监听域对象的创建与销毁的监听域对象的属性变化的</p></li></ol><p>对应的接口：</p><p><img src="/2020/04/12/day41filter-listener-baseservlet/4.png" alt></p><p>代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span><span class="token punctuation">,</span>  HttpSessionListener<span class="token punctuation">,</span> ServletRequestAttributeListener <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Public constructor is required by servlet spec</span>    <span class="token keyword">public</span> <span class="token function">MyListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// -------------------------------------------------------</span>    <span class="token comment" spellcheck="true">// ServletContextListener implementation</span>    <span class="token comment" spellcheck="true">// -------------------------------------------------------</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/*          此方法 ,在 ServletContext对象 ,初始化时调用执行.      */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyListener.contextInitialized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"项目启动了,初始化信息..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* 此方法 ,在 ServletContext对象 ,销毁时调用执行.       */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyListener.contextDestroyed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"项目关闭, 回收资源."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// -------------------------------------------------------</span>    <span class="token comment" spellcheck="true">// HttpSessionListener implementation</span>    <span class="token comment" spellcheck="true">// -------------------------------------------------------</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionCreated</span><span class="token punctuation">(</span>HttpSessionEvent se<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyListener.sessionCreated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"来客了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionDestroyed</span><span class="token punctuation">(</span>HttpSessionEvent se<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyListener.sessionDestroyed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客走了,再来呀... 时间延迟..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeAdded</span><span class="token punctuation">(</span>ServletRequestAttributeEvent servletRequestAttributeEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeRemoved</span><span class="token punctuation">(</span>ServletRequestAttributeEvent servletRequestAttributeEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeReplaced</span><span class="token punctuation">(</span>ServletRequestAttributeEvent servletRequestAttributeEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-3-BaseServlet"><a href="#1-3-BaseServlet" class="headerlink" title="1.3 BaseServlet"></a>1.3 BaseServlet</h2><h3 id="1-3-1-什么是BaseServlet"><a href="#1-3-1-什么是BaseServlet" class="headerlink" title="1.3.1 什么是BaseServlet"></a>1.3.1 什么是BaseServlet</h3><p>为了解决Servlet类太多的问题</p><h3 id="1-3-2-BaseServlet的优化"><a href="#1-3-2-BaseServlet的优化" class="headerlink" title="1.3.2 BaseServlet的优化"></a>1.3.2 BaseServlet的优化</h3><h4 id="优化1"><a href="#优化1" class="headerlink" title="优化1"></a>优化1</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// localhost:8080/web14/user?method=pay&amp;name=tom&amp;money=100  --> pay方法</span>    <span class="token comment" spellcheck="true">// localhost:8080/web14/user?method=updatePwd&amp;pwd=12345</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 通过访问时, 客户端提供的参数, 分别调用不同的方法</span>        String method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"pay"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用pay方法</span>            <span class="token function">pay</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"updatePwd"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用 updatePwd</span>            <span class="token function">updatePwd</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span>HttpServletRequest req <span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"支付 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updatePwd</span><span class="token punctuation">(</span>HttpServletRequest req <span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"改密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="优化2"><a href="#优化2" class="headerlink" title="优化2"></a>优化2</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/user2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 通过访问时, 客户端提供的参数, 分别调用不同的方法</span>        String methodName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 反射技术 ,替代 判断的写法 .</span>        <span class="token comment" spellcheck="true">// 1. 获取本类的类对象</span>        Class  <span class="token class-name">clz</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 解析 Method</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//  暴力获取方法  , 非Public权限的方法 , 都必须这样才能获取到.</span>            Method method <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> HttpServletRequest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> HttpServletResponse<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 3. 执行此方法</span>            method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置访问权限.</span>            method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span>request <span class="token punctuation">,</span> response <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span>HttpServletRequest req <span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"支付 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updatePwd</span><span class="token punctuation">(</span>HttpServletRequest req <span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"改密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="优化3"><a href="#优化3" class="headerlink" title="优化3"></a>优化3</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseServlet</span>  <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过访问时, 客户端提供的参数, 分别调用不同的方法</span>        String methodName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 反射技术 ,替代 判断的写法 .</span>        <span class="token comment" spellcheck="true">// 1. 获取本类的类对象</span>        Class  <span class="token class-name">clz</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 解析 Method</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//  暴力获取方法  , 非Public权限的方法 , 都必须这样才能获取到.</span>            Method method <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> HttpServletRequest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> HttpServletResponse<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 3. 执行此方法</span>            method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置访问权限.</span>            method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span>request <span class="token punctuation">,</span> response <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/user3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet3</span> <span class="token keyword">extends</span> <span class="token class-name">BaseServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span>HttpServletRequest req <span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"支付 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updatePwd</span><span class="token punctuation">(</span>HttpServletRequest req <span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"改密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优化图解<br><img src="/2020/04/12/day41filter-listener-baseservlet/5.jpg" alt></p><p>优化思路：抽象，反射，继承</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day40el-jstl</title>
      <link href="/2020/04/06/day40el-jstl/"/>
      <url>/2020/04/06/day40el-jstl/</url>
      
        <content type="html"><![CDATA[<h1 id="day40el-jstl"><a href="#day40el-jstl" class="headerlink" title="day40el-jstl"></a>day40el-jstl</h1><h2 id="1-1-EL表达式"><a href="#1-1-EL表达式" class="headerlink" title="1.1 EL表达式"></a>1.1 EL表达式</h2><h3 id="1-1-1-EL表达式的基本概述"><a href="#1-1-1-EL表达式的基本概述" class="headerlink" title="1.1.1 EL表达式的基本概述"></a>1.1.1 EL表达式的基本概述</h3><p>EL（Express Lanuage）表达式可以嵌入在jsp页面内部，减少jsp脚本的编写，EL 出现的目的是要替代jsp页面中输出脚本的编写。</p><h3 id="1-1-2-EL表达式的格式和作用"><a href="#1-1-2-EL表达式的格式和作用" class="headerlink" title="1.1.2 EL表达式的格式和作用"></a>1.1.2 EL表达式的格式和作用</h3><p>EL表达式的格式：${EL表达式内容}</p><p>EL表达式的作用：</p><ol><li>从域对象中查找指定的数据。</li><li>内置对象使用</li><li>执行运算符</li></ol><h3 id="1-1-3-EL表达式的基本使用"><a href="#1-1-3-EL表达式的基本使用" class="headerlink" title="1.1.3 EL表达式的基本使用"></a>1.1.3 EL表达式的基本使用</h3><h4 id="EL表达式作用一：从域中取出数据"><a href="#EL表达式作用一：从域中取出数据" class="headerlink" title="EL表达式作用一：从域中取出数据"></a>EL表达式作用一：从域中取出数据</h4><ol><li>EL获得request域中的值：${requestScope.key};</li><li>EL获得session域中的值：${sessionScope.key};</li><li>EL获得application域中的值：${applicatioScope.key};</li><li>EL从四个域中获得某个值${key};</li></ol><p>同样是依次从pageContext域，request域，session域，application域中 获取属性，在某个域中获取后将不在向后寻找(从最小的找起)</p><ol><li><p>EL获得普通数据</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span> <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 域对象获取值  <span class="token operator">--</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">%=</span>application<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"sc_key"</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">%=</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"ss_key"</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">%=</span>request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"req_key"</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  el 的取值方式 <span class="token operator">--</span><span class="token operator">></span> $<span class="token punctuation">{</span>applicationScope<span class="token punctuation">.</span>sc_key<span class="token punctuation">}</span> $<span class="token punctuation">{</span>sessionScope<span class="token punctuation">.</span>ss_key<span class="token punctuation">}</span> $<span class="token punctuation">{</span>requestScope<span class="token punctuation">.</span>req_key<span class="token punctuation">}</span> <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  el 的简化方式 <span class="token punctuation">,</span>只写key <span class="token punctuation">,</span>没有对象 <span class="token operator">--</span><span class="token operator">></span> $<span class="token punctuation">{</span>sc_key<span class="token punctuation">}</span> $<span class="token punctuation">{</span>ss_key<span class="token punctuation">}</span> $<span class="token punctuation">{</span>req_key<span class="token punctuation">}</span> <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre></li><li><p>EL获得javaBean对象的值</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF‐8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span> <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">%</span>‐‐ 存储User实体数据 ‐‐<span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">%</span>     User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>取出User的数据<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span> $<span class="token punctuation">{</span>user<span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token operator">==</span>$<span class="token punctuation">{</span>user<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre></li><li><p>EL获得List<String>的值<br>```java<br>&lt;%@ page contentType=”text/html;charset=UTF‐8” language=”java” %&gt;</String></p><html><head> <title>Title</title>北京市昌平区建材城西路金燕龙办公楼一层 电话：400-618-9090</head></html></li><li><p>EL获得List<User>的值</User></p></li><li><p>EL获得Map&lt;String,User&gt;的值</p><meta name="generator" content="Hexo 4.2.0"><link rel="alternate" href="/atom.xml" title="fantasyblog" type="application/atom+xml"><link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"><body> <%‐‐ 存储list<string>数据 ‐‐%> <% list<string> strList = new ArrayList<>();     strList.add("aaa");     strList.add("bbb");     strList.add("ccc");     request.setAttribute("strList",strList); %> <h1>取出strList的数据</h1> ${strList[0]}==${strList[1]}</%></%‐‐></body>```</li><li><p>EL获得List<User>的值</User></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF‐8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span> <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">%</span>‐‐ 存储List<span class="token operator">&lt;</span>User<span class="token operator">></span>数据 ‐‐<span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">%</span>     List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"lucy"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>     userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>     request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"userList"</span><span class="token punctuation">,</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>取出userList的数据<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>$<span class="token punctuation">{</span>userList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token operator">==</span>$<span class="token punctuation">{</span>userList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>    $<span class="token punctuation">{</span>userList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token operator">==</span>$<span class="token punctuation">{</span>userList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre></li><li><p>EL获得Map&lt;String,User&gt;的值</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF‐8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span> <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">%</span>‐‐ 存储Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>User<span class="token operator">></span> ‐‐<span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">%</span>     Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>User<span class="token operator">></span> userMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     userMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>     userMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">,</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>     request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"userMap"</span><span class="token punctuation">,</span>userMap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>     <span class="token operator">&lt;</span>h1<span class="token operator">></span>取出userMap的数据<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>     $<span class="token punctuation">{</span>userMap<span class="token punctuation">.</span>user1<span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token operator">==</span>$<span class="token punctuation">{</span>userMap<span class="token punctuation">.</span>user1<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>     $<span class="token punctuation">{</span>userMap<span class="token punctuation">.</span>user2<span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token operator">==</span>$<span class="token punctuation">{</span>userMap<span class="token punctuation">.</span>user2<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>     $<span class="token punctuation">{</span>userMap<span class="token punctuation">[</span><span class="token string">'user1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token operator">==</span>$<span class="token punctuation">{</span>userMap<span class="token punctuation">[</span><span class="token string">'user1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>     $<span class="token punctuation">{</span>userMap<span class="token punctuation">[</span><span class="token string">'user2'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token operator">==</span>$<span class="token punctuation">{</span>userMap<span class="token punctuation">[</span><span class="token string">'user2'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre></li></ol><h3 id="1-1-4-EL的内置对象"><a href="#1-1-4-EL的内置对象" class="headerlink" title="1.1.4 EL的内置对象"></a>1.1.4 EL的内置对象</h3><p>获取JSP中域中的数据（pageScope,requestScope,sessionScope,applicationScope）</p><p>pageContext - WEB开发中的pageContext.</p><p>在Servlet中获得web应用的名称：request.getContextPath();</p><p>在jsp页面上获得web应用的名称：${pageContext.request.contextPath}</p><h3 id="1-1-5-EL执行运算符"><a href="#1-1-5-EL执行运算符" class="headerlink" title="1.1.5 EL执行运算符"></a>1.1.5 EL执行运算符</h3><ol><li>算数运算符 + - * / %</li><li>逻辑运算符 &amp;&amp; || ！</li><li>比较运算符 &gt; &lt; &gt;= &lt;=</li><li>Null运算符 empty (指向null和size=0都是null)</li><li>三元运算符 ? :</li></ol><h2 id="1-2-JSTL"><a href="#1-2-JSTL" class="headerlink" title="1.2 JSTL"></a>1.2 JSTL</h2><h3 id="1-2-1-jstl标签的基本概述"><a href="#1-2-1-jstl标签的基本概述" class="headerlink" title="1.2.1 jstl标签的基本概述"></a>1.2.1 jstl标签的基本概述</h3><p>JSTL（JSP Standard Tag Library)，JSP标准标签库，可以嵌入在jsp页面中使用标签的形式完成业务逻辑等功能。jstl出现的目的同el一样也是要提到jsp页面中的脚本代码。JSTL标准标准标签库有5个子库，但随着发展，目前常使用的是他的核心库</p><h3 id="1-2-2-jstl标签的安装"><a href="#1-2-2-jstl标签的安装" class="headerlink" title="1.2.2 jstl标签的安装"></a>1.2.2 jstl标签的安装</h3><ol><li><p>导入jar包</p><p> javax.servlet.jsp.jstl.jar</p><p> jstl‐impl.jar</p></li><li><p>使用taglib指令在jsp页面导入要使用的jstl标签库</p><p>&lt;%@ taglib prefix=”c” uri=”<a href="http://java.sun.com/jsp/jstl/core&quot;" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/core&quot;</a> %&gt;</p></li></ol><h3 id="1-2-3-常用的jstl标签"><a href="#1-2-3-常用的jstl标签" class="headerlink" title="1.2.3 常用的jstl标签"></a>1.2.3 常用的jstl标签</h3><h4 id="lt-c-if-gt-标签"><a href="#lt-c-if-gt-标签" class="headerlink" title="&lt;c:if&gt;标签"></a>&lt;c:if&gt;标签</h4><p>if标签作用：</p><p>起到java代码的判断的作用</p><p>if标签属性介绍：</p><ol><li><p>test：判断是否执行标签内的内容（true——执行标签中的内容，false，不执行）。</p></li><li><p>var：用来保存test属性的结果（使用var属性给他取个名字），这个结果可以保存到指定的容器中。</p></li><li><p>scope：指定保存数据的容器。</p></li></ol><p>if标签演示：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF‐8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ taglib prefix<span class="token operator">=</span><span class="token string">"c"</span> uri<span class="token operator">=</span><span class="token string">"http://java.sun.com/jsp/jstl/core"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"${num>5}"</span><span class="token operator">></span>        num大于<span class="token number">5</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">></span>    <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"${num&lt;=5}"</span><span class="token operator">></span>        num小于等于<span class="token number">5</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span>‐‐将<span class="token keyword">if</span>判断的结果存储到指定的域中‐‐<span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"${num==100}"</span> var<span class="token operator">=</span><span class="token string">"res"</span> scope<span class="token operator">=</span><span class="token string">"request"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>取出结果<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    $<span class="token punctuation">{</span>res<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h4 id="forEach标签"><a href="#forEach标签" class="headerlink" title="forEach标签"></a>forEach标签</h4><p>forEach标签作用：</p><p>起到java代码的for循环作用</p><p>forEach标签属性介绍：</p><ol><li>var：在不循环对象的时候，保存的是控制循环的变量；在循环对象的时候，保存的是被循环对象中的元素</li><li>items：指定要循环的对象</li><li>varStatus：保存了当前循环过程中的信息（循环的开始、结束、步长、次数等）</li><li>begin：设置循环的开始<br>end：设置循环的结束</li><li>step：设置步长——间隔几次循环，执行一次循环体中的内容</li></ol><p>foreach演示：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF‐8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ taglib prefix<span class="token operator">=</span><span class="token string">"c"</span> uri<span class="token operator">=</span><span class="token string">"http://java.sun.com/jsp/jstl/core"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>模拟增强<span class="token keyword">for</span>循环<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>c<span class="token operator">:</span>forEach items<span class="token operator">=</span><span class="token string">"${userList}"</span> var<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>        $<span class="token punctuation">{</span>user<span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token operator">==</span>$<span class="token punctuation">{</span>user<span class="token punctuation">.</span>age<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span>forEach<span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>模拟普通<span class="token keyword">for</span>循环<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>c<span class="token operator">:</span>forEach begin<span class="token operator">=</span><span class="token string">"0"</span> end<span class="token operator">=</span><span class="token string">"${num}"</span> var<span class="token operator">=</span><span class="token string">"i"</span> step<span class="token operator">=</span><span class="token string">"10"</span><span class="token operator">></span>        $<span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span>forEach<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>与java比较图解：<br><img src="/2020/04/06/day40el-jstl/1.jpg" alt></p><h3 id="1-3-三层架构和MVC模式"><a href="#1-3-三层架构和MVC模式" class="headerlink" title="1.3 三层架构和MVC模式"></a>1.3 三层架构和MVC模式</h3><h3 id="1-3-1-JSP开发模式"><a href="#1-3-1-JSP开发模式" class="headerlink" title="1.3.1 JSP开发模式"></a>1.3.1 JSP开发模式</h3><p>当SUN公司推出JSP后，同时也提供相应的开发模式，JavaWeb经历了JSP Model1 第一代，JSPModel2第二代，JSPModel 3 三个时期。</p><h4 id="JSP-Model1-第一代"><a href="#JSP-Model1-第一代" class="headerlink" title="JSP Model1 第一代"></a>JSP Model1 第一代</h4><p>JSP Model1是JavaWeb早期的模型，它适合小型Web项目，开发成本低！Model1第一代时期，服务器端只有JSP页面，所有的操作都在JSP页面中，连访问数据库的API也在JSP页面中完成。也就是说，所有的东西都在一起，对后期的维护和扩展极为不利。</p><p><img src="/2020/04/06/day40el-jstl/2.png" alt></p><h4 id="JSP-Model2-第二代"><a href="#JSP-Model2-第二代" class="headerlink" title="JSP Model2 第二代"></a>JSP Model2 第二代</h4><p>JSP Model1第二代有所改进，把业务逻辑的内容放到了JavaBean中，而JSP页面负责显示以及请求调度的工作。虽然第二代比第一代好了些，但还让JSP做了过多的工作，JSP中把视图工作和请求调度（控制器）的工作耦合在一起了。</p><p>JSP Model 2 Model2使用到的技术有：Servlet、JSP、JavaBean。Model2 是MVC设计模式在Java语言的具体体现。</p><ul><li>JSP：视图层，用来与用户打交道。负责接收用来的数据，以及显示数据给用户；</li><li>ervlet：控制层，负责找到合适的模型对象来处理业务逻辑，转发到合适的视图；</li><li>JavaBean：模型层，完成具体的业务工作，例如：转账等。</li></ul><p><img src="/2020/04/06/day40el-jstl/3.png" alt></p><h4 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h4><p>SP模式是理论基础，但实际开发中，我们常将服务器端程序，根据逻辑进行分层。一般比较常见的是分三层，我们称为：经典三层体系架构。三层分别是：表示层、业务逻辑层、数据访问层。</p><ul><li>表示层：又称为 web层，与浏览器进行数据交互的。</li><li>业务逻辑层：又称为service层，专门用于处理业务数据的。</li><li>数据访问层：又称为dao层，与数据库进行数据交换的。将数据库的一条记录与JavaBean进行对应。</li></ul><p><img src="/2020/04/06/day40el-jstl/4.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day39Cookie-Session</title>
      <link href="/2020/04/05/day39cookie-session/"/>
      <url>/2020/04/05/day39cookie-session/</url>
      
        <content type="html"><![CDATA[<h1 id="day39Cookie-Session"><a href="#day39Cookie-Session" class="headerlink" title="day39Cookie-Session"></a>day39Cookie-Session</h1><h2 id="1-1-Cookie"><a href="#1-1-Cookie" class="headerlink" title="1.1 Cookie"></a>1.1 Cookie</h2><h3 id="1-1-1-什么是cookie"><a href="#1-1-1-什么是cookie" class="headerlink" title="1.1.1 什么是cookie"></a>1.1.1 什么是cookie</h3><p>Cookie 是在 HTTP 协议下，服务器或脚本可以维护客户工作站上信息的一种方式。Cookie 是由 Web 服务器保存在用户浏览器（客户端）上的小文本文件，它可以包含有关用户的信息。无论何时用户链接到服务器，Web 站点都可以访问 Cookie 信息 。</p><p>Cookie技术是将用户的数据由服务端存储到客户端的技术，我们分为两方面学习： 第一，服务器端怎样将一个Cookie发送到客户端 . 第二，服务器端怎样接受客户端携带的Cookie </p><h3 id="1-1-2-Cookie的应用场景"><a href="#1-1-2-Cookie的应用场景" class="headerlink" title="1.1.2 Cookie的应用场景"></a>1.1.2 Cookie的应用场景</h3><ol><li><p>记住用户名</p></li><li><p>自动登录（记住用户名和密码）</p></li></ol><h3 id="1-1-3-Cookie的基本使用"><a href="#1-1-3-Cookie的基本使用" class="headerlink" title="1.1.3 Cookie的基本使用"></a>1.1.3 Cookie的基本使用</h3><h4 id="cookie常用的方法介绍"><a href="#cookie常用的方法介绍" class="headerlink" title="cookie常用的方法介绍"></a>cookie常用的方法介绍</h4><p>Cookie(String name, String value) 创建cookie对象</p><ol><li><p>String getName()  获取cookie的名称</p></li><li><p>String getValue()  获取cookie的值</p></li><li><p>void setPath(String uri)  设置cookie的路径——浏览器根据这个路径判断哪些cookie要发送给服务器</p></li></ol><p>HttpServletResponse</p><ol><li>void addCookie(Cookie cookie)  将cookie发送给浏览器</li></ol><p>HttpServletRequest</p><ol><li>Cookie[] getCookies()  获取浏览器发送的cookie</li></ol><p>cookie技术原理分析：<br><img src="/2020/04/05/day39cookie-session/1.png" alt></p><p>删除cookie</p><p>void setMaxAge(int expiry)  设置cookie的最大生存时间（单位：秒）</p><p>void setPath(String uri)  设置cookie的路径——浏览器根据这个路径判断那些cookie要发送给服务器</p><p>删除cookie步骤 :</p><ol><li>设置生存时间为 0</li><li>后一个用来覆盖cookie必须名称与路径与原来的cookie一致</li></ol><h2 id="1-2-Session"><a href="#1-2-Session" class="headerlink" title="1.2 Session"></a>1.2 Session</h2><h3 id="1-2-1-基本概念"><a href="#1-2-1-基本概念" class="headerlink" title="1.2.1 基本概念"></a>1.2.1 基本概念</h3><p>当人们去医院就诊时，就诊病人需要办理医院的就诊卡，该卡上只有卡号，而没有其它信息。但病人每次去该医院就诊时，只要出示就诊卡，医务人员便可根据卡号查询到病人的就诊信息。Session技术就好比医院发放给病人的就医卡和医院为每个病人保留病例档案的过程。当浏览器访问Web服务器时，Servlet容器就会创建一个Session对象和ID属性，其中，Session对象就相当于病历档案，ID就相当于就诊卡号。当客户端后续访问服务器时，只要将标识号传递给服务器，服务器就能判断出该请求是哪个客户端发送的，从而选择与之对应的Session对象为其服务。</p><p>需要注意的是，由于客户端需要接收、记录和回送Session对象的ID，因此，通常情况下，Session是借助Cookie技术来传递ID属性的。那么哪些数据存在session中呢 ?</p><ul><li>使用servlet生成验证码时，我们需要在服务器记录一份生成的随机字符，当用户提交填写的数据时，将用户输入的数据和服务器缓存的数据进行比对。</li></ul><h3 id="1-2-2-应用场景"><a href="#1-2-2-应用场景" class="headerlink" title="1.2.2 应用场景"></a>1.2.2 应用场景</h3><ol><li>保存购物车数据</li><li>保存用户浏览器记录数据</li><li>保存用户登录信息数据</li><li>保存验证码</li></ol><h3 id="1-2-3-基本使用"><a href="#1-2-3-基本使用" class="headerlink" title="1.2.3 基本使用"></a>1.2.3 基本使用</h3><h4 id="存储数据与获取数据"><a href="#存储数据与获取数据" class="headerlink" title="存储数据与获取数据"></a>存储数据与获取数据</h4><p>HttpServletRequest</p><ol><li>HttpSession getSession()  获取session对象</li></ol><p>HttpSession</p><ol><li>void setAttribute(String name, Object value) 在session中保存数据</li><li>Object getAttribute(String name)  从session中获取数据</li><li>void removeAttribute(String name)  从session中移除数据</li></ol><p>注意：</p><p>getAttribute方法返回值是Object，因此需要将返回值强制转换才能方便使用。</p><p>原理分析<br><img src="/2020/04/05/day39cookie-session/2.png" alt></p><h3 id="1-2-4-session的持久化"><a href="#1-2-4-session的持久化" class="headerlink" title="1.2.4 session的持久化"></a>1.2.4 session的持久化</h3><p>通过上面的原理图，我们发现记录sessionid的cookie在关闭浏览器之后就到期了，那么如果我们希望——关闭浏览器继续可以访问session数据，该怎么做呢？</p><p>实现步骤：</p><ol><li>创建一个servlet</li><li>通过request对象获取session的id</li><li>自定义一个cookie对象，保存session的id，注意cookie名称为”JSESSIONID”，设置一个比较长的生存时间</li><li>发送给浏览器</li></ol><h3 id="1-2-5-session生命周期"><a href="#1-2-5-session生命周期" class="headerlink" title="1.2.5 session生命周期"></a>1.2.5 session生命周期</h3><p>session对象什么时候创建</p><ul><li>当调用request.getSession()方法时 .请求没有携带jsessionid或者携带的不匹配 , 就会创建.</li></ul><p>session对象什么时候销毁</p><ul><li><p>默认30分钟销毁, tomcat全局配置文件web.xml , 从最后一次访问时间计时.</p></li><li><p>手动销毁 : 调用方法session.invalidate();</p></li><li><p>关闭服务器 , 不考虑钝化的情况.</p></li></ul><h3 id="1-2-6-三大域对象对比"><a href="#1-2-6-三大域对象对比" class="headerlink" title="1.2.6 三大域对象对比"></a>1.2.6 三大域对象对比</h3><p>三个域对象的生命周期的比较？</p><ol><li><p>ServletContext 创建：服务器启动 销毁：服务器关闭 作用范围：整个web应用</p></li><li><p>session 创建：本质jsessionid与服务器端的任何session都不匹配时，调用request.getSession()时创建 销毁：服务器关闭/ session失效/ 手动关闭 作用范围：默认一次会话</p></li><li><p>request 创建：请求 销毁：请求结束 作用范围：一次请求链</p></li><li><p>是否浏览器关闭对应的session就销毁了？ 不对. 只不过是jsessionid默认会消失。</p></li><li><p>存储到session中的数据丢失了，有什么可能？ id丢失 或者 session销毁了。</p></li></ol><h3 id="1-2-7-session的与cookie的区别"><a href="#1-2-7-session的与cookie的区别" class="headerlink" title="1.2.7 session的与cookie的区别"></a>1.2.7 session的与cookie的区别</h3><p><img src="/2020/04/05/day39cookie-session/3.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day38Response-Request-JSP</title>
      <link href="/2020/04/02/day38response-request-jsp/"/>
      <url>/2020/04/02/day38response-request-jsp/</url>
      
        <content type="html"><![CDATA[<h1 id="day38Response-Request-JSP"><a href="#day38Response-Request-JSP" class="headerlink" title="day38Response-Request-JSP"></a>day38Response-Request-JSP</h1><h2 id="1-1-Response"><a href="#1-1-Response" class="headerlink" title="1.1 Response"></a>1.1 Response</h2><h3 id="1-1-1-HttpServletResponse对象"><a href="#1-1-1-HttpServletResponse对象" class="headerlink" title="1.1.1 HttpServletResponse对象"></a>1.1.1 HttpServletResponse对象</h3><p>在Servlet API中，定义了一个HttpServletResponse接口，它继承自ServletResponse接口，专门用来封装HTTP响应消息。由于HTTP响应消息分为状态行、响应消息头、消息体三部分，因此，在HttpServletResponse接口中定义了向客户端发送响应状态码、响应消息头、响应消息体的方法，接下来，本节将针对这些方法进行详细的讲解。</p><h3 id="1-1-2-发送状态码相关的方法"><a href="#1-1-2-发送状态码相关的方法" class="headerlink" title="1.1.2 发送状态码相关的方法"></a>1.1.2 发送状态码相关的方法</h3><p>当Servlet向客户端回送响应消息时，需要在响应消息中设置状态码。为此，在HttpServletResponse接口中，定义了两个发送状态码的方法，具体如下。</p><p>setStatus(int status)方法</p><p>该方法用于设置HTTP响应消息的状态码，并生成响应状态行。由于响应状态行中的状态描述信息直接与状态码相关，而HTTP版本由服务器确定，因此，只要通过setStatus(int status)方法设置了状态码，即可实现状态行的发送。需要注意的是，正常情况下，Web服务器会默认产生一个状态码为200的状态行。</p><h3 id="1-1-3-发送响应消息头相关的方法"><a href="#1-1-3-发送响应消息头相关的方法" class="headerlink" title="1.1.3 发送响应消息头相关的方法"></a>1.1.3 发送响应消息头相关的方法</h3><p>当Servlet向客户端发送响应消息时，由于HTTP协议的响应头字段有很多种，为此，在HttpServletResponse接口中，定义了一系列设置HTTP响应头字段的方法。</p><p><img src="/2020/04/02/day38response-request-jsp/1.png" alt></p><p>需要注意的是：</p><p>在列举的一系列方法中，addHeader()、setHeader()、addIntHeader()、setIntHeader()方法都是用于设置各种头字段的。</p><p>而setContetType() 和setCharacterEncoding()方法用于设置字符编码，这些设置字符编<br>码的方法可以有效解决乱码问题。</p><h3 id="1-1-4-发送响应消息体相关的方法"><a href="#1-1-4-发送响应消息体相关的方法" class="headerlink" title="1.1.4 发送响应消息体相关的方法"></a>1.1.4 发送响应消息体相关的方法</h3><p>由于在HTTP响应消息中，大量的数据都是通过响应消息体传递的，因此，ServletResponse遵循以IO流传递大量数据的设计理念。在发送响应消息体时，定义了两个与输出流相关的方法，具体如下。</p><ol><li>getOutputStream()方法</li></ol><p>该方法所获取的字节输出流对象为ServletOutputStream类型。由于ServletOutputStream是OutputStream的子类，它可以直接输出字节数组中的二进制数据。因此，要想输出二进制格式的响应正文，就需要使用getOutputStream()方法。</p><ol><li>getWriter()方法</li></ol><p>该方法所获取的字符输出流对象为PrintWriter类型。由于PrintWriter类型的对象可以直接输出字符文本内容，因此，要想输出内容全为字符文本的网页文档，需要使用getWriter()方法。</p><h3 id="1-1-5-重定向"><a href="#1-1-5-重定向" class="headerlink" title="1.1.5 重定向"></a>1.1.5 重定向</h3><p>浏览器请求 AServlet , 由于A无法处理请求 , 将 此请求 重新定向到 BServlet ,此过程就是重定向.</p><p>response.sendRedirect(“/web09/b”);  </p><p>再次发起的请求来自于服务器外部, 所有需要添加项目名称</p><p><img src="/2020/04/02/day38response-request-jsp/2.jpg" alt></p><h2 id="1-2-Request"><a href="#1-2-Request" class="headerlink" title="1.2 Request"></a>1.2 Request</h2><h3 id="1-2-1-HttpServletRequest对象"><a href="#1-2-1-HttpServletRequest对象" class="headerlink" title="1.2.1 HttpServletRequest对象"></a>1.2.1 HttpServletRequest对象</h3><p>在Servlet API中，定义了一个HttpServletRequest接口，它继承自ServletRequest接口，专门用来封装HTTP请求消息。由于HTTP请求消息分为请求行、请求消息头和请求消息体三部分，因此，在HttpServletRequest接口中定义了获取请求行、请求头和请求消息体的相关方法，接下来，本节将针对这些方法进行详细地讲解。</p><h3 id="1-2-2-获取请求行信息的相关方法"><a href="#1-2-2-获取请求行信息的相关方法" class="headerlink" title="1.2.2 获取请求行信息的相关方法"></a>1.2.2 获取请求行信息的相关方法</h3><p>当访问Servlet时，会在请求消息的请求行中，包含请求方法、请求资源名、请求路径等信息，为了获取这些信息，在HttpServletRequest接口中，定义了一系列用于获取请求行的方法，如下所示。</p><p><img src="/2020/04/02/day38response-request-jsp/3.png" alt></p><h3 id="1-2-3-获取请求头信息的相关方法"><a href="#1-2-3-获取请求头信息的相关方法" class="headerlink" title="1.2.3 获取请求头信息的相关方法"></a>1.2.3 获取请求头信息的相关方法</h3><p>当请求Servlet时，需要通过请求头向服务器传递附加信息，例如，客户端可以接收的数据类型，压缩方式，语言等等。为此，在HttpServletRequest接口中，定义了一系列用于获取HTTP请求头字段的方法，如表所示。</p><p><img src="/2020/04/02/day38response-request-jsp/4.png" alt></p><h3 id="1-2-4-获取请求参数"><a href="#1-2-4-获取请求参数" class="headerlink" title="1.2.4 获取请求参数"></a>1.2.4 获取请求参数</h3><p>在实际开发中，经常需要获取用户提交的表单数据，例如，用户名、密码、电子邮件等，为了方便获取表单中的请求参数，在HttpServletRequest接口中，定义了一系列获取请求参数的方法，如表所示。</p><p><img src="/2020/04/02/day38response-request-jsp/5.png" alt></p><h3 id="1-2-5-Request对象保存数据"><a href="#1-2-5-Request对象保存数据" class="headerlink" title="1.2.5 Request对象保存数据"></a>1.2.5 Request对象保存数据</h3><p>Request对象不仅可以获取一系列数据，还可以通过属性传递数据。在ServletRequest接口中，定义了一系列操作属性的方法，具体如下：</p><p>setAttribute()方法</p><ul><li><p>该方法用于将一个对象与一个名称关联后存储进ServletRequest对象中.</p></li><li><p>需要注意的是，如果ServletRequest对象中已经存在指定名称的属性，setAttribute()方法将会先删除原来的属性，然后再添加新的属性。如果传递给setAttribute()方法的属性值对象为null，则删除指定名称的属性，这时的效果等同于removeAttribute()方法。</p></li></ul><p>getAttribute()方法: </p><ul><li>该方法用于从ServletRequest对象中返回指定名称的属性对象，</li></ul><p>removeAttribute()方法: </p><ul><li>该方法用于从ServletRequest对象中删除指定名称的属性，</li></ul><p>getAttributeNames()方法:</p><ul><li>该方法用于返回一个包含ServletRequest对象中的所有属性名的Enumeration对象，在此基础上，可以对ServletRequest对象中的所有属性进行遍历处理。</li></ul><p>需要注意的是，只有属于同一个请求中的数据才可以通过ServletRequest对象传递数据。</p><h3 id="1-2-6-RequestDispatcher对象的应用"><a href="#1-2-6-RequestDispatcher对象的应用" class="headerlink" title="1.2.6 RequestDispatcher对象的应用"></a>1.2.6 RequestDispatcher对象的应用</h3><p>RequestDispatcher接口</p><p>当一个Web资源收到客户端的请求后，如果希望服务器通知另外一个资源去处理请求，这时，除了使用sendRedirect()方法实现请求重定向外，还可以通过RequestDispatcher接口的实例对象来实现。在ServletRequest接口中定义了一个获取RequestDispatcher对象的方法，如表所示。</p><p><img src="/2020/04/02/day38response-request-jsp/6.png" alt></p><p>获取到RequestDispatcher对象后，最重要的工作就是通知其它Web资源处理当前的Servlet请求，为此，在RequestDispatcher接口中，定义了两个相关方法，如所示。</p><p><img src="/2020/04/02/day38response-request-jsp/7.png" alt></p><p>列举的两个方法中，forward()方法可以实现请求转发，include()方法可以实现请求包含：就是将当前页面和被包含页面的输出结果，合并一起响应给浏览器。</p><p>重定向和转发的区别图解</p><p><img src="/2020/04/02/day38response-request-jsp/8.jpg" alt></p><h2 id="1-3-JSP"><a href="#1-3-JSP" class="headerlink" title="1.3 JSP"></a>1.3 JSP</h2><h3 id="1-3-1-jsp的概念"><a href="#1-3-1-jsp的概念" class="headerlink" title="1.3.1 jsp的概念"></a>1.3.1 jsp的概念</h3><p>JSP全名是Java Server Pages，它是建立在Servlet规范之上的动态网页开发技术。在JSP文件中，HTML代码与Java代码共同存在，其中，HTML代码用来实现网页中静态内容的显示，Java代码用来实现网页中动态内容的显示。为了与传统HTML有所区别，JSP文件的扩展名为.jsp。</p><h3 id="1-3-2-体验jsp"><a href="#1-3-2-体验jsp" class="headerlink" title="1.3.2 体验jsp"></a>1.3.2 体验jsp</h3><p>创建JSP文件</p><p><img src="/2020/04/02/day38response-request-jsp/9.png" alt></p><p>代码文件</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.Date"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">%</span>        <span class="token comment" spellcheck="true">// 写java代码</span>         Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 保存数据到 request 中-- request在页面中, 就好像你的doGet方法中使用request一样.</span>         request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  显示在页面上 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>font color<span class="token operator">=</span><span class="token string">"#adff2f"</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">%=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">)</span>  <span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>font<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>在地址栏输入jsp文件名称访问即可。</p><p>效果：</p><p><img src="/2020/04/02/day38response-request-jsp/10.png" alt></p><h3 id="1-3-3-jsp的执行原理"><a href="#1-3-3-jsp的执行原理" class="headerlink" title="1.3.3 jsp的执行原理"></a>1.3.3 jsp的执行原理</h3><p>通过上述的体验jsp之后，我们发现jsp真的非常厉害，既可以编写java代码也可以直接编写html代码，相对servlet更加方便，那么jsp为什么可以直接使用reqeust 与直接编写html代码呢</p><p><img src="/2020/04/02/day38response-request-jsp/11.png" alt></p><p>依据上图的流程：<br>C:\Users\asus.IntelliJIdea2019.2\system\tomcat\Tomcat_8_5_53_Ideawork_5\work\Catalina\localhost\web10\org\apache\jsp\pages找到了生成的java文件，其中一部分内容如下图：</p><p><img src="/2020/04/02/day38response-request-jsp/12.png" alt></p><p>我们可以看到当前的jsp文件被翻译成了一个类，这个类继承HttpJspBase类，那么这个HttpJspBase类又是什么？注意jsp的翻译有服务器完成，HttpJspBase类一定也是tomcat服务器的内容，顺着org.apache.jasper.runtime.HttpJspBase这个类全名，我们找到这个类的源码：</p><p><img src="/2020/04/02/day38response-request-jsp/13.png" alt></p><p>通过观察源码，我们发现JSP其实底层就是一个servlet。我们发现刚刚编写的所有代码都在该Servlet里面的service方法内部。</p><p><img src="/2020/04/02/day38response-request-jsp/14.png" alt></p><p>总结：</p><ol><li><p>jsp之所以可以编写html代码，其实本质上也是类似我们使用Servlet直接输出的。</p></li><li><p>jsp之所以直接使用 直接使用request对象，是因为我们自己编写的代码全部都落入到了service方法内部，在service方法内部一开始就已经声明了request等对象了</p></li></ol><h3 id="1-3-4-jsp的基本语法"><a href="#1-3-4-jsp的基本语法" class="headerlink" title="1.3.4 jsp的基本语法"></a>1.3.4 jsp的基本语法</h3><h4 id="jsp注释"><a href="#jsp注释" class="headerlink" title="jsp注释"></a>jsp注释</h4><p>&lt;%– jsp注释 –%&gt;</p><h4 id="jsp书写java代码的三种方式"><a href="#jsp书写java代码的三种方式" class="headerlink" title="jsp书写java代码的三种方式"></a>jsp书写java代码的三种方式</h4><ol><li>脚本片段</li></ol><p>在之前的演示中，我的jsp已经可以向页面输出一个html内容，但是这个还不够，jsp应该还要有像servlet一样可以通过代码，动态生成网页的功能。servlet是使用java代码生成动态网页的，因此，接下来，我们要学习如何在jsp页面使用java代码。</p><p>&lt;% Java代码片段 %&gt;</p><p>脚本片段使用注意事项：</p><p>脚本片段可以分开书写，最终是组合在一起的，</p><p>示例：</p><pre><code>&lt;%    for (int i = 0; i &lt; 5; i++) {%&gt;&lt;font color=&quot;red&quot;&gt;hellworld&lt;/font&gt;     &lt;/br&gt;&lt;%    }%&gt;</code></pre><ol start="2"><li>脚本声明</li></ol><p>脚本片段虽然可以嵌入java代码，但是如果，我们要给当前的jsp中定义一些方法或者成员变量，就行需要一个新的技术——脚本声明。</p><p>&lt;%!  int i=10;  %&gt;</p><ol start="3"><li>脚本表达式</li></ol><p>虽然脚本声明和脚本片段已经可以书写Java代码了，但是如果我们要使用java代码向页面输出一些内容，还是需要使用原来的response对象，比较繁琐，因此，我们需要一个更加简便的方式，可以代替response向页面输出内容</p><p>&lt;%= 表达式 %&gt;</p><h3 id="1-3-5-jsp9大内置对象"><a href="#1-3-5-jsp9大内置对象" class="headerlink" title="1.3.5  jsp9大内置对象"></a>1.3.5  jsp9大内置对象</h3><p><img src="/2020/04/02/day38response-request-jsp/15.png" alt></p><h4 id="常用内置对象"><a href="#常用内置对象" class="headerlink" title="常用内置对象"></a>常用内置对象</h4><ol><li>request : 作用范围在一次请求链中的域对象 , 在请求到达服务器时创建 , 请求响应完毕 .</li></ol><p><img src="/2020/04/02/day38response-request-jsp/17.png" alt></p><ol start="2"><li>pageContext : 是作用范围最小的域对象 , 只作用当前页面 . 在页面访问时创建 , 页面访问完毕销毁 .</li></ol><p><img src="/2020/04/02/day38response-request-jsp/16.png" alt></p><p>注意 : 查找属性时从最小范围的域对象开始获取, 一旦找到 , 不再查找.</p><p>保存数据的对象：</p><ol><li><p>ServletContext  – 保存 web项目中</p></li><li><p>Session(会话对象)</p></li><li><p>Request         – 保存当前请求(链)</p></li><li><p>PageContext     – 保存到当前页面中.</p><p>存储范围由大到小 , 四大域对象 , 常用 Session 和 Request 对象.</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day37Servlet</title>
      <link href="/2020/04/01/day37servlet/"/>
      <url>/2020/04/01/day37servlet/</url>
      
        <content type="html"><![CDATA[<h1 id="day37Servlet"><a href="#day37Servlet" class="headerlink" title="day37Servlet"></a>day37Servlet</h1><h2 id="1-1-Servlet的概述"><a href="#1-1-Servlet的概述" class="headerlink" title="1.1 Servlet的概述"></a>1.1 Servlet的概述</h2><h3 id="1-1-1-什么是Servlet"><a href="#1-1-1-什么是Servlet" class="headerlink" title="1.1.1 什么是Servlet"></a>1.1.1 什么是Servlet</h3><p>Servlet 运行在服务端的Java小程序，是sun公司提供一套规范，用来处理客户端请求、响应给浏览器的动态资源。<br>Servlet是JavaWeb三大组件之一（Servlet、Filter、Listener），且最重要。</p><h3 id="1-1-2-Servlet的作用"><a href="#1-1-2-Servlet的作用" class="headerlink" title="1.1.2 Servlet的作用"></a>1.1.2 Servlet的作用</h3><p>用来处理从客户端发送过来的请求,并对该请求作出响应。</p><p>Servlet的任务有：</p><ol><li>获取请求数据</li><li>处理请求</li><li>完成响应</li></ol><h2 id="1-2-Servlet的入门"><a href="#1-2-Servlet的入门" class="headerlink" title="1.2 Servlet的入门"></a>1.2 Servlet的入门</h2><h3 id="1-2-1-准备工作"><a href="#1-2-1-准备工作" class="headerlink" title="1.2.1 准备工作"></a>1.2.1 准备工作</h3><p>Servlet规范要求：Servlet程序需要编写实现类，并在web.xml进行配置。</p><ol><li>实现类：通常继承javax.servlet.http.HttpServlet类，并复写doGet和doPost方法。</li></ol><ul><li>doGet()方法用于处理get请求。</li><li>doPost()方法用于处理post请求。</li></ul><ol start="2"><li>配置信息：在web.xml进行配置</li></ol><h3 id="1-2-2-编写步骤"><a href="#1-2-2-编写步骤" class="headerlink" title="1.2.2 编写步骤"></a>1.2.2 编写步骤</h3><ol><li>创建类，继承HttpServlet，复写doGet和doPost方法</li></ol><p><img src="/2020/04/01/day37servlet/day37Servlet%5C2.png" alt></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get请求将执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"post请求将执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>编写配置文件</li></ol><p><img src="/2020/04/01/day37servlet/day37Servlet%5C3.png" alt></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>cn.itcast.demo01.a_servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>启动Tomcat </li></ol><p>在浏览器访问：<a href="http://localhost:8080/web07/hello" target="_blank" rel="noopener">http://localhost:8080/web07/hello</a></p><p>浏览器显示空白页面</p><p><img src="/2020/04/01/day37servlet/day37Servlet%5C4.png" alt></p><p>控制台打印信息</p><p><img src="/2020/04/01/day37servlet/day37Servlet%5C5.png" alt></p><h3 id="1-2-3-Servlet的执行的流程详解"><a href="#1-2-3-Servlet的执行的流程详解" class="headerlink" title="1.2.3 Servlet的执行的流程详解"></a>1.2.3 Servlet的执行的流程详解</h3><p><img src="/2020/04/01/day37servlet/day37Servlet%5C6.png" alt></p><h2 id="1-3-Servlet的生命周期"><a href="#1-3-Servlet的生命周期" class="headerlink" title="1.3 Servlet的生命周期"></a>1.3 Servlet的生命周期</h2><p>生命周期:就是一个对象从创建到销毁的过程.</p><p>Servlet生命周期:Servlet从创建到销毁的过程.</p><p>何时创建:用户第一次访问Servlet创建Servlet的实例 (单实例)</p><p>何时销毁:当项目从服务器中移除的时候，或者关闭服务器的时候.</p><p>Servlet规范规定，所有的servlet必须实现 javax.servlet.Servlet接口。</p><p><img src="/2020/04/01/day37servlet/day37Servlet%5C7.png" alt></p><ol><li>第一次调用时，将执行初始化方法：init(ServletConfig)</li><li>每一次调用，都将执行service(ServletRequest，ServletResponse)方法</li><li>服务器关闭，或项目移除：destroy()方法</li></ol><p>JavaEE规范中提供Servlet接口实现类：</p><ol><li>GenericServlet：通用servlet实现。没有实现service</li></ol><ol start="2"><li>HttpServlet：与Http协议有关的实现。实现service方法，完成与http协议有关的操作。</li></ol><p>request.getMethod() 获得请求方式（get、post）</p><p>如果是get，将调用doGet()</p><p>如果是post，将调用doPost()</p><p>servlet被访问过程描述：</p><ol><li>用户第一次访问Servlet的时候，首先服务器会创建一个Servlet的实例</li><li>创建servlet实例同时执行Servlet的init方法。</li><li>然后，每一次请求服务器都会创建一个新的线程访问Servlet中的service的方法，在service方法内部根据请求的方式的不同调用doXxx的方法(get请求调用doGet,post请求调用doPost)。</li><li>当Servlet从服务器中被移除，或者关闭服务器，Servlet的实例就会被销毁，同时destroy方法将会执行。</li></ol><h2 id="1-4-Servlet的相关的配置"><a href="#1-4-Servlet的相关的配置" class="headerlink" title="1.4 Servlet的相关的配置"></a>1.4 Servlet的相关的配置</h2><h3 id="1-4-1-启动时创建Servlet"><a href="#1-4-1-启动时创建Servlet" class="headerlink" title="1.4.1 启动时创建Servlet"></a>1.4.1 启动时创建Servlet</h3><p>Servlet默认是在第一次访问的时候创建的.现在让Servlet在服务器启动的时候创建好.进行对Servlet的配置:<br>在web.xml中在&lt; servlet&gt;&lt; /servlet&gt;标签中配置:</p><ul><li>&lt; load-on-startup&gt;2&lt; /load-on-startup&gt; — 传入正整数,整数越小,被创建的优先级就越高.</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>cn.itcast.demo01.a_servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><h3 id="1-4-2-url-pattern的配置"><a href="#1-4-2-url-pattern的配置" class="headerlink" title="1.4.2 url-pattern的配置"></a>1.4.2 url-pattern的配置</h3><ol><li>完全路径匹配 ：以 / 开始</li></ol><p>例如:  /ServletDemo4 , /aaa/ServletDemo5 , /aaa/bbb/ServletDemo6</p><ol start="2"><li>目录匹配 ：以 / 开始 需要以 * 结束</li></ol><p>例如: /* （所有） ,/aaa/* （aaa目录下的所有） ,/aaa/bbb/*</p><ol start="3"><li>扩展名匹配 ：不能以 / 开始 以 * 开始的</li></ol><p>例如: <em>.do , .action 、.jsp 、</em>.jpg</p><ol start="4"><li>缺省路径 /</li></ol><p>通常情况访问 html页面时，首先从当前web项目的web.xml文件寻找匹配路径，如果如果没有找到，再从tomcat默认的web.xml匹配，将使用缺省servlet</p><p>tomcat获得匹配路径时，优先级顺序：1 &gt; 2 &gt; 3 &gt; 4</p><h2 id="1-5-Servlet3-0-注解"><a href="#1-5-Servlet3-0-注解" class="headerlink" title="1.5 Servlet3.0 注解"></a>1.5 Servlet3.0 注解</h2><h3 id="1-5-1-Servlet3-0"><a href="#1-5-1-Servlet3-0" class="headerlink" title="1.5.1 Servlet3.0"></a>1.5.1 Servlet3.0</h3><p>Servlet3.0新增了一些注解，用来简化的javaweb代码开发:</p><ol><li>可以省略web.xml配置文件</li><li>支持异步处理（多线程技术）</li><li>支持可插性特性（书写的代码编译后生成的class文件可以直接部署到其他项目的，自动加载执行）</li></ol><p>@WebServlet</p><ul><li><p>创建servlet，在@WebServlet注解中添加urlPatterns = “/hello”，作为请求路径</p></li><li><p>就不可以不用在web.xml中进行配置虚拟路径了</p></li></ul><h2 id="1-6-ServletConfig对象"><a href="#1-6-ServletConfig对象" class="headerlink" title="1.6 ServletConfig对象"></a>1.6 ServletConfig对象</h2><p>ServletConfig 对象是Servlet对象的相关配置信息封装而成的 ,通过继承的getServletConfig()方法即可获取.</p><ol><li>getServletName() : 获取Servlet的名字</li><li>getInitParameter() : 获取 Servlet 配置初始化值 需要在在xml中加init-param</li><li>getServletContext() : 获取ServletContex对象</li></ol><h2 id="1-7-ServletContext对象"><a href="#1-7-ServletContext对象" class="headerlink" title="1.7 ServletContext对象"></a>1.7 ServletContext对象</h2><h3 id="1-7-1-概述"><a href="#1-7-1-概述" class="headerlink" title="1.7.1 概述"></a>1.7.1 概述</h3><p>ServletContext对象，tomcat为每一个web项目单独创建的一个上下文（知上知下贯穿全文）对象。服务器启动的时候,为每个WEB应用创建一个单独的ServletContext对象,我们可以使用这个对象存取数据,用这个对象存取的数据可以在整个WEB应用中获得。</p><h3 id="1-7-1-常用功能"><a href="#1-7-1-常用功能" class="headerlink" title="1.7.1 常用功能"></a>1.7.1 常用功能</h3><ol><li>可以使用如下方法可以在多个servlet之间共享数据</li></ol><p><img src="/2020/04/01/day37servlet/day37Servlet%5C8.png" alt></p><ol start="2"><li>可以获得当前WEB项目中的指定资源（文件）</li></ol><p><img src="/2020/04/01/day37servlet/day37Servlet%5C9.png" alt></p><ol start="3"><li>ServletContext.getMimeType(filename) , 传入文件名,获取对应的MIME类型</li></ol><ol start="4"><li>可以进行整个web项目初始化数据设置 , 在web.xml可以给整个web项目配置初始化参数</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>参数名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>参数值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><h3 id="1-7-2-应用举例-加载配置文件"><a href="#1-7-2-应用举例-加载配置文件" class="headerlink" title="1.7.2 应用举例 : 加载配置文件"></a>1.7.2 应用举例 : 加载配置文件</h3><p>在实际开发中，有时候可能会需要读取Web应用中的一些资源文件，比如配置文件，图片等。为此，在ServletContext接口中定义了一些读取Web资源的方法，这些方法是ServletContext来实现的。</p><p>ServletContext根据资源文件名相对于Web应用的路径，返回关联资源文件的IO流、资源文件在文件系统的绝对路径等。</p><p><img src="/2020/04/01/day37servlet/day37Servlet%5C10.png" alt></p><p>资源路径问题,项目部署到Tomcat后会发生资源位置的改变</p><ol><li>src下           :   发布到 /WEB-INF/classes/文件名</li><li>web目录下       :   发布到 /文件名</li><li>WEB-INF目录下   :   发布到 /WEB-INF/文件名</li></ol><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/file3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">File3Servlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 读取 a.jpg</span>        <span class="token comment" spellcheck="true">// 使用路径读取方式 (较麻烦)</span><span class="token comment" spellcheck="true">//        String realPath = getServletContext().getRealPath("/a.jpg");</span><span class="token comment" spellcheck="true">//        FileInputStream fileInputStream = new FileInputStream(realPath);</span>        <span class="token comment" spellcheck="true">// 使用 流 读取方式 (较简单)</span>        InputStream in <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/a.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 回写字节数据</span>        ServletOutputStream out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 读写数据</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//释放资源</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day36Tomcat&amp;Servlet入门</title>
      <link href="/2020/03/31/day36tomcat-http-xie-yi/"/>
      <url>/2020/03/31/day36tomcat-http-xie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="day36Tomcat-amp-http协议"><a href="#day36Tomcat-amp-http协议" class="headerlink" title="day36Tomcat&amp;http协议"></a>day36Tomcat&amp;http协议</h1><h2 id="1-1-Web开发概述"><a href="#1-1-Web开发概述" class="headerlink" title="1.1 Web开发概述"></a>1.1 Web开发概述</h2><h3 id="1-1-1-WEB通信"><a href="#1-1-1-WEB通信" class="headerlink" title="1.1.1 WEB通信"></a>1.1.1 WEB通信</h3><p>WEB采用B/S通信模式，通过超文本传送协议(HTTP, Hypertext transport protocol)进行通信。通过浏览器地址栏编写URL，向服务器发送一个请求，服务器端根据请求进行相应的处理，处理完成之后，会向浏览器作出一个响应，及将服务器端资源发送给浏览器。</p><h3 id="1-1-2-软件架构"><a href="#1-1-2-软件架构" class="headerlink" title="1.1.2 软件架构"></a>1.1.2 软件架构</h3><p>C/S架构：Client/Server 客户端/服务器。要求客户端电脑安装一个客户端程序。<br>常见应用：QQ，迅雷，360，旺旺等</p><p>优点：</p><ol><li>用户体验好，效果炫</li><li>对信息安全的控制较强</li><li>应用服务器运行数据负荷较轻，部分计算功能在客户端完成。</li></ol><p>缺点：</p><ol><li>占用硬盘空间</li><li>维护麻烦</li><li>安装使用依赖其他条件</li></ol><p>B/S架构：Browser/Server 浏览器/服务器 。通过浏览器与服务器交互，不需要安装其他程序 常见应用：网银系统，淘宝，京东 12306 等</p><p>优点：</p><ol><li>维护和升级简单，无缝升级。</li><li>不用必须安装程序，操作系统内置了浏览器。</li></ol><p>缺点：</p><ol><li>动画效果受浏览器限制</li><li>对信息安装控制较差。例如：网银就需要使用U盾，在浏览器端加密。</li><li>应用服务器运行数据负荷较重。大部分计算都在服务器端，增加服务器压力。使用Ajax可以改善部分用户体验。</li></ol><h3 id="1-1-3-WEB资源介绍"><a href="#1-1-3-WEB资源介绍" class="headerlink" title="1.1.3 WEB资源介绍"></a>1.1.3 WEB资源介绍</h3><p>静态资源：指web页面中供人们浏览的数据始终是不变。比如：HTML、CSS、JS、图片、多媒体。</p><p>动态资源：指web页面中供人们浏览的数据是由程序产生的，不同时间点访问web页面看到的内容各不相同。比如：JSP/Servlet、ASP、PHP</p><h3 id="1-1-4-WEB服务器"><a href="#1-1-4-WEB服务器" class="headerlink" title="1.1.4 WEB服务器"></a>1.1.4 WEB服务器</h3><p>JCP（Java Community Process)Java技术规范制定与更新的国际组织。主要维护规范包括：J2ME、J2SE、J2EE，XML等。</p><p>J2EE 企业级开发Java规范。标准规范包括：servlet、jsp、jdbc、xml、jta、javamail等。在java中规范就是接口。J2EE又称为JavaEE。</p><p>WEB服务器对JavaEE规范部分或全部支持（实现），也就是WEB服务器实现部分或全部接口。</p><p>常见的WEB服务器：</p><ol><li>Tomcat：Apache组织提供一个免费的小型的服务器软件。支持Servlet和JSP规范。</li><li>WebLogic：Bea公司的一个收费的大型的服务器软件，后被Oracle收购。支持EE的所有的规范</li><li>WebSphere：IBM公司的一个收费的大型的服务器软件，支持EE的所有的规范。</li><li>JBoss：是一个基于J2EE的开放源代码的应用服务器。JBoss是一个管理EJB的容器和服务器，JBoss核心服务不<br>包括支持servlet/JSP的WEB容器，一般与Tomcat或Jetty绑定使用。</li></ol><h3 id="1-1-5-URL请求路径"><a href="#1-1-5-URL请求路径" class="headerlink" title="1.1.5 URL请求路径"></a>1.1.5 URL请求路径</h3><p>URL （Uniform ResourceLocator） ，统一资源定位符是对互联网上资源位置的一种表示，互联网上的每个文件都有一个唯一的URL。</p><p>完整格式如下：<br>协议://域名:端口号/资源位置?参数=值</p><ol><li>协议，http、https、ftp等</li><li>域名，域名或IP地址，都可以访问WEB资源</li><li>端口号，程序必须使用端口号，才可以让另一个计算机访问。http协议的默认端：80</li><li>资源位置，用于描述WEB资源再服务器上的位置。</li><li>参数=值，浏览器和服务器交互传递的数据</li></ol><p>例如：常见路径</p><p><a href="http://www.itcast.cn:80/subject/javaeezly/index.shtml" target="_blank" rel="noopener">http://www.itcast.cn:80/subject/javaeezly/index.shtml</a></p><p>百度搜索“传智播客”</p><p><a href="https://www.baidu.com/s?cl=3&amp;wd=%B4%AB%D6%C7%B2%A5%BF%CD" target="_blank" rel="noopener">https://www.baidu.com/s?cl=3&amp;wd=%B4%AB%D6%C7%B2%A5%BF%CD</a></p><h2 id="1-2-Tomcat介绍"><a href="#1-2-Tomcat介绍" class="headerlink" title="1.2 Tomcat介绍"></a>1.2 Tomcat介绍</h2><h3 id="1-2-1-概述"><a href="#1-2-1-概述" class="headerlink" title="1.2.1 概述"></a>1.2.1 概述</h3><p>Tomcat 服务器是一个免费的开放源代码的Web应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。</p><p>支持Servlet和JSP 规范,且最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现</p><h3 id="1-2-2-Tomcat版本"><a href="#1-2-2-Tomcat版本" class="headerlink" title="1.2.2 Tomcat版本"></a>1.2.2 Tomcat版本</h3><p>tomcat 目前存在很多版本，希望大家了解tomcat的版本，从而知道自己的创建的项目使用的是几版本规范，不同版本的规范技术可能不同。我们学习的JavaEE 8.0，Servlet规范3.1，tomcat至少使用8.5版本。</p><p>官网地址：<a href="http://tomcat.apache.org/whichversion.html" target="_blank" rel="noopener">http://tomcat.apache.org/whichversion.html</a></p><p><img src="day36Tomcat-http%E5%8D%8F%E8%AE%AE%5C2.png" alt></p><h3 id="1-2-3-安装Tomcat"><a href="#1-2-3-安装Tomcat" class="headerlink" title="1.2.3 安装Tomcat"></a>1.2.3 安装Tomcat</h3><p>步骤一：下载一个tomcat服务器软件.<br><a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">https://tomcat.apache.org/download-80.cgi</a></p><p>步骤二：解压下载好的zip文件.<br>将解压后的文件copy到一个没有中文和空格的路径下即可.<br>例如：D:\02_DevelopTools\apache-tomcat-8.5.27</p><p><img src="day36Tomcat-http%E5%8D%8F%E8%AE%AE%5C1.png" alt></p><p>bin：脚本目录</p><ol><li>启动脚本：startup.bat</li><li>停止脚本：shutdown.bat</li></ol><p>conf：配置文件目录 (config /configuration)</p><ol><li>核心配置文件：server.xml</li><li>用户权限配置文件：tomcat-users.xml</li><li>所有web项目默认配置文件：web.xml</li></ol><p>lib：依赖库，tomcat和web项目中需要使用的jar包</p><p>logs：日志文件</p><p>temp：临时文件目录，文件夹内内容可以任意删除。</p><p>webapps：默认情况下发布WEB项目所存放的目录。</p><p>work：tomcat处理JSP的工作目录。</p><h3 id="1-2-5-Tomcat启动和访问"><a href="#1-2-5-Tomcat启动和访问" class="headerlink" title="1.2.5 Tomcat启动和访问"></a>1.2.5 Tomcat启动和访问</h3><ol><li><p>tomcat解压目录/bin/startup.bat 双击运行启动tomcat</p></li><li><p>访问路径：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p></li></ol><h3 id="1-2-6-web项目目录结构"><a href="#1-2-6-web项目目录结构" class="headerlink" title="1.2.6  web项目目录结构"></a>1.2.6  web项目目录结构</h3><p>在JavaEE规范中，WEB项目存在一定的目录结构，具体结构如下：项目名称 （webapps 文件夹）</p><ol><li>静态资源.HTML，CSS，JS</li><li>WEB-INF （不能直接通过浏览器进行访问）</li><li>web.xml 当前WEB项目的核心配置，Servlet2.5必须有，3.0可省略。</li><li>lib 当前WEB项目所需要的第三方的jar的存放位置。</li><li>classes Java源码编译后生成class文件存放的位置。</li></ol><h3 id="1-2-7-idea发布web项目"><a href="#1-2-7-idea发布web项目" class="headerlink" title="1.2.7 idea发布web项目"></a>1.2.7 idea发布web项目</h3><p>不做详细介绍，必需要会配置</p><h2 id="1-3-HTTP协议"><a href="#1-3-HTTP协议" class="headerlink" title="1.3 HTTP协议"></a>1.3 HTTP协议</h2><h3 id="1-3-1-什么是HTTP协议"><a href="#1-3-1-什么是HTTP协议" class="headerlink" title="1.3.1 什么是HTTP协议"></a>1.3.1 什么是HTTP协议</h3><p>HTTP协议：超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。用于定义WEB浏览器与WEB服务器之间交换数据的过程。</p><h3 id="1-3-2-HTTP协议的作用及特点"><a href="#1-3-2-HTTP协议的作用及特点" class="headerlink" title="1.3.2 HTTP协议的作用及特点"></a>1.3.2 HTTP协议的作用及特点</h3><p>作用：</p><p>HTTP协议是学习JavaWEB开发的基石，不深入了解HTTP协议，就不能说掌握了WEB开发，更无法管理和维护一些复杂的WEB站点。</p><p>特点：</p><ol><li><p>基于请求/响应模型的协议。请求和响应必须成对；先有请求后有响应。</p></li><li><p>HTTP协议默认的端口:80</p></li></ol><p>例如：<a href="http://www.itheima.com:80" target="_blank" rel="noopener">http://www.itheima.com:80</a></p><h3 id="1-3-3-HTTP协议的版本："><a href="#1-3-3-HTTP协议的版本：" class="headerlink" title="1.3.3 HTTP协议的版本："></a>1.3.3 HTTP协议的版本：</h3><ol><li><p>HTTP/1.0，发送请求，创建一次连接，获得一个web资源，连接断开。 </p></li><li><p>HTTP/1.1，发送请求，创建一次连接，获得多个web资源，连接断开。</p></li></ol><h3 id="1-3-4-HTTP协议的组成："><a href="#1-3-4-HTTP协议的组成：" class="headerlink" title="1.3.4 HTTP协议的组成："></a>1.3.4 HTTP协议的组成：</h3><ol><li><p>HTTP请求协议、HTTP响应协议。</p></li><li><p>HTTP请求包括：请求行、请求头、请求体</p></li><li><p>HTTP响应包括：响应行、响应头、响应体</p></li></ol><h3 id="1-3-5-HTTP请求的详解"><a href="#1-3-5-HTTP请求的详解" class="headerlink" title="1.3.5 HTTP请求的详解"></a>1.3.5 HTTP请求的详解</h3><p>HTTP请求格式：请求行、请求头、请求体。</p><p>如下图，我们提供两种请求方式抓包结果：（Chrome浏览器）</p><p>GET请求抓包数据：</p><p><img src="day36Tomcat-http%E5%8D%8F%E8%AE%AE%5C3.png" alt></p><p>post请求抓包数据：</p><p><img src="day36Tomcat-http%E5%8D%8F%E8%AE%AE%5C4.png" alt></p><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><ol><li><p>请求行必须在HTTP请求格式的第一行。</p></li><li><p>请求行格式：请求方式 资源路径协议/版本</p></li><li><p>请求方式：协议规定7种，常用两种：GET和POST</p></li></ol><p>GET请求：<br>将请求参数追加在URL后面，不安全。例如：form.html?username=jack&amp;username=1234<br>URL长度限制GET请求方式的数据大小。<br>没有请求体</p><p>POST请求:<br>请求参数显示请求体处，较安全。请求数据大小没有显示。只有表单设置为method=”post”才是post请求.其他的都是get请求。</p><h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><ol><li><p>请求头从第二行开始，到第一个空行结束。及请求头和请求体之间存在一个空行。</p></li><li><p>请求头通常以键值对(key:value)方式传递数据。</p></li><li><p>key为规范规定的固定值</p></li><li><p>value 为key对应的取值，通常是一个值，可能是一组。</p></li></ol><p><img src="day36Tomcat-http%E5%8D%8F%E8%AE%AE%5C5.png" alt></p><h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h4><p>通常情况下，只有post请求方式才会使用到请求体，请求体中都是用户表单提交的数据，每一项数据都使用键值对（k=v），多组值使用&amp;相连。例如；username=jack&amp;password=1234</p><h3 id="1-3-6-HTTP响应的详解"><a href="#1-3-6-HTTP响应的详解" class="headerlink" title="1.3.6 HTTP响应的详解"></a>1.3.6 HTTP响应的详解</h3><p>HTTP响应格式：响应行、响应头、响应体</p><p>如下图，我们提供的响应的抓包结果（Chrome浏览器）</p><p><img src="day36Tomcat-http%E5%8D%8F%E8%AE%AE%5C6.png" alt></p><p><img src="day36Tomcat-http%E5%8D%8F%E8%AE%AE%5C7.png" alt></p><h4 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h4><p>状态码：服务器与浏览器用于确定状态的固定数字号码</p><p>200 ：请求成功。</p><p>302 ：请求重定向。</p><p>304 ：请求资源没有改变，访问本地缓存。</p><p>404 ：请求资源不存在。通常是用户路径编写错误，也可能是服务器资源已删除。</p><p>500 ：服务器内部错误。通常程序抛异常。</p><h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><p>响应头也是用的键值对k:v</p><p>服务器通过响应头来控制浏览器的行为，不同的头浏览器操作不同。</p><p><img src="day36Tomcat-http%E5%8D%8F%E8%AE%AE%5C8.png" alt></p><h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><p>响应体，就是服务器发送给浏览器的正文。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day35XML</title>
      <link href="/2020/03/30/day35xml/"/>
      <url>/2020/03/30/day35xml/</url>
      
        <content type="html"><![CDATA[<h1 id="day35XML"><a href="#day35XML" class="headerlink" title="day35XML"></a>day35XML</h1><h2 id="1-1-Web核心技术"><a href="#1-1-Web核心技术" class="headerlink" title="1.1 Web核心技术"></a>1.1 Web核心技术</h2><p><img src="/2020/03/30/day35xml/day35XML%5C%E5%9B%BE1_WEB%E7%9F%A5%E8%AF%86%E6%9E%B6%E6%9E%84.jpg" alt></p><ol><li>xml – 配置文件. </li><li>tomcat – 服务器. Web应用服务器 , 支持Java编写Web程序.  Http协议详解内容 /格式 . </li><li>Servlet – Java编写Web程序.Servlet 接口 . </li><li>ServletContext – 重要的类 ,描述当前Web项目. </li><li>Request &amp; Response – Request 客户端向 服务器发送的信息.   Response 服务器响应客户端的信息 . </li><li>JSP –  HTML 页面的升级版 . 嵌入Java代码 . </li><li>Cookie &amp; Session – Cookie 缓存, 客户端保存数据 . Session 会话 , 服务器保存数据. </li><li>El $ JSTL – 页面便捷取值方式 , JSP 简化版.  </li><li>综合案例 – 分页练习.  limit </li><li>Filter &amp; Listener  – 过滤器 和 监听器 . 与Servlet 并称为JavaWeb 三大组件. </li></ol><h2 id="1-2-概述"><a href="#1-2-概述" class="headerlink" title="1.2 概述"></a>1.2 概述</h2><p>XML ：可扩展标记语言（EXtensible Markup Language） </p><p>用来编写配置文件 , 对应一些类的配置信息.  </p><h2 id="1-3-创建模板"><a href="#1-3-创建模板" class="headerlink" title="1.3 创建模板"></a>1.3 创建模板</h2><p><img src="/2020/03/30/day35xml/2.jpg" alt></p><h2 id="1-4-基本语法"><a href="#1-4-基本语法" class="headerlink" title="1.4 基本语法"></a>1.4 基本语法</h2><h3 id="1-4-1-文档声明"><a href="#1-4-1-文档声明" class="headerlink" title="1.4.1 文档声明"></a>1.4.1 文档声明</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> version : 1.0 版本encoding : 编码UTF-8</code></pre><h3 id="1-4-2-元素"><a href="#1-4-2-元素" class="headerlink" title="1.4.2 元素"></a>1.4.2 元素</h3><p>&lt;开始标签&gt; 元素体  &lt;/结束标签&gt;</p><p>元素体 : 可以是标签,也可以是文本</p><h3 id="1-4-3-属性"><a href="#1-4-3-属性" class="headerlink" title="1.4.3 属性 :"></a>1.4.3 属性 :</h3><p>&lt;开始标签 属性名1= 属性值  属性名2=属性值&gt; </p><p>属性名不能重复, 多个属性 空格间隔开.  </p><h3 id="1-4-4-注释"><a href="#1-4-4-注释" class="headerlink" title="1.4.4 注释"></a>1.4.4 注释</h3><!-- 注释不解析 --><h3 id="1-4-5-转义"><a href="#1-4-5-转义" class="headerlink" title="1.4.5 转义"></a>1.4.5 转义</h3><pre class=" language-xml"><code class="language-xml">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>person</span><span class="token punctuation">></span></span> 3 <span class="token entity" title="&lt;">&amp;lt;</span> 5 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>person</span><span class="token punctuation">></span></span>  &lt;             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>person</span><span class="token punctuation">></span></span> 3 <span class="token entity" title="&gt;">&amp;gt;</span> 5 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>person</span><span class="token punctuation">></span></span>   >            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>person</span><span class="token punctuation">></span></span> 3 <span class="token entity" title="&amp;">&amp;amp;</span> 5 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>person</span><span class="token punctuation">></span></span>  &amp;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>person</span><span class="token punctuation">></span></span> 3 <span class="token entity" title="&apos;">&amp;apos;</span> 5 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>person</span><span class="token punctuation">></span></span> '            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>person</span><span class="token punctuation">></span></span> 3 <span class="token entity" title="&quot;">&amp;quot;</span> 5 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>person</span><span class="token punctuation">></span></span>  ""</code></pre><h3 id="1-4-6-CDATA"><a href="#1-4-6-CDATA" class="headerlink" title="1.4.6 CDATA"></a>1.4.6 CDATA</h3><p>其中可以编写大量文本, 无需转义. </p><pre class=" language-xml"><code class="language-xml"><span class="token cdata">&lt;![CDATA[                    你可以编写任何文本内容, 无需转义 . 写什么就是什么                    a &lt; b   "xx" ]]></span></code></pre><h2 id="1-5-约束"><a href="#1-5-约束" class="headerlink" title="1.5 约束"></a>1.5 约束</h2><p>编写xml的规范 .</p><h3 id="1-5-1-DTD约束"><a href="#1-5-1-DTD约束" class="headerlink" title="1.5.1 DTD约束"></a>1.5.1 DTD约束</h3><h4 id="什么是DTDDTD"><a href="#什么是DTDDTD" class="headerlink" title="什么是DTDDTD"></a>什么是DTDDTD</h4><p>Document Type Definition，文档类型定义，用来约束XML文档。规定XML文档中元素的名称，子元素的名称及顺序，元素的属性等。</p><h4 id="DTD重点要求"><a href="#DTD重点要求" class="headerlink" title="DTD重点要求"></a>DTD重点要求</h4><p>开发中，我们很少自己编写DTD约束文档，通常情况我们都是通过框架提供的DTD约束文档，编写对应的XML文档。常见框架使用DTD约束有：struts2、hibernate等。<br>通过提供的DTD“bean.dtd”编写XML</p><p>引入 </p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入了约束文件  bean.dtd --></span><span class="token doctype">&lt;!DOCTYPE beans SYSTEM "bean.dtd"></span></code></pre><h3 id="1-5-2-Schema约束"><a href="#1-5-2-Schema约束" class="headerlink" title="1.5.2 Schema约束"></a>1.5.2 Schema约束</h3><h4 id="什么是Schema"><a href="#什么是Schema" class="headerlink" title="什么是Schema"></a>什么是Schema</h4><p>Schema是新的XML文档约束； Schema要比DTD强大很多，是DTD 替代者； Schema本身也是XML文档，但Schema文档的扩展名为xsd，而不是xml。 Schema 功能更强大，数据类型更完善 Schema 支持名称空间</p><h4 id="Schema重点要求"><a href="#Schema重点要求" class="headerlink" title="Schema重点要求"></a>Schema重点要求</h4><p>与DTD一样，要求可以通过schema约束文档编写xml文档。常见框架使用schema的有：Spring等通过提供“bean-schema.xsd”编写xml文档</p><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><h4 id="什么是命名空间"><a href="#什么是命名空间" class="headerlink" title="什么是命名空间"></a>什么是命名空间</h4><p>如果一个XML文档中使用多个Schema文件，而这些Schema文件中定义了相同名称的元素时就会出现名字冲突。这就像一个Java文件中使用了import java.util.和import java.sql.时，在使用Date类时，那么就不明确Date是哪个包下的Date了。</p><p>总之名称空间就是用来处理元素和属性的名称冲突问题，与Java中的包是同一用途。如果每个元素和属性都有自己的名称空间，那么就不会出现名字冲突问题，就像是每个类都有自己所在的包一样，那么类名就不会出现冲突。</p><h4 id="约束文档和xml关系"><a href="#约束文档和xml关系" class="headerlink" title="约束文档和xml关系"></a>约束文档和xml关系</h4><p>当W3C提出Schema约束规范时，就提供“官方约束文档”。我们通过官方文档，必须“自定义schema 约束文档”，开发中“自定义文档”由框架编写者提供。我们提供“自定义文档”限定，编写出自己的xml文档。</p><p><img src="/2020/03/30/day35xml/3.jpg" alt></p><p>引入 </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.itcast.cn/bean<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.itcast.cn/bean bean-schema.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="1-6-XML解析"><a href="#1-6-XML解析" class="headerlink" title="1.6 XML解析"></a>1.6 XML解析</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>当将数据存储在XML后，我们就希望通过程序获得XML的内容。如果我们使用Java基础所学习的IO知识是可以完成的，不过你需要非常繁琐的操作才可以完成，且开发中会遇到不同问题（只读、读写）。人们为不同问题提供不同的解析方式，并提交对应的解析器，方便开发人员操作XML。</p><h3 id="常见的解析方式和解析器"><a href="#常见的解析方式和解析器" class="headerlink" title="常见的解析方式和解析器"></a>常见的解析方式和解析器</h3><ol><li><p>DOM：要求解析器把整个XML文档装载到内存，并解析成一个Document对象。</p></li><li><p>SAX：是一种速度更快，更有效的方法。它逐行扫描文档，一边扫描一边解析。并以事件驱动的方式进行具体解析，每执行一行，都将触发对应的事件。</p></li><li><p>PULL：Android内置的XML解析方式，类似SAX。</p></li></ol><h3 id="1-6-1-dom4j"><a href="#1-6-1-dom4j" class="headerlink" title="1.6.1 dom4j"></a>1.6.1 dom4j</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>DOM4J是一个Java的XML API，具有性能优异、功能强大和极其易使用的特点，它的性能超过sun公司官方的dom技术，如今可以看到越来越多的Java软件都在使用DOM4J来读写XML。<br>如果想要使用DOM4J，需要引入支持xpath的jar包 dom4j-1.6.1.jarDOM4J必须使用核心类SaxReader加载xml文档获得Document，通过Document对象获得文档的根元素，然后就<br>可以操作了</p><h4 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h4><ol><li><p>SaxReader对象</p><p> read(…) 加载执行xml文档</p></li><li><p>Document对象</p><p> getRootElement() 获得根元素</p></li><li><p>Element对象</p><p>elements(…) 获得指定名称的所有子元素。可以不指定名称</p><p>element(…) 获得指定名称第一个子元素。可以不指定名称</p><p>getName() 获得当前元素的元素名</p><p>attributeValue(…) 获得指定属性名的属性值</p><p>elementText(…) 获得指定名称子元素的文本值</p><p>getText() 获得当前元素的文本内容</p></li></ol><h4 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"001"</span> className<span class="token operator">=</span><span class="token string">"cn.itcast.demo.User"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user"</span> value<span class="token operator">=</span><span class="token string">"jack"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user"</span> value<span class="token operator">=</span><span class="token string">"rose"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"002"</span> className<span class="token operator">=</span><span class="token string">"cn.itcast.demo.Admin"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user"</span> value<span class="token operator">=</span><span class="token string">"admin"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user"</span> value<span class="token operator">=</span><span class="token string">"write"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建 核心类 SAXReader</span>        SAXReader saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 读取配置文件</span>        Document doc <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"web06_xml\\src\\beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取根元素   -- 唯一的根元素.</span>        Element root <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// &lt;beans></span>        <span class="token comment" spellcheck="true">//  获取 bean 标签  , 返回element List 集合, 需要手动 转换成Element 类型 , 以便于 调用Element的方法</span>        List<span class="token operator">&lt;</span>Element<span class="token operator">></span> elements <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Element element <span class="token operator">:</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// System.out.println(element.getName()); // &lt;bean></span>            <span class="token comment" spellcheck="true">// 通过属性名 获取属性值 的   attributeValue(属性名)</span>            String id <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String classname <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id = "</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"classname = "</span> <span class="token operator">+</span> classname<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 继续解析子标签</span>            List<span class="token operator">&lt;</span>Element<span class="token operator">></span> eles_prop <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;Property> 的 list</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Element element2 <span class="token operator">:</span> eles_prop<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// element2 每个 property</span>                String name <span class="token operator">=</span> element2<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String value <span class="token operator">=</span> element2<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value = "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-6-2-Xpath"><a href="#1-6-2-Xpath" class="headerlink" title="1.6.2 Xpath"></a>1.6.2 Xpath</h3><ul><li>xPath 是一门在 XML、html 文档中查找信息的语言。</li><li>XPath 是一个 W3C 标准，可通过W3CSchool文档查阅语法</li></ul><p>由于DOM4J在解析XML时只能一层一层解析，所以当XML文件层数过多时使用会很不方便，结合XPATH就可以直接获取到某个元素</p><p>默认的情况下，dom4j不支持xpath，如果想要在dom4j里面使用xpath，需要引入支持xpath的jar包 jaxen-1.1.6.jar</p><p>在dom4j里面提供了两个方法，用来支持xpath</p><ol><li>List<Node> selectNodes(“xpath表达式”)，用来获取多个节点</Node></li><li>Node selectSingleNode(“xpath表达式”)，用来获取一个节点</li></ol><p>xpath表达式常用查询形式</p><ol><li><p>/AAA/DDD/BBB： 表示一层一层的，AAA下面 DDD下面的BBB</p></li><li><p>//BBB： 表示和这个名称相同，表示只要名称是BBB 都得到</p></li><li><p>/*: 所有元素</p></li><li><p>BBB[1]：表示第一个BBB元素  BBB[last()]：表示最后一个BBB元素</p></li><li><p>//BBB[@id]： 表示只要BBB元素上面有id属性 都得到</p></li><li><p>//BBB[@id=’b1’] 表示元素名称是BBB,在BBB上面有id属性，并且id的属性值是b1</p></li></ol><h4 id="案例实现-1"><a href="#案例实现-1" class="headerlink" title="案例实现"></a>案例实现</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans<span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"001"</span> className<span class="token operator">=</span><span class="token string">"cn.itcast.demo.User"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user"</span> value<span class="token operator">=</span><span class="token string">"jack"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user"</span> value<span class="token operator">=</span><span class="token string">"rose"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"002"</span> className<span class="token operator">=</span><span class="token string">"cn.itcast.demo.Admin"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user"</span> value<span class="token operator">=</span><span class="token string">"admin"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user"</span> value<span class="token operator">=</span><span class="token string">"write"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 创建 SAXReader</span>        SAXReader saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 读取</span>        Document document <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"web06_xml\\src\\beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取所有bean</span><span class="token comment" spellcheck="true">//        List list = document.selectNodes("//bean");</span><span class="token comment" spellcheck="true">//        System.out.println(list.size());</span>        <span class="token comment" spellcheck="true">// 获取所有的 Property</span>        List<span class="token operator">&lt;</span>Element<span class="token operator">></span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">selectNodes</span><span class="token punctuation">(</span><span class="token string">"//property"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// System.out.println(list.size());</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Element element <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            System.out.println(element.getName());</span>            String value <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建 SAXReader</span>        SAXReader saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 读取, 获取doc</span>        Document doc <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"web06_xml\\src\\beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取指定id 的元素 , 返回的Node 转换成 Element</span>         Element ele <span class="token operator">=</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> doc<span class="token punctuation">.</span><span class="token function">selectSingleNode</span><span class="token punctuation">(</span><span class="token string">"//bean[@id='002']"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day34BootStrap</title>
      <link href="/2020/03/29/day34bootstrap/"/>
      <url>/2020/03/29/day34bootstrap/</url>
      
        <content type="html"><![CDATA[<h1 id="day34BootStrap"><a href="#day34BootStrap" class="headerlink" title="day34BootStrap"></a>day34BootStrap</h1><h2 id="1-1-bootstrap概述"><a href="#1-1-bootstrap概述" class="headerlink" title="1.1 bootstrap概述"></a>1.1 bootstrap概述</h2><h4 id="1-1-1-什么是bootstrap"><a href="#1-1-1-什么是bootstrap" class="headerlink" title="1.1.1 什么是bootstrap"></a>1.1.1 什么是bootstrap</h4><p>Bootstrap，基于 HTML、CSS、JAVASCRIPT 的前端框架。该框架已经预定义了一套CSS样式和与样式对应的JS代码。（对应的样式有对应的特效）开发人员只需要编写HTML结构，添加bootstrap固定的class样式，就可以轻松完成指定效果的实现 </p><p>作用：</p><ol><li>Bootstrap 使得 Web 开发更加快捷，高效。</li><li>BootStrap支持响应式开发，解决了移动互联网前端开发问题</li></ol><h3 id="1-1-2-什么是响应式布局、响应式布局能够解决的问题"><a href="#1-1-2-什么是响应式布局、响应式布局能够解决的问题" class="headerlink" title="1.1.2 什么是响应式布局、响应式布局能够解决的问题"></a>1.1.2 什么是响应式布局、响应式布局能够解决的问题</h3><ul><li><p>响应式布局：一个网站的展示能够兼容多个终端(手机、iPad、PC等)，而不需要为每个终端单独做一个展示版本。</p></li><li><p>此概念专为解决移动互联网浏览而诞生的。</p></li><li><p>响应式布局，使得网站仅适用一套样式，就可以在不同分辨率下展示出不同的舒适效果，大大降低了网站开发维护成本，并且能带给用户更好的体验性</p></li></ul><h3 id="1-1-3-引入"><a href="#1-1-3-引入" class="headerlink" title="1.1.3 引入"></a>1.1.3 引入</h3><p>使用bootstrap框架 , 需要引入资源. </p><p><img src="/2020/03/29/day34bootstrap/1.png" alt></p><h3 id="1-1-4-简洁模板"><a href="#1-1-4-简洁模板" class="headerlink" title="1.1.4 简洁模板"></a>1.1.4 简洁模板</h3><p>模板代码</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Bootstrap --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- HTML5 shim 和 Respond.js 是为了让 IE8 支持 HTML5 元素和媒体查询（media queries）功能 --></span>        <span class="token comment" spellcheck="true">&lt;!-- 警告：通过 file:// 协议（就是直接将 html 页面拖拽到浏览器中）访问页面时 Respond.js 不起作用 --></span>        <span class="token comment" spellcheck="true">&lt;!--[if lt IE 9]>      &lt;script src="https://cdn.jsdelivr.net/npm/html5shiv@3.7.3/dist/html5shiv.min.js">&lt;/script>      &lt;script src="https://cdn.jsdelivr.net/npm/respond.js@1.4.2/dest/respond.min.js">&lt;/script>    &lt;![endif]--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            container  表示容器 左右留白 .        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>你好，世界！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            container-fluid 表示容器 填满整行 .        --></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;div class="container-fluid">            &lt;h1>你好，世界！&lt;/h1>        &lt;/div>--></span>        <span class="token comment" spellcheck="true">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/jquery-1.11.3.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="1-2-bootstrap栅格系统"><a href="#1-2-bootstrap栅格系统" class="headerlink" title="1.2 bootstrap栅格系统"></a>1.2 bootstrap栅格系统</h2><h3 id="1-2-1-简述栅格系统"><a href="#1-2-1-简述栅格系统" class="headerlink" title="1.2.1 简述栅格系统"></a>1.2.1 简述栅格系统</h3><p>为了方便在布局容器中进行网页的布局操作。BootStrap提供了一套专门用于响应式开发布局的栅格系统。栅格系统将一行分为12列，通过设定元素占用的列数来 布局元素在页面上的展示位置。</p><p>作用：可以让开发人员更加轻松进行网页布局，并且轻松进行响应式开发。</p><h3 id="1-2-2-栅格系统的特点"><a href="#1-2-2-栅格系统的特点" class="headerlink" title="1.2.2 栅格系统的特点"></a>1.2.2 栅格系统的特点</h3><ul><li><p>栅格特点</p><ul><li>“行（row）”必须包含在 .container （固定宽度）或 .container-fluid （100% 宽度）中</li><li>行使用的样式 .row ，列使用样式 col-<em>-</em> 元素内容应当放置于“列（column）”内</li></ul></li><li><p>基本的书写方式必须是：容器–行—列—内容</p><ul><li>HTML表格：定义一个表格—-行—–单元格</li></ul></li><li><p>栅格参数： col-屏幕尺寸-占用列数</p><ul><li>列元素的书写顺序，决定布局顺序，先写的列元素会被先布局到行上。</li><li>列元素的占用列数，定义列元素的大小</li></ul></li></ul><p>注意：</p><ol><li>一个row下，如果设置的col列数总和小于等于12，那么该row下元素在一行排列；</li><li>一个row下，如果设置的col列数总和大于12，那么超出的元素会另起一行排列；： </li><li>行  和列可以进行无限嵌套，嵌套方式必须为 列—行—列—-行。。。。</li><li>一个row元素下，有12列的</li></ol><h3 id="1-2-3-栅格屏幕尺寸设置"><a href="#1-2-3-栅格屏幕尺寸设置" class="headerlink" title="1.2.3 栅格屏幕尺寸设置"></a>1.2.3 栅格屏幕尺寸设置</h3><p><img src="/2020/03/29/day34bootstrap/day34BootStrap%5C%E5%9B%BE%E7%89%871.png" alt></p><h3 id="1-2-4-响应式工具"><a href="#1-2-4-响应式工具" class="headerlink" title="1.2.4 响应式工具"></a>1.2.4 响应式工具</h3><p>为针对性地在移动页面上展示和隐藏不同的内容，bootStrap提供响应式工具。可以让开发人员通过该工具决定，在何种屏幕尺寸下，隐藏或者显示某些元素</p><p><img src="/2020/03/29/day34bootstrap/day34BootStrap%5C%E5%9B%BE%E7%89%872.png" alt></p><h2 id="1-3-bootstrap常用组件"><a href="#1-3-bootstrap常用组件" class="headerlink" title="1.3 bootstrap常用组件"></a>1.3 bootstrap常用组件</h2><h3 id="1-3-1-按钮"><a href="#1-3-1-按钮" class="headerlink" title="1.3.1 按钮"></a>1.3.1 按钮</h3><p><img src="/2020/03/29/day34bootstrap/4.png" alt></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-default<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-default<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-default<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-default<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Standard button --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>（默认样式）Default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-default btn-lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>（默认样式）Default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- Provides extra visual weight and identifies the primary action in a set of buttons --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>（首选项）Primary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>（首选项）Primary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- Indicates a successful or positive action --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>（成功）Success<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-success btn-xs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>（成功）Success<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- Contextual button for informational alert messages --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>（一般信息）Info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-info btn-block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>（一般信息）Info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- Indicates caution should be taken with this action --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>（警告）Warning<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-warning<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disabled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>（警告）Warning<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- Indicates a dangerous or potentially negative action --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-danger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>（危险）Danger<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- Deemphasize a button by making it look like a link while maintaining button behavior --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>（链接）Link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="1-3-2-轮播图"><a href="#1-3-2-轮播图" class="headerlink" title="1.3.2 轮播图"></a>1.3.2 轮播图</h3><p><img src="/2020/03/29/day34bootstrap/5.png" alt></p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>carousel-example-generic<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>carousel slide<span class="token punctuation">"</span></span> <span class="token attr-name">data-ride</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>carousel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- Indicators --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>carousel-indicators<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#carousel-example-generic<span class="token punctuation">"</span></span> <span class="token attr-name">data-slide-to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#carousel-example-generic<span class="token punctuation">"</span></span> <span class="token attr-name">data-slide-to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#carousel-example-generic<span class="token punctuation">"</span></span> <span class="token attr-name">data-slide-to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- Wrapper for slides --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>carousel-inner<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>listbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../img/1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片丢失<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>carousel-caption<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            这是一个非常美丽的苹果设备套装                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../img/2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>carousel-caption<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            这是一个非常折扣非常优惠设备                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../img/3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>carousel-caption<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            这是一个白给你的二手设备                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- Controls --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left carousel-control<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#carousel-example-generic<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">data-slide</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>glyphicon glyphicon-chevron-left<span class="token punctuation">"</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Previous<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right carousel-control<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#carousel-example-generic<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">data-slide</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>glyphicon glyphicon-chevron-right<span class="token punctuation">"</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Next<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="1-3-3-分页"><a href="#1-3-3-分页" class="headerlink" title="1.3.3 分页"></a>1.3.3 分页</h3><p><img src="/2020/03/29/day34bootstrap/6.png" alt></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Page navigation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pagination<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Previous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&laquo;">&amp;laquo;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&raquo;">&amp;raquo;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Page navigation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pagination pagination-lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Previous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&laquo;">&amp;laquo;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&raquo;">&amp;raquo;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Page navigation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pagination pagination-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Previous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&laquo;">&amp;laquo;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&raquo;">&amp;raquo;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="1-3-4-表单"><a href="#1-3-4-表单" class="headerlink" title="1.3.4 表单"></a>1.3.4 表单</h3><p><img src="/2020/03/29/day34bootstrap/7.png" alt></p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>glyphicon glyphicon-envelope form-inline<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputEmail1<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>glyphicon glyphicon-lock form-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputPassword1<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>File input<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>help-block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Example block-level help text here.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> Check me out    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="1-3-5-图片"><a href="#1-3-5-图片" class="headerlink" title="1.3.5 图片"></a>1.3.5 图片</h3><p><img src="/2020/03/29/day34bootstrap/8.png" alt></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../img/brand.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img-rounded <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../img/brand.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img-circle <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../img/brand.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img-thumbnail <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="1-3-6-导航条"><a href="#1-3-6-导航条" class="headerlink" title="1.3.6 导航条"></a>1.3.6 导航条</h3><p><img src="/2020/03/29/day34bootstrap/9.png" alt></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar navbar-default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container-fluid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- Brand and toggle get grouped for better mobile display --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-toggle collapsed<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collapse<span class="token punctuation">"</span></span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#bs-example-navbar-collapse-1<span class="token punctuation">"</span></span> <span class="token attr-name">aria-expanded</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Toggle navigation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon-bar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon-bar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon-bar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-brand<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Brand<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- Collect the nav links, forms, and other content for toggling --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collapse navbar-collapse<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bs-example-navbar-collapse-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav navbar-nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Link <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>(current)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropdown<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropdown-toggle<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropdown<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">aria-haspopup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">aria-expanded</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Dropdown <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>caret<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropdown-menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Action<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Another action<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>separator<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Something else here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Separated link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>separator<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>One more separated link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-form navbar-right<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./button.html<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- /.navbar-collapse --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- /.container-fluid --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="1-3-7-列表"><a href="#1-3-7-列表" class="headerlink" title="1.3.7 列表"></a>1.3.7 列表</h3><p><img src="/2020/03/29/day34bootstrap/10.png" alt></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>h1. Bootstrap heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>h2. Bootstrap heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>h3. Bootstrap heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>h4. Bootstrap heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>h5. Bootstrap heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>h6. Bootstrap heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bs-example<span class="token punctuation">"</span></span> <span class="token attr-name">data-example-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>body-copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                ullam quis risus eget urna mollis ornare vel eu leo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nullam id dolor id nibh ultricies vehicula.                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec ullamcorper nulla non metus auctor fringilla. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Donec ullamcorper nulla non metus auctor fringilla.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Maecenas sed diam eget risus varius blandit sit amet non magna. Donec id elit non mi porta gravida at eget metus. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list-unstyled list-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>列表1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表1 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表1 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day33javascript-2</title>
      <link href="/2020/03/27/day33javascript-2/"/>
      <url>/2020/03/27/day33javascript-2/</url>
      
        <content type="html"><![CDATA[<h1 id="day33javascript-2"><a href="#day33javascript-2" class="headerlink" title="day33javascript-2"></a>day33javascript-2</h1><h2 id="1-1-案例-表格隔行换色"><a href="#1-1-案例-表格隔行换色" class="headerlink" title="1.1 案例 表格隔行换色"></a>1.1 案例 表格隔行换色</h2><h3 id="1-1-1-案例介绍"><a href="#1-1-1-案例介绍" class="headerlink" title="1.1.1 案例介绍"></a>1.1.1 案例介绍</h3><p>开发中，需要使用表格陈列数据，数据过多不易查看，通常使用隔行换色进行表示。</p><p><img src="/2020/03/27/day33javascript-2/06.png" alt></p><h3 id="1-1-2-案例相关js函数介绍"><a href="#1-1-2-案例相关js函数介绍" class="headerlink" title="1.1.2 案例相关js函数介绍"></a>1.1.2 案例相关js函数介绍</h3><h4 id="相关js事件"><a href="#相关js事件" class="headerlink" title="相关js事件"></a>相关js事件</h4><ul><li>onload() 页面加载成功触发</li></ul><p>方式1：body使用onload属性确定需要执行的函数</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">//js代码在&lt;body>之前，不能获得&lt;body>标签体中的内容，还没有加载到</span>        <span class="token keyword">var</span> e01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"e01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>e01<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//打印：null</span>        <span class="token keyword">function</span> init <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//页面加载成功之后执行</span>            <span class="token keyword">var</span> e02 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"e01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>e02<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印：传智播客</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>e01<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>传智播客<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>方式2： 通过window.onload 设置匿名函数</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//页面加载成功之后执行</span>            <span class="token keyword">var</span> e02 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"e01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>e02<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印：传智播客</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>e01<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>传智播客<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h4 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h4><ul><li>在函数内部this表示：当前操作的元素。</li></ul><h3 id="1-1-3-案例实现"><a href="#1-1-3-案例实现" class="headerlink" title="1.1.3 案例实现"></a>1.1.3 案例实现</h3><p>在提供html页面的基础上，编写js代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//页面加载完成事件</span>    window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取所有的tr标签</span>        <span class="token keyword">var</span> trs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从2开始遍历数组</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>trs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//索引的奇偶数判断</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                trs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor<span class="token operator">=</span><span class="token string">"#FFFAE8"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                trs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor<span class="token operator">=</span><span class="token string">"#9B70A9"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//定义变量,保存变化后的颜色</span>            <span class="token keyword">var</span> color<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//每行注册鼠标的移入事件</span>            trs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onmouseover <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//记录修改后的颜色</span>                color<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor<span class="token operator">=</span><span class="token string">"#ccc"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//每行注册鼠标移出事件</span>            trs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onmouseout <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor<span class="token operator">=</span>color<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="1-2-案例-复选框全选-全不选"><a href="#1-2-案例-复选框全选-全不选" class="headerlink" title="1.2 案例 复选框全选 / 全不选"></a>1.2 案例 复选框全选 / 全不选</h2><h3 id="1-2-1-案例介绍"><a href="#1-2-1-案例介绍" class="headerlink" title="1.2.1 案例介绍"></a>1.2.1 案例介绍</h3><p>开发中，经常需要对表格数据进行“批量处理”，就需要快速的对列表项进行操作，本案例我们来完成“全选和全不选”<br><img src="/2020/03/27/day33javascript-2/07.png" alt></p><h3 id="1-2-2-案例相关js属性介绍"><a href="#1-2-2-案例相关js属性介绍" class="headerlink" title="1.2.2 案例相关js属性介绍"></a>1.2.2 案例相关js属性介绍</h3><h4 id="单选选中-复选选中"><a href="#单选选中-复选选中" class="headerlink" title="单选选中 / 复选选中"></a>单选选中 / 复选选中</h4><pre class=" language-html"><code class="language-html">ele.checked  表示元素是否选中，true表示选中，false表示没有选中例如：ele.checked = true; //设置元素被选中。</code></pre><h3 id="1-2-3-案例实现"><a href="#1-2-3-案例实现" class="headerlink" title="1.2.3 案例实现"></a>1.2.3 案例实现</h3><p>步骤1：给复选框添加onclick事件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAll(this)<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span></code></pre><p>步骤2：编写selectAll(this)处理列表项的复选框是否勾选</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">selectAll</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> checkboxs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"itemSelect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> checked <span class="token operator">=</span> check<span class="token punctuation">.</span>checked<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>checkboxs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            checkboxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked<span class="token operator">=</span>checked<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="1-3-案例-表单用户名验证案例"><a href="#1-3-案例-表单用户名验证案例" class="headerlink" title="1.3 案例 表单用户名验证案例"></a>1.3 案例 表单用户名验证案例</h2><h3 id="1-3-1-案例介绍"><a href="#1-3-1-案例介绍" class="headerlink" title="1.3.1 案例介绍"></a>1.3.1 案例介绍</h3><p>对用户名进行验证，要求必须填写</p><h3 id="1-3-2-案例分析"><a href="#1-3-2-案例分析" class="headerlink" title="1.3.2 案例分析"></a>1.3.2 案例分析</h3><h4 id="知识点分析"><a href="#知识点分析" class="headerlink" title="知识点分析"></a>知识点分析</h4><p>DOM操作</p><pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token punctuation">)</span>获取页面中的标签元素元素属性<span class="token punctuation">:</span> value 表达元素的value属性值元素属性<span class="token punctuation">:</span>innerHTML 向元素体添加内容元素属性<span class="token punctuation">:</span>style 改变元素的样式</code></pre><p><img src="/2020/03/27/day33javascript-2/28.png" alt></p><h3 id="1-3-3-案例实现"><a href="#1-3-3-案例实现" class="headerlink" title="1.3.3 案例实现"></a>1.3.3 案例实现</h3><p>JavaScript代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">function</span> <span class="token function">checkForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> username <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> usernameValue <span class="token operator">=</span> username<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>usernameValue<span class="token punctuation">)</span><span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> usernameSpan <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"usernameSpan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        usernameSpan<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"用户名必须填写"</span><span class="token punctuation">;</span>        usernameSpan<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token string">"#FF0000"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//alert("用户名必须填写");</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="1-2-JS内置对象"><a href="#1-2-JS内置对象" class="headerlink" title="1.2 JS内置对象"></a>1.2 JS内置对象</h2><p>JS的对象也分为内置对象和定义对象</p><ul><li>例如，Java中Object、String、System属于内置对象</li><li>例如，自定义的Person、Student属于自定义的对象。JS的自定义对象是函数实现的</li></ul><h3 id="1-2-1-String"><a href="#1-2-1-String" class="headerlink" title="1.2.1 String"></a>1.2.1 String</h3><p>String 对象用于处理文本（字符串）。</p><h5 id="String-对象属性"><a href="#String-对象属性" class="headerlink" title="String 对象属性"></a>String 对象属性</h5><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>length</td><td>字符串的长度</td></tr></tbody></table><h5 id="String-对象方法"><a href="#String-对象方法" class="headerlink" title="String 对象方法"></a>String 对象方法</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>charAt(x)</td><td>返回在指定位置的字符。</td></tr><tr><td>indexOf(x)</td><td>检索字符串。</td></tr><tr><td>lastIndexOf(x)</td><td>从后向前搜索字符串。</td></tr><tr><td>split(x)</td><td>把字符串分割为字符串数组。</td></tr><tr><td>substring(x, y)</td><td>提取字符串中两个指定的索引号之间的字符。</td></tr><tr><td>substr(x)</td><td>从起始索引号提取字符串中指定数目的字符。</td></tr></tbody></table><h5 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*    String对象    */</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token comment" spellcheck="true">// typeof 输出string</span>    <span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//typeof 输出 object</span>    <span class="token comment" spellcheck="true">//以上定义方式,都可以使用String对象的方法</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">"a-b-c-de-FG"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//字符串的长度</span>    <span class="token comment" spellcheck="true">//alert(s.length);</span>    <span class="token comment" spellcheck="true">//指定索引找字符</span>    <span class="token comment" spellcheck="true">//alert(s.charAt(1));</span>    <span class="token comment" spellcheck="true">//字符第一次出现的索引</span>    <span class="token comment" spellcheck="true">//alert(s.indexOf("c"));</span>    <span class="token comment" spellcheck="true">//字符最后一次出现的索引</span>    <span class="token comment" spellcheck="true">//alert(s.lastIndexOf("c"));</span>    <span class="token comment" spellcheck="true">//切割字符串</span>    <span class="token comment" spellcheck="true">/*      var strArr = s.split("-");    for(var i = 0 ; i &lt; strArr.length;i++){        alert(strArr[i]);    }    */</span>    <span class="token comment" spellcheck="true">//获取索引之间的字符</span>    <span class="token comment" spellcheck="true">//alert(s.substring(1,3));</span>    <span class="token comment" spellcheck="true">//获取索引开始到长度的字符</span>    <span class="token comment" spellcheck="true">//alert(s.substr(1,3));</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="1-2-2-JS内置对象-Date"><a href="#1-2-2-JS内置对象-Date" class="headerlink" title="1.2.2 JS内置对象 Date"></a>1.2.2 JS内置对象 Date</h3><p>Date 对象用于处理日期和时间。</p><h5 id="创建-Date-对象的语法："><a href="#创建-Date-对象的语法：" class="headerlink" title="创建 Date 对象的语法："></a>创建 Date 对象的语法：</h5><pre class=" language-javas"><code class="language-javas">var myDate=new Date()</code></pre><blockquote><p>注释：Date 对象会自动把当前日期和时间保存为其初始值。</p></blockquote><h5 id="Date-对象方法"><a href="#Date-对象方法" class="headerlink" title="Date 对象方法"></a>Date 对象方法</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>getFullYear()</td><td>从 Date 对象以四位数字返回年份。</td></tr><tr><td>getMonth()</td><td>从 Date 对象返回月份 (0 ~ 11)。</td></tr><tr><td>getDate()</td><td>从 Date 对象返回一个月中的某一天 (1 ~ 31)。</td></tr><tr><td>getTime()</td><td>返回 1970 年 1 月 1 日至今的毫秒数。</td></tr><tr><td>toLocaleString()</td><td>根据本地时间格式，把 Date 对象转换为字符串。</td></tr></tbody></table><h5 id="演示代码："><a href="#演示代码：" class="headerlink" title="演示代码："></a>演示代码：</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*     * Data对象     * 创建方式直接new     */</span>    <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//拼接年月日</span>    <span class="token function">alert</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"年"</span><span class="token operator">+</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"月"</span><span class="token operator">+</span>date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取毫秒值</span>    <span class="token function">alert</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据本地时间格式，把 Date 对象转换为字符串。</span>    <span class="token function">alert</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 简化写法 , 建议 以后需要再地址栏拼接时间参数 ,可以使用</span>    <span class="token function">alert</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="1-2-3-JS内置对象-Math"><a href="#1-2-3-JS内置对象-Math" class="headerlink" title="1.2.3 JS内置对象 Math"></a>1.2.3 JS内置对象 Math</h3><p>Math是数学计算的对象,此对象无需创建,直接Math.调用</p><h5 id="Math-对象方法"><a href="#Math-对象方法" class="headerlink" title="Math 对象方法"></a>Math 对象方法</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>ceil(x)</td><td>对数进行上舍入</td></tr><tr><td>floor(x)</td><td>对数进行下舍入。</td></tr><tr><td>round(x)</td><td>把数四舍五入为最接近的整数。</td></tr></tbody></table><h5 id="演示代码：-1"><a href="#演示代码：-1" class="headerlink" title="演示代码："></a>演示代码：</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*    Math对象:直接调用    */</span>    <span class="token comment" spellcheck="true">//向上取整</span>    <span class="token function">alert</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//向下取整</span>    <span class="token function">alert</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//四舍五入取整</span>    <span class="token function">alert</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="1-2-4-JS内置对象-Array"><a href="#1-2-4-JS内置对象-Array" class="headerlink" title="1.2.4 JS内置对象 Array"></a>1.2.4 JS内置对象 Array</h3><p>Array 对象，就是JS数组，用于存储多个值，存储的元素类型可以是任意类型。</p><h5 id="创建-Array-对象的语法"><a href="#创建-Array-对象的语法" class="headerlink" title="创建 Array 对象的语法"></a>创建 Array 对象的语法</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>element0<span class="token punctuation">,</span> element0<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> elementn<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>参数 <em>size</em> 是期望的数组元素个数。返回的数组，length 字段将被设为 <em>size</em> 的值。</p><p>参数 <em>element</em> …, <em>elementn</em> 是参数列表。当使用这些参数来调用构造函数 Array() 时，新创建的数组的元素就会被初始化为这些值。它的 length 字段也会被设置为参数的个数。</p><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><p>返回新创建并被初始化了的数组。</p><p>如果调用构造函数 Array() 时没有使用参数，那么返回的数组为空，length 字段为 0。</p><h5 id="Array-对象属性"><a href="#Array-对象属性" class="headerlink" title="Array 对象属性"></a>Array 对象属性</h5><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>length</td><td>设置或返回数组中元素的数目。</td></tr></tbody></table><h5 id="演示代码：-2"><a href="#演示代码：-2" class="headerlink" title="演示代码："></a>演示代码：</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//定义数组对象</span>    <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//赋值元素</span>    arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    arr1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    arr1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2.2</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义数组对象</span>    <span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印数组长度</span>    <span class="token function">alert</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义数组对象</span>    <span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//开发中最常用方式</span>    <span class="token keyword">var</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span> arr4<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>arr4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义二位数组</span>    <span class="token keyword">var</span> arr5 <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印3</span>    <span class="token function">alert</span><span class="token punctuation">(</span>arr5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印a</span>    <span class="token function">alert</span><span class="token punctuation">(</span>arr5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印false</span>    <span class="token function">alert</span><span class="token punctuation">(</span>arr5<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="1-3-案例-省市二级联动"><a href="#1-3-案例-省市二级联动" class="headerlink" title="1.3 案例 省市二级联动"></a>1.3 案例 省市二级联动</h2><h3 id="1-3-1-案例介绍-1"><a href="#1-3-1-案例介绍-1" class="headerlink" title="1.3.1 案例介绍"></a>1.3.1 案例介绍</h3><p>在日常应用中，我们需要完善个人信息，“所在地”要求选择省市，当选择省时，该省对应的市将自动的更新。</p><p><img src="/2020/03/27/day33javascript-2/04.png" alt></p><p><img src="/2020/03/27/day33javascript-2/05.png" alt></p><h3 id="1-3-2-案例实现"><a href="#1-3-2-案例实现" class="headerlink" title="1.3.2 案例实现"></a>1.3.2 案例实现</h3><p>步骤1：给注册页面添加select标签</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>provinceId<span class="token punctuation">"</span></span> <span class="token attr-name">onchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectCity(this.value)<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">150</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>----请-选-择-省----<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>吉林省<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>山东省<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>河北省<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>江苏省<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cityId<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">150</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>----请-选-择-市----<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>步骤2：js实现</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 定义二维数组:存储省市信息</span>    <span class="token keyword">var</span> pros <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token string">"朝阳"</span><span class="token punctuation">,</span><span class="token string">"海淀"</span><span class="token punctuation">,</span><span class="token string">"昌平"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"长春市"</span><span class="token punctuation">,</span><span class="token string">"锦州市"</span><span class="token punctuation">,</span><span class="token string">"吉林市"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"南京市"</span><span class="token punctuation">,</span><span class="token string">"苏州市"</span><span class="token punctuation">,</span><span class="token string">"徐州市"</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">selectCity</span><span class="token punctuation">(</span>province<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取选中省份的市数组</span>        <span class="token keyword">var</span> cityArr <span class="token operator">=</span> pros<span class="token punctuation">[</span>province<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取城市的select标签对象</span>        <span class="token keyword">var</span> cityEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"cityId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加之前先清空option子标签</span>        cityEle<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建请选择的option子标签</span>        <span class="token keyword">var</span> optionEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"option"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        optionEle<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"----请-选-择-市----"</span><span class="token punctuation">;</span>        cityEle<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>optionEle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历数组,几个元素就创建几个子option标签</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> cityArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建子标签</span>            <span class="token keyword">var</span> optionEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"option"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置子标签的标签体内容</span>            optionEle<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>cityArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//添加子标签</span>            cityEle<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>optionEle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="1-4-JS内置对象-RegExp正则表达式"><a href="#1-4-JS内置对象-RegExp正则表达式" class="headerlink" title="1.4 JS内置对象 RegExp正则表达式"></a>1.4 JS内置对象 RegExp正则表达式</h2><p>RegExp 对象表示正则表达式，它是对字符串执行模式匹配的强大工具。</p><h4 id="创建-RegExp-对象的语法"><a href="#创建-RegExp-对象的语法" class="headerlink" title="创建 RegExp 对象的语法"></a>创建 RegExp 对象的语法</h4><p>直接量方式创建RegExp对象语法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/pattern/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回一个新的 RegExp 对象</span></code></pre><p>通过构造器方式创建 RegExp 对象语法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回一个新的 RegExp 对象</span></code></pre><h4 id="方括号"><a href="#方括号" class="headerlink" title="方括号"></a>方括号</h4><p>方括号用于查找某个范围内的字符：</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>[abc]</td><td>查找方括号之间的任何字符。</td></tr><tr><td>[^abc]</td><td>查找任何不在方括号之间的字符。</td></tr><tr><td>[0-9]</td><td>查找任何从 0 至 9 的数字。</td></tr><tr><td>[a-z]</td><td>查找任何从小写 a 到小写 z 的字符。</td></tr><tr><td>[A-Z]</td><td>查找任何从大写 A 到大写 Z 的字符。</td></tr><tr><td>[A-z]</td><td>查找任何从大写 A 到小写 z 的字符。</td></tr></tbody></table><h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><table><thead><tr><th>量词</th><th>描述</th></tr></thead><tbody><tr><td><a href="http://www.w3school.com.cn/jsref/jsref_regexp_onemore.asp" target="_blank" rel="noopener">n+</a></td><td>匹配任何包含至少一个 n 的字符串。</td></tr><tr><td><a href="http://www.w3school.com.cn/jsref/jsref_regexp_zeromore.asp" target="_blank" rel="noopener">n*</a></td><td>匹配任何包含零个或多个 n 的字符串。</td></tr><tr><td><a href="http://www.w3school.com.cn/jsref/jsref_regexp_zeroone.asp" target="_blank" rel="noopener">n?</a></td><td>匹配任何包含零个或一个 n 的字符串。</td></tr><tr><td><a href="http://www.w3school.com.cn/jsref/jsref_regexp_nx.asp" target="_blank" rel="noopener">n{X}</a></td><td>匹配包含 X 个 n 的序列的字符串。</td></tr><tr><td><a href="http://www.w3school.com.cn/jsref/jsref_regexp_nxy.asp" target="_blank" rel="noopener">n{X,Y}</a></td><td>匹配包含 X 至 Y 个 n 的序列的字符串。</td></tr><tr><td><a href="http://www.w3school.com.cn/jsref/jsref_regexp_nxcomma.asp" target="_blank" rel="noopener">n{X,}</a></td><td>匹配包含至少 X 个 n 的序列的字符串。</td></tr><tr><td><a href="http://www.w3school.com.cn/jsref/jsref_regexp_ndollar.asp" target="_blank" rel="noopener">n$</a></td><td>匹配任何结尾为 n 的字符串。</td></tr><tr><td><a href="http://www.w3school.com.cn/jsref/jsref_regexp_ncaret.asp" target="_blank" rel="noopener">^n</a></td><td>匹配任何开头为 n 的字符串。</td></tr></tbody></table><h4 id="RegExp-对象方法"><a href="#RegExp-对象方法" class="headerlink" title="RegExp 对象方法"></a>RegExp 对象方法</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>test()</td><td>检索字符串中指定的值。返回 true 或 false。</td></tr></tbody></table><pre class=" language-html"><code class="language-html">定义方式: 直接定义和创建对象方式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*    正则表达式定义    1. new RegExp对象    2. 正则被定义在俩个//内    [0-9][a-z][A-Z]{5}    ^匹配开头    $匹配结尾    */</span>    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"^[0-9]{5}$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//正则对象方法test,测试与字符串是否匹配</span>    <span class="token keyword">var</span> flag <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a2345"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token regex">/^[0-9]{5}$/</span><span class="token punctuation">;</span>    flag <span class="token operator">=</span> reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"6789 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="1-5-js的BOM概述"><a href="#1-5-js的BOM概述" class="headerlink" title="1.5 js的BOM概述"></a>1.5 js的BOM概述</h2><p>BOM（Browser Object Mode），浏览器对象模型(将客户端的浏览器抽象成一类对象)，是将我们使用的浏览器抽象成对象模型，例如我们打开一个浏览器，会呈现出页面，通过js提供浏览器对象模型对象我们可以模拟浏览器功能。</p><p>例如，在浏览器地址栏输入地址，敲击回车这个过程，我们可以使用location对象进行模拟。在例如，浏览器中的前进和后退按钮，我们可以使用history对象模拟。当然除此之外，BOM对象不仅仅具备这些功能，让我们来学习吧。</p><h3 id="1-5-1-js的BOM对象"><a href="#1-5-1-js的BOM对象" class="headerlink" title="1.5.1  js的BOM对象"></a>1.5.1  js的BOM对象</h3><ol><li>Screen对象，Screen 对象中存放着有关显示浏览器屏幕的信息。</li><li><strong>Window对象（重点）</strong>，Window 对象表示一个浏览器窗口或一个框架。</li><li>Navigator对象，包含的属性描述了正在使用的浏览器</li><li>History对象，其实就是来保存浏览器历史记录信息。</li><li><strong>Location对象（重点）</strong>，Location 对象是 Window 对象的一个部分，可通过 window.location 属性来访问。</li></ol><h2 id="1-5-2-Window对象"><a href="#1-5-2-Window对象" class="headerlink" title="1.5.2  Window对象"></a>1.5.2  Window对象</h2><p>所有浏览器都支持 Window对象。Window 对象表示浏览器中打开的窗口。</p><p>Window对象此处学习它的两个作用：</p><ol><li><p>JavaScript 消息框  </p></li><li><p>定时器</p></li></ol><h3 id="1-5-3-JavaScript消息框（重点）"><a href="#1-5-3-JavaScript消息框（重点）" class="headerlink" title="1.5.3  JavaScript消息框（重点）"></a>1.5.3  JavaScript消息框（重点）</h3><p>可以在 JavaScript 中创建三种消息框：警告框、确认框、提示框。</p><h4 id="警告框："><a href="#警告框：" class="headerlink" title="警告框："></a>警告框：</h4><p>警告框经常用于确保用户可以得到某些信息。当警告框出现后，用户需要点击确定按钮才能继续进行操作。</p><p><strong>语法：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"文本"</span><span class="token punctuation">)</span></code></pre><p>演示代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">function</span> <span class="token function">disp_alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是警告框！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disp_alert()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>显示警告框<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="确认框"><a href="#确认框" class="headerlink" title="确认框:"></a>确认框:</h4><p>确认框用于使用户可以验证或者接受某些信息。</p><p>当确认框出现后，用户需要点击确定或者取消按钮才能继续进行操作。如果用户点击确认，那么返回值为 true。如果用户点击取消，那么返回值为 false。</p><p><strong>语法：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"文本"</span><span class="token punctuation">)</span></code></pre><p>演示代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">function</span> <span class="token function">show_confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> r<span class="token operator">=</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"Press a button!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"You pressed OK!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"You pressed Cancel!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show_confirm()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Show a confirm box<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="提示框"><a href="#提示框" class="headerlink" title="提示框"></a>提示框</h4><p>提示框经常用于提示用户在进入页面前输入某个值。</p><p>当提示框出现后，用户需要输入某个值，然后点击确认或取消按钮才能继续操纵。如果用户点击确认，那么返回值为输入的值。如果用户点击取消，那么返回值为 null。</p><p><strong>语法：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"文本"</span><span class="token punctuation">,</span><span class="token string">"默认值"</span><span class="token punctuation">)</span></code></pre><p>演示代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">function</span> <span class="token function">disp_prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> name<span class="token operator">=</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入您的名字"</span><span class="token punctuation">,</span><span class="token string">"Bill Gates"</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> name<span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好！"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" 今天过得怎么样？"</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disp_prompt()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>显示提示框<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="1-5-3-定时器（重点）"><a href="#1-5-3-定时器（重点）" class="headerlink" title="1.5.3 定时器（重点）"></a>1.5.3 定时器（重点）</h3><h4 id="setTimeout-方法"><a href="#setTimeout-方法" class="headerlink" title="setTimeout() 方法"></a>setTimeout() 方法</h4><p>用于在指定的毫秒数后调用函数或计算表达式。</p><h5 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span>millisec<span class="token punctuation">)</span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>code</td><td>必需。要调用的函数后要执行的 JavaScript 代码串。</td></tr><tr><td>millisec</td><td>必需。在执行代码前需等待的毫秒数。</td></tr></tbody></table><p><strong>提示：</strong>setTimeout() 只执行 code 一次。如果要多次调用，请使用 setInterval() 或者让 code 自身再次调用 setTimeout()。</p><h5 id="演示代码：-3"><a href="#演示代码：-3" class="headerlink" title="演示代码："></a>演示代码：</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">function</span> <span class="token function">timedMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> t<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"alert('5 seconds!')"</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Display timed alertbox!<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timedMsg()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Click on the button above. An alert box will be            displayed after 5 seconds.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="setInterval-方法"><a href="#setInterval-方法" class="headerlink" title="setInterval() 方法"></a>setInterval() 方法</h4><p>可按照指定的周期（以毫秒计）来调用函数或计算表达式。</p><p>setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。由 setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数。</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span>millisec<span class="token punctuation">)</span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>code</td><td>必需。要调用的函数或要执行的代码串。</td></tr><tr><td>millisec</td><td>必须。周期性执行或调用 code 之间的时间间隔，以毫秒计。</td></tr></tbody></table><p><strong>有返回值，</strong>返回一个可以传递给 Window.clearInterval()的值， 从而取消对 code 的周期性执行。</p><blockquote><p>同 clearInterval() 一起演示代码</p></blockquote><h4 id="clearInterval-方法"><a href="#clearInterval-方法" class="headerlink" title="clearInterval() 方法"></a>clearInterval() 方法</h4><p>可取消由 setInterval() 设置的 周期性执行。</p><p>clearInterval() 方法的参数必须是由 setInterval() 返回的 ID 值。</p><h5 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token function">clearInterval</span><span class="token punctuation">(</span>id_of_setinterval<span class="token punctuation">)</span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>id_of_setinterval</td><td>由 setInterval() 返回的 ID 值。</td></tr></tbody></table><h5 id="演示代码：-4"><a href="#演示代码：-4" class="headerlink" title="演示代码："></a>演示代码：</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">var</span> id <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"3秒"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">function</span> <span class="token function">fnClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                window<span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点我取消定时任务<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fnClear()<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="1-5-4-Location对象"><a href="#1-5-4-Location对象" class="headerlink" title="1.5.4 Location对象"></a>1.5.4 Location对象</h3><h4 id="href-属性"><a href="#href-属性" class="headerlink" title="href 属性"></a>href 属性</h4><p>href是一个可读可写的字符串，可设置或返回当前显示的文档的完整 URL。</p><p>因此，我们可以通过为该属性设置新的 URL，使浏览器读取并显示新的 URL 的内容。</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><pre class=" language-javascript"><code class="language-javascript">location<span class="token punctuation">.</span>href<span class="token operator">=</span>URL</code></pre><h5 id="演示代码：-5"><a href="#演示代码：-5" class="headerlink" title="演示代码："></a>演示代码：</h5><p>假设当前的 URL 是: <a href="http://www.itcast.cn" target="_blank" rel="noopener">http://www.itcast.cn</a></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="1-6-案例-轮播图"><a href="#1-6-案例-轮播图" class="headerlink" title="1.6 案例 轮播图"></a>1.6 案例 轮播图</h2><h3 id="1-6-1-案例需求"><a href="#1-6-1-案例需求" class="headerlink" title="1.6.1 案例需求"></a>1.6.1 案例需求</h3><p>第一天完成首页中，“轮播图”只提供一张图片进行显示。现需要编写程序，完成自动切换图片功能。</p><p><img src="/2020/03/27/day33javascript-2/01.png" alt></p><h3 id="1-6-2-案例分析"><a href="#1-6-2-案例分析" class="headerlink" title="1.6.2 案例分析"></a>1.6.2 案例分析</h3><ol><li>编写html页面，为页面设置加载事件onload</li><li>编写事件触发函数</li><li>获得轮播图图片</li><li>开启定时器，2000毫秒重新设置图片的src属性</li></ol><h3 id="1-6-3-案例实现"><a href="#1-6-3-案例实现" class="headerlink" title="1.6.3 案例实现"></a>1.6.3 案例实现</h3><p>步骤1：为轮播图img标签添加id属性</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgId<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../img/1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>步骤2：编写js代码，页面加载触发指定函数</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> imgId<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"imgId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        imgId<span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">"img/"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">".jpg"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="1-7-案例-定时弹广告"><a href="#1-7-案例-定时弹广告" class="headerlink" title="1.7 案例 定时弹广告"></a>1.7 案例 定时弹广告</h2><h3 id="1-7-1-案例需求"><a href="#1-7-1-案例需求" class="headerlink" title="1.7.1 案例需求"></a>1.7.1 案例需求</h3><p>在平日浏览网页时，页面一打开5秒后显示广告，然后5秒后再隐藏广告。</p><p><img src="/2020/03/27/day33javascript-2/02.png" alt></p><h3 id="1-7-2-案例分析"><a href="#1-7-2-案例分析" class="headerlink" title="1.7.2 案例分析"></a>1.7.2 案例分析</h3><h4 id="知识点分析-1"><a href="#知识点分析-1" class="headerlink" title="知识点分析"></a>知识点分析</h4><p>JavaScript样式获得或修改</p><ul><li>获得或设置样式</li></ul><pre><code>obj.style.属性，获得指定“属性”的值。obj.style.属性=值，给指定“属性”设置内容。</code></pre><h3 id="1-7-3-案例实现"><a href="#1-7-3-案例实现" class="headerlink" title="1.7.3 案例实现"></a>1.7.3 案例实现</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>adDiv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/ad.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> adDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"adDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        adDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">"block"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//显示</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            adDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">"none"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//隐藏</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="3-7-常用的全局方法"><a href="#3-7-常用的全局方法" class="headerlink" title="3.7 常用的全局方法"></a>3.7 常用的全局方法</h3><h4 id="parseFloat-方法"><a href="#parseFloat-方法" class="headerlink" title="parseFloat() 方法"></a>parseFloat() 方法</h4><p>parseFloat 可解析一个字符串，并返回一个浮点数。是全局函数，不属于任何对象。</p><p>该函数指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。</p><h5 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>string</em></td><td>必需。要被解析的字符串。</td></tr></tbody></table><p><strong>有返回值</strong>：返回解析后的数字。如果参数字符串的第一个字符不能被解析成为数字，则 parseFloat 返回 NaN。</p><blockquote><p>提示：开头和结尾的空格是允许的。</p><p>提示：如果字符串的第一个字符不能被转换为数字，那么 parseFloat() 会返回 NaN。</p><p>提示：如果只想解析数字的整数部分，请使用 parseInt() 方法。</p></blockquote><h5 id="演示代码：-6"><a href="#演示代码：-6" class="headerlink" title="演示代码："></a>演示代码：</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"10.00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"10.33"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="parseInt-方法"><a href="#parseInt-方法" class="headerlink" title="parseInt() 方法"></a>parseInt() 方法</h4><p>parseInt函数可解析一个字符串，并返回一个整数。是全局函数，不属于任何对象。</p><h5 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token function">parseInt</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> radix<span class="token punctuation">)</span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需。要被解析的字符串。</td></tr><tr><td>radix</td><td>可选。表示要解析的数字的基数。用来完成字符串转换为指定进制的数值</td></tr></tbody></table><p><strong>有返回值：</strong>返回解析后的数字。</p><blockquote><p>提示：只有字符串中的第一个数字会被返回。</p><p>提示：开头和结尾的空格是允许的。</p></blockquote><h5 id="演示代码-1"><a href="#演示代码-1" class="headerlink" title="演示代码"></a>演示代码</h5><pre class=" language-html"><code class="language-html">parseInt("10");            //返回 10parseInt("19",10);        //返回 19 (10+9)，实现将"19" 转换为 10进制数字parseInt("11",2);        //返回 3 (2+1)，实现将"11" 转换为 2进制数字</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day32javascript-1</title>
      <link href="/2020/03/26/day32javascript-1/"/>
      <url>/2020/03/26/day32javascript-1/</url>
      
        <content type="html"><![CDATA[<h1 id="day32JavaScript-1"><a href="#day32JavaScript-1" class="headerlink" title="day32JavaScript-1"></a>day32JavaScript-1</h1><h2 id="1-1-JavaScript的概述"><a href="#1-1-JavaScript的概述" class="headerlink" title="1.1 JavaScript的概述"></a>1.1 JavaScript的概述</h2><h3 id="1-1-1-什么是JavaScript"><a href="#1-1-1-什么是JavaScript" class="headerlink" title="1.1.1 什么是JavaScript"></a>1.1.1 什么是JavaScript</h3><p>JavaScript是web上一种功能强大的编程语言，用于开发交互式的web页面。它不需要进行编译，而是直接嵌入在HTML页面中，由浏览器执行。</p><ul><li>JavaScript 被设计用来向 HTML 页面添加交互行为。 </li><li>JavaScript 是一种脚本语言（脚本语言是一种轻量级的编程语言）。 </li><li>JavaScript 由数行可执行计算机代码组成。 </li><li>JavaScript 通常被直接嵌入 HTML 页面。 </li><li>JavaScript 是一种解释性语言（就是说，代码执行不进行预编译）。</li></ul><p>JavaScript的组成：</p><ul><li>ECMAScript：语法，语句.</li><li>BOM:浏览器对象</li><li>DOM:Document Object Model.操作文档中的元素和内容.</li></ul><p><img src="/2020/03/26/day32javascript-1/21.png" alt></p><h3 id="1-1-2-JavaScript的作用"><a href="#1-1-2-JavaScript的作用" class="headerlink" title="1.1.2 JavaScript的作用"></a>1.1.2 JavaScript的作用</h3><p>使用JavaScript添加页面动画效果，提供用户操作体验。主要应用有：嵌入动态文本于HTML页面、对浏览器事件做出响应、读写HTML元素、验证提交数据、检测访客的浏览器信息等。</p><h3 id="1-1-3-JavaScript的引入"><a href="#1-1-3-JavaScript的引入" class="headerlink" title="1.1.3 JavaScript的引入"></a>1.1.3 JavaScript的引入</h3><p>在HTML文件中引入JavaScript有两种方式，一种是在HTML文档直接嵌入JavaScript脚本，称为内嵌式，另一种是链接外部JavaScript脚本文件，称为外联式。对他们的具体讲解如下：</p><ol><li>内嵌式，在HTML文档中，通过script标签引入，如下</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//此处为JavaScript代码</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>外联式，在HTML文档中，通过 script src=”” 标签引入.js文件，如下：</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="1-2-基本语法"><a href="#1-2-基本语法" class="headerlink" title="1.2 基本语法"></a>1.2 基本语法</h2><h3 id="1-2-1-变量"><a href="#1-2-1-变量" class="headerlink" title="1.2.1 变量"></a>1.2.1 变量</h3><ol><li>在使用JavaScript时，需要遵循以下命名规范：<ul><li>必须以字母或下划线开头，中间可以是数字、字符或下划线</li><li>变量名不能包含空格等符号</li><li>不能使用JavaScript关键字作为变量名，如：function</li><li>JavaScript严格区分大小写。</li></ul></li><li>变量的声明</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> 变量名<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//JavaScript变量可以不声明，直接使用。默认值：undefined</span></code></pre><ol><li>变量的赋值</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> 变量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//JavaScript变量是弱类型，及同一个变量可以存放不同类型的数据</span></code></pre><h3 id="1-2-2-数据类型"><a href="#1-2-2-数据类型" class="headerlink" title="1.2.2 数据类型"></a>1.2.2 数据类型</h3><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><ul><li>Undefined ,Undefined 类型只有一个值，即 undefined。当声明的变量未初始化时，该变量的默认值是 undefined。</li><li>Null ,只有一个专用值 null，表示空，一个占位符。值 undefined 实际上是从值 null 派生来的，因此 ECMAScript 把它们定义为相等的。</li><li>alert(null == undefined);  //输出 “true”，尽管这两个值相等，但它们的含义不同。<ul><li>Boolean，有两个值 true 和 false </li><li>Number，表示任意数字</li><li>String，字符串由双引号（”）或单引号（’）声明的。JavaScript 没有字符类型    </li></ul></li></ul><p><img src="/2020/03/26/day32javascript-1/22.png" alt></p><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><ul><li><p>引用类型通常叫做类（class），也就是说，遇到引用值，所处理的就是对象。</p></li><li><p>JavaScript是基于对象而不是面向对象。</p></li><li><p>JavaScript提供众多预定义引用类型（内置对象）。</p><pre class=" language-javascript"><code class="language-javascript">造一个对象：<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>造一个字符串对象：<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>造一个日期对象：<span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>内置函数的重要转换: 字符串转成数字</p><pre><code>parseInt \ parseFloat</code></pre></li></ul><h3 id="1-2-3-运算符"><a href="#1-2-3-运算符" class="headerlink" title="1.2.3 运算符"></a>1.2.3 运算符</h3><p>JavaScript运算符与Java运算符基本一致。不过字符串可以进行减乘除(自动转换成算术运算)，还有一个===要考虑数据类型要一致</p><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p><img src="/2020/03/26/day32javascript-1/23.png" alt></p><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p><img src="/2020/03/26/day32javascript-1/24.png" alt></p><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p><img src="/2020/03/26/day32javascript-1/25.png" alt></p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p><img src="/2020/03/26/day32javascript-1/26.png" alt></p><h3 id="1-2-4-运算符操作"><a href="#1-2-4-运算符操作" class="headerlink" title="1.2.4 运算符操作"></a>1.2.4 运算符操作</h3><p>JavaScript规范规定以下操作规则（了解）</p><h4 id="Boolean运算"><a href="#Boolean运算" class="headerlink" title="Boolean运算"></a>Boolean运算</h4><p><img src="/2020/03/26/day32javascript-1/27.png" alt></p><h4 id="JS中的语句"><a href="#JS中的语句" class="headerlink" title="JS中的语句"></a>JS中的语句</h4><p>跟java一样，js也存在if、if-else、for、switch等逻辑语句，与java使用方式一致，此处不再一一阐述</p><h2 id="1-3-函数（重要）"><a href="#1-3-函数（重要）" class="headerlink" title="1.3 函数（重要）"></a>1.3 函数（重要）</h2><p>js的函数是js非常重要的组成部分，js最常用的函数的定义方式有两种：</p><ol><li><strong>普通函数：</strong></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//定义函数</span><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    js逻辑代码    <span class="token comment" spellcheck="true">//return 返回值，若不需要返回值可以省略return</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//函数调用：函数名(实际参数);</span></code></pre><p>例如：求和的函数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//定义函数：</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//执行函数：add(3,5);</span><span class="token comment" spellcheck="true">//执行结果：8</span></code></pre><ol start="2"><li><strong>匿名函数：</strong></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//定义匿名函数也就是没有名字的函数</span><span class="token keyword">function</span><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    js逻辑代码<span class="token punctuation">}</span></code></pre><p>匿名函数没有办法直接调用，一般情况下匿名函数有两种使用场景：</p><p>第一种：将匿名函数赋值给一个变量，使用变量调用函数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//定义函数并赋值给变量：</span><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    js逻辑代码<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用函数：fn(实际参数);</span></code></pre><p>第二种：匿名函数直接作为某个函数实际参数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">xxx</span><span class="token punctuation">(</span>数字类型参数，字符串类型的参数，函数类型的参数<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//js逻辑代码</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用该函数：</span><span class="token function">xxx</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span>”abc”<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="1-4-事件"><a href="#1-4-事件" class="headerlink" title="1.4 事件"></a>1.4 事件</h2><h3 id="1-4-1-事件概述"><a href="#1-4-1-事件概述" class="headerlink" title="1.4.1 事件概述"></a>1.4.1 事件概述</h3><p>js的事件是js不可或缺的组成部分，要学习js的事件，必须要理解如下几个概念：</p><ol><li>事件源：被监听的html元素</li><li>事件：某类动作，例如点击事件，移入移除事件，敲击键盘事件等</li><li>监听器：在事件源上监视某事件，触发后调用事件触发后需要执行的代码</li><li>出来方式：函数</li></ol><h3 id="1-4-2-常用的事件"><a href="#1-4-2-常用的事件" class="headerlink" title="1.4.2 常用的事件"></a>1.4.2 常用的事件</h3><table><thead><tr><th><strong>事件名</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>onload</strong></td><td>某个页面或图像被完成加载</td></tr><tr><td><strong>onsubmit</strong></td><td>当表单提交时触发该事件—注意事件源是表单form</td></tr><tr><td><strong>onclick</strong></td><td>鼠标点击某个对象</td></tr><tr><td>ondblclick</td><td>鼠标双击某个对象</td></tr><tr><td><strong>onblur</strong></td><td>元素失去焦点</td></tr><tr><td><strong>onfocus</strong></td><td>元素获得焦点</td></tr><tr><td><strong>onchange</strong></td><td>用户改变域的内容</td></tr><tr><td>onkeydown</td><td>某个键盘的键被按下</td></tr><tr><td>onkeypress</td><td>某个键盘的键被按下或按住</td></tr><tr><td>onkeyup</td><td>某个键盘的键被松开</td></tr><tr><td>onmousedown</td><td>某个鼠标按键被按下</td></tr><tr><td>onmouseup</td><td>某个鼠标按键被松开</td></tr><tr><td>onmouseover</td><td>鼠标被移到某元素之上</td></tr><tr><td>onmouseout</td><td>鼠标从某元素移开</td></tr><tr><td>onmousemove</td><td>鼠标被移动</td></tr></tbody></table><h2 id="1-2-什么是DOM"><a href="#1-2-什么是DOM" class="headerlink" title="1.2 什么是DOM"></a>1.2 什么是DOM</h2><ul><li>DOM：Document Object Model 文档对象模型，定义访问和操作结构化文档（HTML）的方式。<ul><li>创建的结构化文档：html、xml 等</li><li>DOM包括：核心DOM、HTML DOM、XML DOM。通常情况下HTML DOM 和XML DOM是可以相互使用的。</li></ul></li><li>HTML DOM 将 整个HTML文档呈现成一颗<strong>DOM**</strong>树**，树中有元素、属性、文本等成员。</li></ul><p><img src="/2020/03/26/day32javascript-1/03.png" alt></p><h3 id="1-2-1-document-文档对象"><a href="#1-2-1-document-文档对象" class="headerlink" title="1.2.1 document 文档对象"></a>1.2.1 document 文档对象</h3><p>浏览器加载整个HTML文档形成Document 对象，Document 对象可以访问和操作HTML文档中的所有元素。</p><h4 id="标签元素的操作"><a href="#标签元素的操作" class="headerlink" title="标签元素的操作"></a>标签元素的操作</h4><ol><li><p>获得元素对象：</p><p>根据id获得一个元素：getElementById(id属性值)</p><p>根据标签名称获得多个元素：getElementsByTagName(标签名称)</p><p>根据class属性获得多个元素：getElementsByClassName(class的属性值)</p><p>根据name属性获得多个元素：getElementsByName(name属性值)</p></li><li><p>创建一个新元素createElement()</p></li><li><p>将元素放到某个父元素的内部appendChild()</p></li><li><p>插入一个子元素insertBefore(新元素, 原有子元素)</p></li></ol><h4 id="属性的操作"><a href="#属性的操作" class="headerlink" title="属性的操作"></a>属性的操作</h4><ol><li><p>获得属性的值：getAtrribute(name)</p></li><li><p>设置属性的值：setAtrribute(name,value)</p></li><li><p>删除某个属性：removeAtrribute(name)</p></li></ol><h4 id="文本的操作-Text"><a href="#文本的操作-Text" class="headerlink" title="文本的操作 Text"></a>文本的操作 Text</h4><ol><li><p>获取某个属性：元素 .属性名</p></li><li><p>标签体的获取与设置</p></li><li><p>识别自动解析 HTML标签：属性 innerHTML(可以设置,也可以获取标签内内容)</p></li><li><p>不识别 HTML标签，纯文本：属性 innerText</p></li></ol><h4 id="DOM练习1：getElementById-练习"><a href="#DOM练习1：getElementById-练习" class="headerlink" title="DOM练习1：getElementById 练习"></a>DOM练习1：getElementById 练习</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//输出 &lt;input type="text" name="username" value="传智播客10周年_1"  id="tid" >标签value属性的值</span>    <span class="token keyword">var</span> tidElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>tidElement<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出 &lt;input type="text" name="username" value="传智播客10周年_1"  id="tid" >标签type属性的值</span>    <span class="token function">alert</span><span class="token punctuation">(</span>tidElement<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="DOM练习2：getElementsByTagName-练习"><a href="#DOM练习2：getElementsByTagName-练习" class="headerlink" title="DOM练习2：getElementsByTagName 练习"></a>DOM练习2：getElementsByTagName 练习</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//获取所有的input元素,返回值是数组</span>    <span class="token keyword">var</span> inputs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试长度</span>    <span class="token function">alert</span><span class="token punctuation">(</span>inputs<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历value的值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>inputs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>inputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输出type="text"中 value属性的值 不包含按钮(button)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>inputs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>inputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token operator">==</span><span class="token string">"text"</span><span class="token punctuation">)</span>            <span class="token function">alert</span><span class="token punctuation">(</span>inputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输出所有下拉选 id="edu"中option标签中 value属性的值</span>    <span class="token keyword">var</span> eduElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"edu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> eduOptions <span class="token operator">=</span> eduElement<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"option"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>eduOptions<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>eduOptions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">showSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//输出所有下拉选select的option标签中value的值</span>        <span class="token comment" spellcheck="true">//输出选中的值</span>        <span class="token keyword">var</span> options <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"option"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> options<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>options<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>selected<span class="token punctuation">)</span>                <span class="token function">alert</span><span class="token punctuation">(</span>options<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="DOM练习3-getElementsByName-练习"><a href="#DOM练习3-getElementsByName-练习" class="headerlink" title="DOM练习3 getElementsByName 练习"></a>DOM练习3 getElementsByName 练习</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//通过元素的name属性获取所有元素的引用  name="tname"</span>    <span class="token comment" spellcheck="true">//测试该数据的长度</span>    <span class="token comment" spellcheck="true">//遍历元素,输出所有value属性的值</span>    <span class="token keyword">var</span> inputs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"tname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*for(var i=0;i&lt;inputs.length;i++){         alert(inputs[i].value);   }*/</span>    <span class="token comment" spellcheck="true">//为每个文本框(&lt;input type="text">)增加chanage事件,当值改变时,输出改变的值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>inputs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        inputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onchange<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="DOM练习4-getAttribute-练习"><a href="#DOM练习4-getAttribute-练习" class="headerlink" title="DOM练习4 getAttribute 练习"></a>DOM练习4 getAttribute 练习</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//&lt;li id="xj" value="xingji">星际争霸&lt;/li>节点的value属性的值</span>    <span class="token keyword">var</span> xjElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"xj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>xjElement<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="DOM练习5-setAttribute-练习"><a href="#DOM练习5-setAttribute-练习" class="headerlink" title="DOM练习5 setAttribute 练习"></a>DOM练习5 setAttribute 练习</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//给这个节点增加 name属性 &lt;li id="xj" value="xingji" name="xingjizhengba">星际争霸&lt;/li></span>    <span class="token keyword">var</span> xjElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"xj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xjElement<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"xingjizhengba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试</span>    <span class="token function">alert</span><span class="token punctuation">(</span>xjElement<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="DOM练习6-innerHTML-练习"><a href="#DOM练习6-innerHTML-练习" class="headerlink" title="DOM练习6 innerHTML 练习"></a>DOM练习6 innerHTML 练习</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    window<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//在div层中插入 &lt;h1>海马&lt;/h1></span>        <span class="token keyword">var</span> cityElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cityElement<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"&lt;h1>海马&lt;/h1>"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在div层中插入“海马” 文本</span>        <span class="token comment" spellcheck="true">//cityElement.innerHTML="海马";</span>        <span class="token comment" spellcheck="true">//读取div的标签体内容</span>        <span class="token function">alert</span><span class="token punctuation">(</span>cityElement<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取div的标签体文本内容</span>        <span class="token function">alert</span><span class="token punctuation">(</span>cityElement<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="DOM练习7-hasChildNodes-练习"><a href="#DOM练习7-hasChildNodes-练习" class="headerlink" title="DOM练习7 hasChildNodes 练习"></a>DOM练习7 hasChildNodes 练习</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//查看id="edu"的节点是否含有子节点</span>    <span class="token keyword">var</span> eduElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"edu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> flag <span class="token operator">=</span> eduElement<span class="token punctuation">.</span><span class="token function">hasChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查看id="tid_1"的节点是否含有子节点</span>    <span class="token keyword">var</span> tid_1Element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tid_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    flag <span class="token operator">=</span> tid_1Element<span class="token punctuation">.</span><span class="token function">hasChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="DOM练习8-removeChild-练习"><a href="#DOM练习8-removeChild-练习" class="headerlink" title="DOM练习8 removeChild 练习"></a>DOM练习8 removeChild 练习</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//删除&lt;ul id="city"> 下&lt;li id="bj" name="beijing">北京&lt;/li>这个节点&lt;/ul></span>    <span class="token keyword">var</span> cityElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> bjElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//cityElement.removeChild(bjElement);</span>    <span class="token comment" spellcheck="true">//获取北京的父节点</span>    <span class="token keyword">var</span> parent <span class="token operator">=</span> bjElement<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="DOM练习9-replaceChild-练习"><a href="#DOM练习9-replaceChild-练习" class="headerlink" title="DOM练习9 replaceChild 练习"></a>DOM练习9 replaceChild 练习</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//点击北京节点， 将被反恐节点替换</span>    <span class="token keyword">var</span> bjElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bjElement<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> cityElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> fkElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"fk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cityElement<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>fkElement<span class="token punctuation">,</span>bjElement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="DOM练习10-createElement-练习"><a href="#DOM练习10-createElement-练习" class="headerlink" title="DOM练习10 createElement 练习"></a>DOM练习10 createElement 练习</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//增加城市节点 &lt;li id="tj" v="tianjin">天津&lt;/li>放置到city下</span>    <span class="token keyword">var</span> cityElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> tjElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tjElement<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"天津"</span><span class="token punctuation">;</span>    tjElement<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token string">"tj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tjElement<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token string">"tianjin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cityElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tjElement<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="DOM练习11-insertBefore-练习"><a href="#DOM练习11-insertBefore-练习" class="headerlink" title="DOM练习11 insertBefore 练习"></a>DOM练习11 insertBefore 练习</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 在重庆前面插入新的节点 &lt;li id="tj" name="tianjin">天津&lt;/li></span>    <span class="token keyword">var</span> cityElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> tjElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tjElement<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"天津"</span><span class="token punctuation">;</span>    tjElement<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token string">"tj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tjElement<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token string">"tianjin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> cityElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> cqElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"cq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cityElement<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>tjElement<span class="token punctuation">,</span>cqElement<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day31HTML-CSS</title>
      <link href="/2020/03/23/day31html-css/"/>
      <url>/2020/03/23/day31html-css/</url>
      
        <content type="html"><![CDATA[<h1 id="day31HTML-amp-CSS"><a href="#day31HTML-amp-CSS" class="headerlink" title="day31HTML&amp;CSS"></a>day31HTML&amp;CSS</h1><h2 id="1-1-表单标签form"><a href="#1-1-表单标签form" class="headerlink" title="1.1 表单标签form"></a>1.1 表单标签form</h2><p><img src="/2020/03/23/day31html-css/%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE.png" alt></p><p><code>&lt;form&gt;</code> 表单标签，表单标签在浏览器上没有任何显示。</p><ul><li><p>作用:  收集浏览器用户进行输入的数据,  并把数据发送到服务器端</p></li><li><p>属性</p><ul><li>action：表示用户输入的内容, 被发送到服务器端的路径</li><li>method：表单数据发送方式。常用的取值：GET、POST</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--表单--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--此处的内容可以被表单收集, 提交到服务器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--此处的内容在&lt;form>标签外，此处数据表单收集不到, 不能提交到服务器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h2 id="1-2-输入标签input"><a href="#1-2-输入标签input" class="headerlink" title="1.2 输入标签input"></a>1.2 输入标签input</h2><p><img src="/2020/03/23/day31html-css/%E8%BE%93%E5%85%A5%E6%A0%87%E7%AD%BEinput.png" alt></p><p><code>&lt;input&gt;</code> 标签用于获得用户输入信息，type属性值不同，搜集方式不同。最常用的标签。</p><ul><li>文本输入框:<br>属性type=”text” | value=”文本框的默认值” | placeholder=”输入框预期值的提示信息”  | name：发送给服务器的名称变量</li><li>密码输入框:<br>属性type=”password” | placeholder=”输入框预期值的提示信息” | name：发送给服务器的名称</li><li>单选按钮:<br>属性type=”radio” | name=”定义名字”,同名的单选按钮可以保证单选 | checked=”checked” 默认选中属性, 需要注意: 属性很特别,属性名和属性值一样,固定写法</li><li>复选按钮:<br>属性type=”checkbox” | checked=”checked” 默认选中属性      </li><li>文件域:<br>属性type=”file” | 文件上传服务器</li><li>按钮:<ul><li>普通按钮:<br>属性 type=”button” | value=”按钮上显示文本”<br>用于配合后面的技术JavaScript           </li><li>重置按钮:<br>属性 type=”reset”</li><li>提交按钮: 表单数据发送到服务器<br>提交按钮: 属性 type=”submit”<br>图片按钮: 属性 type=”image”</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 文本输入框 --></span>    用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 密码输入框 --></span>    密　码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pass<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 单选按钮 --></span>    性　别:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>男          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>女 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 复选按钮 --></span>    爱　好:&lt;input type="checkbox" checked="checked"/ name="hobby">抽烟          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>喝酒          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>打牌 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 文件域 --></span>            上传头像:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 普通按钮 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点我提交<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 重置按钮 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 提交按钮 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/btn.jpg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h2 id="1-3-下拉菜单"><a href="#1-3-下拉菜单" class="headerlink" title="1.3 下拉菜单"></a>1.3 下拉菜单</h2><p><img src="/2020/03/23/day31html-css/%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95.png" alt></p><ul><li><code>&lt;select&gt;</code> 下拉列表。可以进行单选或多选。需要使用子标签option指定列表项<ul><li>属性name：发送给服务器的名称 | multiple属性：不写默认单选，取值为“multiple”表示多选。| size属性：多选时，可见选项的数目。</li></ul></li></ul><ul><li><code>&lt;option&gt;</code> 子标签：属于下拉列表中的一个选项（一个条目）。<ul><li>属性selected ：勾选当前列表项 | value ：发送给服务器的选项值</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 下拉列表 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multiple<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 列表项 --></span>        &lt;option value ="beijing">北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        &lt;option value ="shanghai">上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        &lt;option value ="guangzhou">广州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        &lt;option value ="shenzhen">深圳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        &lt;option value ="hangzhou">杭州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        &lt;option value ="tianjin">天津<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h2 id="1-4-多行文本域"><a href="#1-4-多行文本域" class="headerlink" title="1.4 多行文本域"></a>1.4 多行文本域</h2><p><img src="/2020/03/23/day31html-css/%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E5%9F%9F.png" alt></p><p><code>&lt;textarea&gt;</code> 文本域。多行的文本输入控件。</p><ul><li>cols属性：文本域的列数</li><li>rows属性：文本域的行数</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 多行文本域 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>area<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h2 id="1-5-提交方式区别"><a href="#1-5-提交方式区别" class="headerlink" title="1.5 提交方式区别"></a>1.5 提交方式区别</h2><p><img src="/2020/03/23/day31html-css/%E6%8F%90%E4%BA%A4%E6%96%B9%E5%BC%8F%E5%8C%BA%E5%88%AB.png" alt></p><p>服务器提交方式GET和POST区别</p><ul><li>GET:<br>表单提交的参数,放在浏览器地址栏, 暴露敏感数据; 浏览器的地址栏数据有限的,不适合提交过大的数据<pre><code>  ?user=tom&amp;pass=123&amp;gender=女&amp;hobby=抽烟&amp;hobby=喝酒 数据的格式 k=v 多个键值对使用 &amp; 分割 服务器获取提交的数据,依靠是键</code></pre></li><li>POST:<br>表单提交的参数,不会显示在地址栏上; 不会暴露敏感信息; 没有数据大小的限制</li></ul><p>HTTP协议区别:</p><ul><li>GET: 参数放在请求行</li><li>POST: 参数放在请求体</li></ul><h2 id="1-6-div标签span标签"><a href="#1-6-div标签span标签" class="headerlink" title="1.6 div标签span标签"></a>1.6 div标签span标签</h2><ul><li><p>div标签: div 块级元素标签</p><ul><li>霸占屏幕的一行, 就是页面中的一个行</li><li>配合CSS样式表使用</li></ul></li><li><p>span标签: span 行级元素标签</p><ul><li>不会占屏幕一行</li><li>配合CSS样式表</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是span标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h2 id="1-7-css样式作用和语法"><a href="#1-7-css样式作用和语法" class="headerlink" title="1.7 css样式作用和语法"></a>1.7 css样式作用和语法</h2><p>CSS (Cascading Style Sheets) ：指层叠样式表.  指使用不同的添加方式，给同一个HTML标签添加样式，最后所有的样式都叠加到一起，共同作用于该标签。类似于我们使用的美颜相机.</p><p><img src="/2020/03/23/day31html-css/%E7%BE%8E%E9%A2%9C%E7%9B%B8%E6%9C%BA.png" alt></p><ul><li><p>主要用于设置HTML页面中的文本内容（字体、大小、对其方式等）、图片的外形（高宽、边框样式、边距等）以及版面的布局等外观显示样式。</p></li><li><p>作用: 美化页面作用. HTML负责显示数据, CSS负责美化效果</p></li><li><p>语法结构</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器</span><span class="token punctuation">{</span>    属性名<span class="token punctuation">:</span>属性值<span class="token punctuation">;</span>    属性名<span class="token punctuation">:</span>属性值<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>选择器: 指定对HTML的哪个标签起作用</li></ul><pre class=" language-html"><code class="language-html">div {    width: 200px;    height: 200px;    border: red 1px solid;}</code></pre></li></ul><h2 id="1-8-css引入方式"><a href="#1-8-css引入方式" class="headerlink" title="1.8 css引入方式"></a>1.8 css引入方式</h2><h3 id="1-8-1-css引入方式一-行内"><a href="#1-8-1-css引入方式一-行内" class="headerlink" title="1.8.1 css引入方式一_行内"></a>1.8.1 css引入方式一_行内</h3><ul><li>行内样式:  <ul><li>在HTML标签中添加属性 style=”属性:属性值”</li><li>作用域最小,作用当前标签; 行内样式的优先级最高</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>h3标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="1-8-2-css引入方式二-内部"><a href="#1-8-2-css引入方式二-内部" class="headerlink" title="1.8.2 css引入方式二_内部"></a>1.8.2 css引入方式二_内部</h3><ul><li>内部样式:<ul><li>在HTML页面里面写CSS代码, 一般写在<head>中, 使用标签 style , 属性: type=”text/css”</head></li><li>作用是当前整个页面有效</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">h3</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> chocolate<span class="token punctuation">;</span><span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>h3标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="1-8-3-css引入方式三-外部"><a href="#1-8-3-css引入方式三-外部" class="headerlink" title="1.8.3 css引入方式三_外部"></a>1.8.3 css引入方式三_外部</h3><ul><li>外部样式:<ul><li>CSS样式定义在另一个文件中,后缀名.css (文本文件)</li><li>在HTML页面中,引入样式表,  使用link标签  写在head中<ul><li>属性: href=”css文件路径” | type=”text/css” | rel=”引入的文件和当前页面是什么关系” </li></ul></li><li>作用范围最大,哪个页面引入,哪个有效</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/1.css<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>h3标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>css/1.css</p><pre class=" language-css"><code class="language-css"><span class="token selector">h3</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="1-9-css选择器"><a href="#1-9-css选择器" class="headerlink" title="1.9 css选择器"></a>1.9 css选择器</h2><h3 id="1-9-1-css基本选择器"><a href="#1-9-1-css基本选择器" class="headerlink" title="1.9.1 css基本选择器"></a>1.9.1 css基本选择器</h3><p>选择器就是对HTML标签设置样式作用</p><ul><li><p>标签元素选择器<br>用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。<br>其基本语法格式如下：<code>标签名 {属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }</code></p></li><li><p>ID选择器<br>id选择器使用“#”进行标识，后面紧跟id名.<br>其基本语法格式如下：<code>#id名 {属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }</code><br>需要在html标签上,添加属性id=”选择器名”, 配合ID选择器进行使用</p></li><li><p>==class选择器,类选择器==<br>类选择器使用“.”（英文点号）进行标识，后面紧跟类名<br>其基本语法格式如下：<code>.类名 {属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }</code><br>需要在html标签上,添加属性class=”选择器名”, 配合class选择器进行使用</p></li></ul><pre class=" language-http"><code class="language-http"> 注意:     尽量不要使用ID选择器,如果需要使用ID选择器. 要保证：ID的属性值具有唯一性     因为后面学习的JavaScript技术中: 对象document中的方法getElementById("one"), 会把标签变成对象,只要找到第一个了,后面就不找了. 所以,ID的属性值要唯一.       当使用ID选择器和class选择器, 对同一个标签设置相同属性时, ID选择器 优先级高于 class选择器</code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token comment" spellcheck="true">/*标签元素选择器,选择器名字和标签名相同*/</span>            <span class="token selector">h1</span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/*ID选择器*/</span>            <span class="token selector"><span class="token id">#one</span></span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/*class选择器*/</span>            <span class="token selector"><span class="token class">.two</span></span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>789<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>789<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="1-9-2-css属性选择器"><a href="#1-9-2-css属性选择器" class="headerlink" title="1.9.2 css属性选择器"></a>1.9.2 css属性选择器</h3><p>属性选择器，在标签后面使用中括号标记</p><p>其基本语法格式如下：<code>标签名[标签属性=’标签属性值’] {属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }</code></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">input<span class="token attribute">[type="text"]</span></span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">input<span class="token attribute">[type="password"]</span></span><span class="token punctuation">{</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        密　码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="1-9-3-css包含选择器"><a href="#1-9-3-css包含选择器" class="headerlink" title="1.9.3 css包含选择器"></a>1.9.3 css包含选择器</h3><p>包含选择器，两个标签之间使用空格，给指定父标签的后代标签设置样式，可以方便在区域内编写样式。</p><p>其基本语法格式如下：<code>父标签 后代标签{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }</code></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">div span</span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>div中的span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>就是span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="1-9-4-css伪元素选择器"><a href="#1-9-4-css伪元素选择器" class="headerlink" title="1.9.4 css伪元素选择器"></a>1.9.4 css伪元素选择器</h3><p>CSS 伪元素用于将特殊的效果添加到某些选择器。例如: 超链接的不同状态都可以指定不同的效果.</p><ul><li>四个状态: 没点过,点过,鼠标悬浮,激活</li><li>样式: 固定顺序  l-v-h-a</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">a<span class="token pseudo-class">:link</span></span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#333333</span><span class="token punctuation">;</span> <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*没点过*/</span>            <span class="token selector">a<span class="token pseudo-class">:visited</span></span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#333333</span><span class="token punctuation">;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*点过*/</span>            <span class="token selector">a<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*鼠标悬浮*/</span>            <span class="token selector">a<span class="token pseudo-class">:active</span></span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*激活*/</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.itheima.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>黑马<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="1-10-css常用属性"><a href="#1-10-css常用属性" class="headerlink" title="1.10 css常用属性"></a>1.10 css常用属性</h2><h3 id="1-10-1-css边框属性"><a href="#1-10-1-css边框属性" class="headerlink" title="1.10.1 css边框属性"></a>1.10.1 css边框属性</h3><ul><li>border ：设置边框的样式<ul><li>格式：宽度 样式 颜色</li><li>例如：style=”border:1px solid #ff0000”  ，1像素实边红色。</li><li>样式取值：solid 实线，none 无边，double 双线 等</li><li>可以有border-right、left 、top、bottom</li></ul></li><li>width、height：用于设置标签的宽度、高度。</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">div</span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*设置边框 粗细,样式,颜色(实线,虚线,点划线,双实线)*/</span>                <span class="token comment" spellcheck="true">/*border-right: 5px  solid yellow;*/</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid  blue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="1-10-2-css转换属性"><a href="#1-10-2-css转换属性" class="headerlink" title="1.10.2 css转换属性"></a>1.10.2 css转换属性</h3><p>语法格式: <code>选择器{display:属性值}</code><br>常用的属性值：</p><ul><li>inline：此元素将显示为行内元素（行内元素默认的display属性值）, 常见行内元素有: <code>&lt;span&gt;、&lt;a&gt;</code></li><li>block：此元素将显为块元素（块元素默认的display属性值）,常见块元素有:<code>&lt;div&gt;、&lt;h1&gt;、&lt;ul&gt;</code></li><li>none：此元素将被隐藏，不显示，也不占用页面空间。</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> 2        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>3        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是隐藏的div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="1-10-3-css字体属性"><a href="#1-10-3-css字体属性" class="headerlink" title="1.10.3 css字体属性"></a>1.10.3 css字体属性</h3><p>常用的属性值：</p><ul><li>font-size:文本大小</li><li>font-family: 字体</li><li>color: 颜色</li><li>size: 大小</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">div</span><span class="token punctuation">{</span>                <span class="token property">font-family</span><span class="token punctuation">:</span> 楷体<span class="token punctuation">;</span>                <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">32</span>px<span class="token punctuation">;</span>                <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="1-10-4-css背景属性"><a href="#1-10-4-css背景属性" class="headerlink" title="1.10.4 css背景属性"></a>1.10.4 css背景属性</h3><p>常用的属性值：</p><ul><li>background-color 背景色</li><li>background-image 背景图</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token comment" spellcheck="true">/*            body{                background-color: red;                background-image: url(img/btn.jpg);            }*/</span>            <span class="token selector">div</span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>                <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(img/btn.jpg)</span><span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="1-10-5-css浮动属性"><a href="#1-10-5-css浮动属性" class="headerlink" title="1.10.5 css浮动属性"></a>1.10.5 css浮动属性</h3><p><img src="/2020/03/23/day31html-css/css%E6%B5%AE%E5%8A%A8%E5%B1%9E%E6%80%A7.png" alt></p><p>通常默认的排版方式，将页面中的元素从上到下一一罗列，而实际开发中，需要左右方式进行排版，就需要使用浮动</p><ul><li>使用浮动: <code>选择器{float:属性值;}</code></li><li>常用属性值：left：元素向左浮动 | right：元素向右浮动 | none：元素不浮动（默认值）</li></ul><p>由于浮动元素不再占用原文档流的位置，所以它会对页面中其他元素的排版产生影响。如果要避免影响，需要使用clear属性进行清除浮动。</p><ul><li>清除浮动: <code>选择器{clear:属性值;}</code></li><li>常用属性值：<ul><li>left：不允许左侧有浮动元素（清除左侧浮动的影响）</li><li>right：不允许右侧有浮动元素（清除右侧浮动的影响）</li><li>both：同时清除左右两侧浮动的影响 </li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">div</span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px red solid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>                <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.top</span> </span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.bottom</span> </span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">600</span>px<span class="token punctuation">;</span>                <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上边div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左边div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/btn.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右边div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下边div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="1-10-6-css盒子模型"><a href="#1-10-6-css盒子模型" class="headerlink" title="1.10.6 css盒子模型"></a>1.10.6 css盒子模型</h3><p><img src="/2020/03/23/day31html-css/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png" alt></p><p>什么是盒子模型:  CSS的 框模型 (Box Model) 规定了元素框 处理元素内容、内边距、边框 和 外边距 的方式。</p><ul><li>边框 border<ul><li>也可以使用下面四个单端的属性, 分别设置上、右、下、左 的边框：</li><li>border-top-style | border-right-style | border-bottom-style | border-left-style</li></ul></li><li>外边距：margin, 设置不同元素之间, 它们边框与边框之间的距离<ul><li>也通过使用下面四个单独的属性，分别设置上、右、下、左 的外边框：</li><li>margin-top | margin-right | margin-bottom | margin-left </li></ul></li><li>内边距 padding, 设置元素边框与元素内容之间的距离<ul><li>也通过使用下面四个单独的属性，分别设置上、右、下、左 的内边距：</li><li>padding-top | padding-right | padding-bottom | padding-left</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">div</span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px red solid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>                <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/* css盒子模型 */</span>            <span class="token selector"><span class="token class">.box_model</span></span><span class="token punctuation">{</span>                <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* 边框 */</span>                <span class="token property">border</span><span class="token punctuation">:</span> red <span class="token number">10</span>px solid<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* 外边距 */</span>                <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* 内边距 */</span>                <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>                <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.top</span> </span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.bottom</span> </span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">600</span>px<span class="token punctuation">;</span>                <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上边div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左边div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box_model<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/btn.jpg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右边div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下边div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>css盒子模型框模型 (Box Model) 多属性值使用:</p><ul><li>margin: 50px;  上下左右</li><li>margin: 10px 50px;  上下 10 , 左右50</li><li>margin: 10px 20px 30px; 上10 ,左右20, 下30</li><li>margin: 10px 20px 30px 40px;  顺时针 上 右  下 左</li><li>margin: 0 auto; 上下0, 左右距离自动调整(居中)</li></ul><p><img src="/2020/03/23/day31html-css/css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E5%A4%9A%E5%B1%9E%E6%80%A7%E5%80%BC%E4%BD%BF%E7%94%A8.png" alt></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">div </span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> red <span class="token number">1</span>px solid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.top</span> </span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.bottom</span> </span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>                <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* margin: 0 auto; 上下0, 左右距离自动调整(居中) */</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>                <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/* css盒子模型框模型 (Box Model) 多属性值使用 */</span>            <span class="token selector"><span class="token class">.box_model</span> </span><span class="token punctuation">{</span>                <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* margin: 50px; 上下左右 */</span>                <span class="token comment" spellcheck="true">/* margin: 10px 50px;  上下 10 , 左右50 */</span>                <span class="token comment" spellcheck="true">/* margin: 10px 20px 30px; 上10 ,左右20, 下30 */</span>                <span class="token comment" spellcheck="true">/* margin: 10px 20px 30px 40px;  顺时针 上 右  下 左 */</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上边div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左边div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box_model<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/btn.jpg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右边div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下边div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="1-11-注册页面案例"><a href="#1-11-注册页面案例" class="headerlink" title="1.11 注册页面案例"></a>1.11 注册页面案例</h2><p>所有的html标签中，表单标签是最重要的。在实际开发中，最经典的实例就是用户注册，覆盖了表单标签的所有的元素。效果图如下：    </p><p><img src="/2020/03/23/day31html-css/%E6%B3%A8%E5%86%8C%E8%A1%A8%E5%8D%952.png" alt></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token comment" spellcheck="true">/* 设置表单的div样式 */</span>            <span class="token selector"><span class="token class">.form</span> </span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">550</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token hexcode">#333333</span> solid<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">div span </span><span class="token punctuation">{</span>                <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#0000FF</span><span class="token punctuation">;</span>                <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">22</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">body </span><span class="token punctuation">{</span>                <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(img/bg.jpg)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>用户注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>USERREGISTER<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>密　码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pass<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>性　别:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>男                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>女                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>验证码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/checkcode.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/btn.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day30html</title>
      <link href="/2020/03/22/day30html/"/>
      <url>/2020/03/22/day30html/</url>
      
        <content type="html"><![CDATA[<h1 id="day30html"><a href="#day30html" class="headerlink" title="day30html"></a>day30html</h1><h2 id="1-1-HTML-简述"><a href="#1-1-HTML-简述" class="headerlink" title="1.1 HTML 简述"></a>1.1 HTML 简述</h2><h3 id="1-1-1-什么是HTML"><a href="#1-1-1-什么是HTML" class="headerlink" title="1.1.1  什么是HTML"></a>1.1.1  什么是HTML</h3><p><img src="/2020/03/22/day30html/03.png" alt></p><p>HTML：超级文本标记语言（HyperText Markup Language）</p><ul><li><p>“超文本”就是指页面内可以包含图片、链接等非文字内容。</p></li><li><p>“标记”就是使用标签的方法将需要的内容包括起来。例如：<code>&lt;a&gt;www.itcast.cn&lt;/a&gt;</code></p></li></ul><h3 id="1-1-2-HTML能干什么"><a href="#1-1-2-HTML能干什么" class="headerlink" title="1.1.2 HTML能干什么"></a>1.1.2 HTML能干什么</h3><p>HTML用于编写网页。平时上网通过浏览器我们看到的大部分页面都是由html编写的。在浏览器访问网页时，可以通过“右键/查看网页源代码”看到具体的html代码。</p><p>网页内容包含：HTML代码、CSS代码、JavaScript代码等内容。</p><ul><li><p>HTML代码：用于展示需要显示的数据。</p></li><li><p>CSS代码：使显示的数据更佳好看。</p></li><li><p>JavaScript代码：使整个页面显示的数据具有动画效果。</p></li></ul><p>网页根据内容是否改变分为：静态页面、动态页面</p><ul><li><p>静态页面：编写之后在浏览器不再改变的网页。HTML就是用于编写静态网页的。</p></li><li><p>动态页面：会根据不同的情况展示不同的内容。例如：登录成功后右上角显示用户名。</p></li></ul><h3 id="1-1-3-HTML语言特点"><a href="#1-1-3-HTML语言特点" class="headerlink" title="1.1.3 HTML语言特点"></a>1.1.3 HTML语言特点</h3><ul><li><p>HTML文件不需要编译，直接使用浏览器阅读即可</p></li><li><p>HTML文件的扩展名是*.html 或 *.htm</p></li><li><p>HTML结构都是由标签组成</p><ul><li>标签名预先定义好的，我们只需要了解其功能即可。</li><li>标签名不区分大小写</li><li>通常情况下标签由开始标签和结束标签组成。例如：<a></a></li><li>如果没有结束标签，建议以/结尾。例如：<img></li></ul></li><li><p>HTML结构包括两部分：头head和体body</p></li></ul><h3 id="1-1-4-HTML入门代码"><a href="#1-1-4-HTML入门代码" class="headerlink" title="1.1.4 HTML入门代码"></a>1.1.4 HTML入门代码</h3><ol><li><p>创建“文本文档”，重命名“xxx.html”。文件名自定义，扩展名为html。</p></li><li><p>右键/打开方式/记事本，开发html文件，并编写如下内容</p></li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>这是标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        这里是正文    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>以上使用的标签组成了HTML页面的基本结构，现将所有标签进行陈述：</p><ul><li><p><code>&lt;html&gt;</code> 整个页面的根标签，理论上一个页面只需要一个，由头和体组成。</p></li><li><p><code>&lt;head&gt;</code>头标签，用于引入脚本、导入样式、提供元信息等。一般情况下头标签的内容在浏览器端都不显示。</p></li><li><p><code>&lt;body&gt;</code>体标签，是整个网页的主体，我们编写的html代码基本都在此标签体内。</p></li></ul><ol><li>使用浏览器打开</li></ol><p><img src="/2020/03/22/day30html/04.png" alt></p><h3 id="1-1-5-环境搭建HBuilder"><a href="#1-1-5-环境搭建HBuilder" class="headerlink" title="1.1.5 环境搭建HBuilder"></a>1.1.5 环境搭建HBuilder</h3><p>使用“记事本”开发效率低，现阶段比较流程的前端IDE（集成开发环境）是HBuilder，</p><p>提供模板代码，使用“HBuilder”创建01.模板.html页面。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- 设置html页面的编码，今天最后讲解--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        正文    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在模板代码中，我们使用到了HTML注释</p><ul><li><p>格式：<!--注释内容 --></p></li><li><p>注释特点：</p><ul><li>浏览器查看时，不显示。右键查看源码可以看到。</li><li>注释标签不能嵌套。</li><li>注释特殊用法，为不同的浏览器提供不同的解决方案 （了解）</li></ul></li></ul><h2 id="1-2-基本标签"><a href="#1-2-基本标签" class="headerlink" title="1.2 基本标签"></a>1.2 基本标签</h2><p>下面我们开始一个一个的介绍，为了方便演示，创建一个“01.demo.html”文件</p><h3 id="1-2-1-标题标签：-lt-hr-gt"><a href="#1-2-1-标题标签：-lt-hr-gt" class="headerlink" title="1.2.1 标题标签：&lt;hr /&gt;"></a>1.2.1 标题标签：<code>&lt;hr /&gt;</code></h3><p><code>&lt;hr /&gt;</code> 标签在 HTML 页面中创建一条水平分隔线，用于定义内容中的主题变化。</p><ul><li><p>size属性：水平线的高度，单位像素</p></li><li><p>noshade属性：没有阴影，取值：noshade，表示显示纯色</p></li><li><p>color属性：颜色</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--水平线--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span>  <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">noshade</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>noshade<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p><img src="/2020/03/22/day30html/05.png" alt></p><h3 id="1-2-2-字体标签-：-lt-font-gt"><a href="#1-2-2-字体标签-：-lt-font-gt" class="headerlink" title="1.2.2 字体标签 ：&lt;font&gt;"></a>1.2.2 字体标签 ：<code>&lt;font&gt;</code></h3><p><code>&lt;font&gt;</code> 用于设置字体尺寸、字体颜色等。</p><ul><li><p>size属性：设置字体的大小。可能的值：从 1 到 7 的数字。浏览器默认值是 3。</p></li><li><p>color属性：设置字体的颜色</p><ul><li><p>颜色的取值：#xxxxxx  或 colorname</p></li><li><p>#xxxxxx 表示使用红绿蓝三原色设置颜色。</p><ul><li>红绿蓝分别取值：00 – FF，此处使用16进制。（FF就是十进制的255）</li><li>#000000 表示黑色，#FFFFFF白色</li><li>#FF0000红色，#00FF00绿色，#0000FF蓝色</li><li>红绿蓝2位取值相同可以省略成1位。例如：#112233 简化成#123</li></ul></li><li><p>colorname 使用英文单词确定颜色。red 红色，blue 蓝色，green绿色</p></li></ul></li><li><p>face属性：设置字体</p></li></ul><h3 id="1-2-3-格式化标签：-lt-b-gt-lt-i-gt"><a href="#1-2-3-格式化标签：-lt-b-gt-lt-i-gt" class="headerlink" title="1.2.3 格式化标签： &lt;b&gt; &lt;i&gt;"></a>1.2.3 格式化标签： <code>&lt;b&gt; &lt;i&gt;</code></h3><p><code>&lt;b&gt;</code>粗体</p><p><code>&lt;i&gt;</code>斜体</p><p><code>&lt;u&gt;</code>下划线</p><h3 id="1-2-4-段落标签：-lt-p-gt-lt-br-gt"><a href="#1-2-4-段落标签：-lt-p-gt-lt-br-gt" class="headerlink" title="1.2.4 段落标签：&lt;p&gt; &lt;br/&gt;"></a>1.2.4 段落标签：<code>&lt;p&gt; &lt;br/&gt;</code></h3><p><code>&lt;p&gt;</code>定义段落。p 标签会自动在其前后创建一些空白。</p><p><code>&lt;br /&gt;</code>插入单个换行。</p><h3 id="1-2-5-图片标签：-lt-img-gt"><a href="#1-2-5-图片标签：-lt-img-gt" class="headerlink" title="1.2.5 图片标签：&lt;img&gt;"></a>1.2.5 图片标签：<code>&lt;img&gt;</code></h3><p><code>&lt;img&gt;</code>在html页面中引用一张图片</p><ul><li><p>src ：指定需要显示图片的URL（路径）。 </p></li><li><p>alt ：图片无法显示时的替代文本。 </p></li><li><p>width ：设置图像的宽度。 </p></li><li><p>height ：定义图像的高度。</p></li><li><p>title: 图片标题,鼠标悬停提示</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--显示图片“registImg.jpg”--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/registImg.jpg<span class="token punctuation">"</span></span>  <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>剁手不够解恨<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>鼠标移上显示<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/registImg2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>剁手不够解恨<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>鼠标移上显示<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p><img src="/2020/03/22/day30html/08.png" alt></p><h3 id="1-2-6-列表标签：-lt-ol-gt-lt-ul-gt"><a href="#1-2-6-列表标签：-lt-ol-gt-lt-ul-gt" class="headerlink" title="1.2.6 列表标签：&lt;ol&gt;&lt;ul&gt;"></a>1.2.6 列表标签：<code>&lt;ol&gt;&lt;ul&gt;</code></h3><ul><li><p><code>&lt;ol&gt;</code> 定义有序列表。 </p><ul><li>type 列表类型，取值：A、a 、I 、i 、1 等</li></ul></li><li><p><code>&lt;ul&gt;</code> 定义无序列表。 </p><ul><li>type 符号的类型，取值：disc 实心圆、square 方块 、circle 空心圆</li></ul></li><li><p><code>&lt;li&gt;</code> 定义列表项。 是<code>&lt;ul&gt;</code> 或<code>&lt;ol&gt;</code> 的子标签</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--列表标签--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--以“空心圆”显示无序列表--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>无序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>无序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>无序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>I<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--以大写阿拉伯数字显示序号--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>有序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>有序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>有序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/03/22/day30html/111.png" alt></p><h3 id="1-2-7-超链接标签-lt-a-gt"><a href="#1-2-7-超链接标签-lt-a-gt" class="headerlink" title="1.2.7 超链接标签&lt;a&gt;"></a>1.2.7 超链接标签<code>&lt;a&gt;</code></h3><p><code>&lt;a&gt;</code>标签是超链接，是在html页面提供一种可以访问其他位置的实现方式。</p><ul><li>href：用于确定需要显示页面的路径（URL）<ul><li>target：确定以何种方式打开href所设置的页面。常用取值：_blank、_self 等</li><li>_blank 在新窗口中打开href确定的页面。 </li><li>_self 默认。使用href确定的页面替换当前页面。</li></ul></li></ul><h3 id="1-2-8-表格标签-lt-table-gt-lt-tr-gt-lt-td-gt"><a href="#1-2-8-表格标签-lt-table-gt-lt-tr-gt-lt-td-gt" class="headerlink" title="1.2.8 表格标签&lt;table&gt;&lt;tr&gt;&lt;td&gt;"></a>1.2.8 表格标签<code>&lt;table&gt;&lt;tr&gt;&lt;td&gt;</code></h3><p>HTML表格由<table>标签以及一个或多个<tr>、<th>或</th><td>标签组成。</td></tr></table></p><ul><li><code>&lt;table&gt;</code> 是父标签，相当于整个表格的容器。<ul><li>border  表格边框的宽度。 </li><li>width 表格的宽度。</li><li>height 表格的高度</li><li>cellpadding 单元边沿与其内容之间的空白。</li><li>cellspacing 单元格之间的空白。 </li><li>bgcolor 表格的背景颜色。</li><li>align: 显示位置  居中 center 居左 left 居右 right</li><li>bordercolor: 边框颜色</li></ul></li></ul><ul><li><p><code>&lt;tr&gt;</code>标签用于定义行</p></li><li><p><code>&lt;td&gt;</code>标签用于定义表格的单元格（一个列）</p><ul><li>colspan 单元格可横跨的列数。</li><li>rowspan  单元格可横跨的行数。 </li><li>align 单元格内容的水平对齐方式, 取值：left 左 、right 右、center 居中。</li><li>nowrap 单元格中的内容是否折行。</li></ul></li><li><p><code>&lt;th&gt;</code>标签用于定义表头。单元格内的内容默认居中、加粗。</p></li></ul><h3 id="1-2-9-案例-网站首页显示"><a href="#1-2-9-案例-网站首页显示" class="headerlink" title="1.2.9 案例 网站首页显示"></a>1.2.9 案例 网站首页显示</h3><h3 id="案例介绍"><a href="#案例介绍" class="headerlink" title="案例介绍"></a>案例介绍</h3><p>为了让大家熟练的应用表格布局，本案例我们将使用表格完成比较复杂的首页编写。</p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><h4 id="知识点分析"><a href="#知识点分析" class="headerlink" title="知识点分析"></a>知识点分析</h4><p>根据对首页页面的分析，我们将采用表格嵌套的方式绘制。首页绘制一个7<em>1的表格用于作为外围的整体结构，然后给每一行分别添加表格绘制自己的模块，有1</em>3表格，有2*7表格。对于第三行轮播条暂时不编写，需要使用js。（前端课程 第3天和第4天讲解）</p><p><img src="/2020/03/22/day30html/17.png" alt></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>10_黑马商城<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            黑马logo,正品保证  2张图片            登录,注册,购物车   3个超链接            表格:                1行*3列        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1200<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--黑马logo--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/logo2.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--正品保证--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/header.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--登录,注册,购物车   3个超链接--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>购物车<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            导航菜单,文本输入框(不做),按钮(不做)            表格:                1行*1列        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1200<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>black<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- 导航菜单 几个超链接--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>手机数码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>电脑办公<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>户外用品<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--            轮播图            表格:                1行*1列        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1200<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1200<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            热门商品,精心为您推荐(图片)            表格:                1行*1列        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1200<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>热门商品<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/title2.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            商品展示区:            表格:                2行*7列        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1200<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 0元购 跨2行--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/big01.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 投影神券 跨3列--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/middle01.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 冬瓜 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/small03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    冬瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>￥299.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span>  <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/small03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    冬瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>￥299.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span>  <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/small03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    冬瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>￥299.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--&lt;td>&lt;/td>                &lt;td>&lt;/td>--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--&lt;td>&lt;/td>--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span>  <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/small03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    冬瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>￥299.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span>  <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/small03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    冬瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>￥299.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span>  <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/small03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    冬瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>￥299.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span>  <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/small03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    冬瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>￥299.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span>  <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/small03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    冬瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>￥299.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span>  <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/small03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    冬瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>￥299.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            宠物超市            表格:                1行*1列        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1200<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/ad.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            热门商品,精心为您推荐(图片)            表格:                1行*1列        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1200<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>热门商品<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/title2.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            商品展示区:            表格:                2行*7列        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1200<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 0元购 跨2行--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/big01.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 投影神券 跨3列--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/middle01.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 冬瓜 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/small03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    冬瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>￥299.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span>  <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/small03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    冬瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>￥299.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span>  <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/small03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    冬瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>￥299.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--&lt;td>&lt;/td>                &lt;td>&lt;/td>--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--&lt;td>&lt;/td>--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span>  <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/small03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    冬瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>￥299.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span>  <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/small03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    冬瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>￥299.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span>  <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/small03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    冬瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>￥299.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span>  <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/small03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    冬瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>￥299.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span>  <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/small03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    冬瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>￥299.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span>  <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/small03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    冬瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>￥299.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            正品保障            表格:                1行*1列        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1200<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1200<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/footer.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--            关于我们    超链接    版权所有    文字            表格:                1行*1列        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1200<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>关于我们<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>联系我们<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>招贤纳士<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>法律声明<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>友情链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>支付方式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>配送方式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>服务声明<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>广告声明<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    Copyright © 2005-2016传智播客版权所有                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="1-2-9-框架集"><a href="#1-2-9-框架集" class="headerlink" title="1.2.9 框架集"></a>1.2.9 框架集</h3><p>frameset 标签，是多个窗口页面整合在一起的一个集合（框架集）。每一个页面（框架）都是单独文档，需要使用子标签frame来确定页面的位置。frameset通过列和行来确定整体布局，使用cols确定列数，使用rows确定行数。多个frameset可以嵌套使用。</p><ul><li><p>frameset和body两个不能共存。</p></li><li><p>rows属性和cols属性取值：值1,值2,值3,….. 一个值表示一行（列），多值使用逗号分隔，值可以是 10px、10% 等，最后一个值如果不想计算可以使用*匹配剩余量。</p></li></ul><p>frame标签，用于设置frameset框架集中的一个页面（框架）。</p><ul><li><p>src属性：确定页面的路径</p></li><li><p>noresize属性：框架分隔先不能移动</p></li><li><p>target属性：确定需要显示的页面在何处显示</p></li><li><p>示例代码</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--      整体页面进行分隔:          rows: 按行分隔          80,*: 上半部分占80像素,下半部分占所有          a.html: 上半部分对应的网页  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frameset</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80,*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--          对下半部分进行分隔:              cols: 按列分隔              150,*:左半部分占150像素,右半部分占所有              b.html: 左半部分对应的网页                  c.html: 右半部分对应的网页          --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frameset</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150,*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lower_left<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lower_right<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>frameset</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>frameset</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>示例图<br><img src="/2020/03/22/day30html/222.png" alt></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day29-事务-ThreadLocal</title>
      <link href="/2020/03/18/day29-shi-wu-threadlocal/"/>
      <url>/2020/03/18/day29-shi-wu-threadlocal/</url>
      
        <content type="html"><![CDATA[<h1 id="day29-事务-amp-ThreadLocal"><a href="#day29-事务-amp-ThreadLocal" class="headerlink" title="day29-事务&amp;ThreadLocal"></a>day29-事务&amp;ThreadLocal</h1><h2 id="1-1-事务"><a href="#1-1-事务" class="headerlink" title="1.1 事务"></a>1.1 事务</h2><h3 id="1-1-1-事务概述"><a href="#1-1-1-事务概述" class="headerlink" title="1.1.1 事务概述"></a>1.1.1 事务概述</h3><p>事务指的是逻辑上的一组操作,组成这组操作的各个单元要么全都成功,要么全都失败.</p><a id="more"></a><p>事务作用：保证在一个事务中多次SQL操作要么全都成功,要么全都失败.</p><h3 id="1-1-2-mysql事务操作"><a href="#1-1-2-mysql事务操作" class="headerlink" title="1.1.2 mysql事务操作"></a>1.1.2 mysql事务操作</h3><p><img src="/2020/03/18/day29-shi-wu-threadlocal/01.png" alt></p><p>MYSQL中可以有两种方式进行事务的管理：</p><ul><li>自动提交：MySql默认自动提交。及执行一条sql语句提交一次事务。</li><li>手动提交：先开启，再提交</li></ul><h3 id="1-1-3-jdbc事务操作"><a href="#1-1-3-jdbc事务操作" class="headerlink" title="1.1.3 jdbc事务操作"></a>1.1.3 jdbc事务操作</h3><p><img src="/2020/03/18/day29-shi-wu-threadlocal/02.png" alt></p><p>代码演示</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Account</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//提示变量的作用域</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.获取连接Connection对象</span>            con <span class="token operator">=</span> C3P0Util<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.Connection对象开启事务</span>            con<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.Connection对象获取执行sql语句的Statement对象</span>            stmt <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.定义2条sql语句(2条update语句:扣款,收款)</span>            String tomSql <span class="token operator">=</span> <span class="token string">"update account set money=money-1000 where name='tom'"</span><span class="token punctuation">;</span>            String jerrySql <span class="token operator">=</span> <span class="token string">"update account set money=money+1000 where name='jerry'"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.Statement对象执行sql语句,获取结果</span>            <span class="token keyword">int</span> tomResult <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>tomSql<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//出了异常</span>            <span class="token keyword">int</span> jerryResult <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>jerrySql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//7.处理结果</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tomResult<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tom账户成功扣款1000元~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tom账户扣款1000元失败~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>jerryResult<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jerry账户收款1000元成功~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jerry账户收款1000元失败~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//6.如果sql语句正常执行,没有出现问题,提交事务</span>            con<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//8.如果sql语句执行过程中出现问题,回滚事务</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>con<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    con<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//9.关闭资源</span>            C3P0Util<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span>stmt<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-1-4-DBUtils事务操作"><a href="#1-1-4-DBUtils事务操作" class="headerlink" title="1.1.4 DBUtils事务操作"></a>1.1.4 DBUtils事务操作</h3><p><img src="/2020/03/18/day29-shi-wu-threadlocal/03.png" alt></p><p>代码演示</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04Account</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.空参构造创建QueryRunner对象</span>            QueryRunner qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.获取连接对象</span>            con <span class="token operator">=</span> C3P0Util<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.连接对象开启事务</span>            con<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义2条sql语句(2条update语句:扣款,收款)</span>            String tomSql <span class="token operator">=</span> <span class="token string">"update account set money=money-? where name=?"</span><span class="token punctuation">;</span>            String jerrySql <span class="token operator">=</span> <span class="token string">"update account set money=money+? where name=?"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.QueryRunner对象执行sql语句获取结果</span>            <span class="token keyword">int</span> tomResult <span class="token operator">=</span> qr<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> tomSql<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//出异常了</span>            <span class="token keyword">int</span> jerryResult <span class="token operator">=</span> qr<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> jerrySql<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">"jerry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.sql语句正常执行,提交事务,处理结果</span>            DbUtils<span class="token punctuation">.</span><span class="token function">commitAndCloseQuietly</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//提交事务,关闭连接,内部进行try-catch异常处理</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tomResult<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tom账户成功扣款1000元~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tom账户扣款1000元失败~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>jerryResult<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jerry账户收款1000元成功~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jerry账户收款1000元失败~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//6.sql语句出现问题,回滚事务</span>            DbUtils<span class="token punctuation">.</span><span class="token function">rollbackAndCloseQuietly</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//回滚事务,关闭连接,内部进行try-catch异常处理</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-1-5-案例：JDBC事务分层（dao、service、view）"><a href="#1-1-5-案例：JDBC事务分层（dao、service、view）" class="headerlink" title="1.1.5 案例：JDBC事务分层（dao、service、view）"></a>1.1.5 案例：JDBC事务分层（dao、service、view）</h3><p>设计一个页面,输入三个值,一个是付款人,一个是收款人,一个是转账的金额,不能出现付款人的钱被扣而收款人没收到钱的情况发生.而且要使用三层设计思想.</p><p><img src="/2020/03/18/day29-shi-wu-threadlocal/02_%E8%BD%AC%E8%B4%A6%E4%B8%9A%E5%8A%A1%E7%9A%84%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.png" alt></p><ul><li>开发中，常使用分层思想<ul><li>不同的层次结构分配不同的解决过程，各个层次间组成严密的封闭系统</li></ul></li><li>不同层级结构彼此平等</li><li>分层的目的是：<ul><li>解耦</li><li>可维护性</li><li>可扩展性</li><li>可重用性</li></ul></li><li>不同层次，使用不同的包表示<ul><li>com.itheima 公司域名倒写</li><li>com.itheima.dao dao层</li><li>com.itheima.service service层</li><li>com.itheima.domain javabean</li><li>com.itheima.utils 工具</li></ul></li></ul><p>代码实现</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//进账方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span>Connection con<span class="token punctuation">,</span>String inName<span class="token punctuation">,</span><span class="token keyword">double</span> inMoney<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建QueryRunner对象</span>        QueryRunner qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.定义sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"update account set money = money + ? where name = ?"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.执行sql语句</span>        qr<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span>sql<span class="token punctuation">,</span>inMoney<span class="token punctuation">,</span>inName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//出账方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span>Connection con<span class="token punctuation">,</span>String outName<span class="token punctuation">,</span><span class="token keyword">double</span> outMoney<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建QueryRunner对象</span>        QueryRunner qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.定义sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"update account set money = money - ? where name = ?"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.执行sql语句</span>        qr<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span>sql<span class="token punctuation">,</span>outMoney<span class="token punctuation">,</span>outName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>String inName<span class="token punctuation">,</span>String outName<span class="token punctuation">,</span><span class="token keyword">double</span> transferMoney<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.创建AccountDao类的对象</span>            AccountDao dao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.获取连接对象</span>            con <span class="token operator">=</span> C3P0Util<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.开启事务</span>            con<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.调用方法(进账/出账的方法)</span>            <span class="token comment" spellcheck="true">//调用进账方法</span>            dao<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span>inName<span class="token punctuation">,</span>transferMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//出现异常</span>            <span class="token comment" spellcheck="true">//调用出账方法</span>            dao<span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span>outName<span class="token punctuation">,</span>transferMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.方法正常执行,提交事务</span>            con<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//6.方法执行出现问题,回滚事务</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>con<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    con<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//7.关闭资源</span>            C3P0Util<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountPage</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String inName <span class="token operator">=</span> <span class="token string">"jerry"</span><span class="token punctuation">;</span>        String outName <span class="token operator">=</span> <span class="token string">"tom"</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> transferMoney <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用service层</span>        <span class="token comment" spellcheck="true">//创建AccountService类的对象</span>        AccountService service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//AccountService类的对象调用transfer方法,完成转账</span>        service<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>inName<span class="token punctuation">,</span>outName<span class="token punctuation">,</span>transferMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-2-ThreadLocal"><a href="#1-2-ThreadLocal" class="headerlink" title="1.2 ThreadLocal"></a>1.2 ThreadLocal</h2><h3 id="1-2-1-分析"><a href="#1-2-1-分析" class="headerlink" title="1.2.1 分析"></a>1.2.1 分析</h3><p>在“事务传递Connection参数案例”中，我们必须传递Connection对象，才可以完成整个事务操作。如果不传递参数，是否可以完成？在JDK中给我们提供了一个工具类ThreadLocal，此类可以在一个线程中共享数据。java.lang.ThreadLocal 该类提供了线程局部 (thread-local) 变量，用于在当前线程中共享数据</p><p>原理和使用图解<br><img src="/2020/03/18/day29-shi-wu-threadlocal/03_ThreadLocal%E5%8E%9F%E7%90%86.png" alt></p><p>案例实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConnectionManager</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        借助ThreadLocal实现线程中局部变量的数据共享     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ThreadLocal<span class="token operator">&lt;</span>Connection<span class="token operator">></span> tl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">ConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        定义静态方法,获取连接对象        此方法,保证在同一个线程中获取到的是同一个Connection连接对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//首先从ThreadLocal对象中获取Connection对象</span>        Connection con <span class="token operator">=</span> tl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断con是否为null</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>con<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取一个连接对象</span>            con <span class="token operator">=</span> C3P0Util<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//绑定到ThreadLocal中</span>            tl<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> con<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        定义开启事务的方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        定义提交事务的方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        定义回滚事务的方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从ThreadLocal对象中移除</span>        tl<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//进账方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span>String inName<span class="token punctuation">,</span><span class="token keyword">double</span> inMoney<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建QueryRunner对象</span>        QueryRunner qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.定义sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"update account set money = money + ? where name = ?"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.执行sql语句</span>        qr<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>ConnectionManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sql<span class="token punctuation">,</span>inMoney<span class="token punctuation">,</span>inName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//出账方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span>String outName<span class="token punctuation">,</span><span class="token keyword">double</span> outMoney<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建QueryRunner对象</span>        QueryRunner qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.定义sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"update account set money = money - ? where name = ?"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.执行sql语句</span>        qr<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>ConnectionManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sql<span class="token punctuation">,</span>outMoney<span class="token punctuation">,</span>outName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>String inName<span class="token punctuation">,</span>String outName<span class="token punctuation">,</span><span class="token keyword">double</span> transferMoney<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.创建AccountDao类的对象</span>            AccountDao dao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.获取连接对象</span>            con <span class="token operator">=</span> ConnectionManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.开启事务</span>            ConnectionManager<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.调用方法(进账/出账的方法)</span>            <span class="token comment" spellcheck="true">//调用进账方法</span>            dao<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span>inName<span class="token punctuation">,</span>transferMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//System.out.println(1/0);//出现异常</span>            <span class="token comment" spellcheck="true">//调用出账方法</span>            dao<span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span>outName<span class="token punctuation">,</span>transferMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.方法正常执行,提交事务</span>            ConnectionManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//6.方法执行出现问题,回滚事务</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                ConnectionManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//7.关闭资源</span>            C3P0Util<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountPage</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String inName <span class="token operator">=</span> <span class="token string">"jerry"</span><span class="token punctuation">;</span>        String outName <span class="token operator">=</span> <span class="token string">"tom"</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> transferMoney <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用service层</span>        <span class="token comment" spellcheck="true">//创建AccountService类的对象</span>        AccountService service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//AccountService类的对象调用transfer方法,完成转账</span>        service<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>inName<span class="token punctuation">,</span>outName<span class="token punctuation">,</span>transferMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-3-事务总结"><a href="#1-3-事务总结" class="headerlink" title="1.3 事务总结"></a>1.3 事务总结</h2><h3 id="1-3-1-事务特性：ACID"><a href="#1-3-1-事务特性：ACID" class="headerlink" title="1.3.1 事务特性：ACID"></a>1.3.1 事务特性：ACID</h3><ul><li>原子性（Atomicity）原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</li><li>一致性（Consistency）事务前后数据的完整性必须保持一致。</li><li>隔离性（Isolation）事务的隔离性是指多个用户并发访问数据库时，一个用户的事务不能被其它用户的事务所干扰，多个并发事务之间数据要相互隔离。</li><li>持久性（Durability）持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。</li></ul><h3 id="1-3-2-并发访问问题"><a href="#1-3-2-并发访问问题" class="headerlink" title="1.3.2 并发访问问题"></a>1.3.2 并发访问问题</h3><p>如果不考虑隔离性，事务存在3中并发访问问题。</p><ol><li>脏读：一个事务读到了另一个事务未提交的数据.</li></ol><ol start="2"><li>不可重复读：一个事务读到了另一个事务已经提交(update)的数据。引发另一个事务，在事务中的多次查询结果不一致。</li></ol><ol start="3"><li>虚读 /幻读：一个事务读到了另一个事务已经提交(insert)的数据。导致另一个事务，在事务中多次查询的结果不一致</li></ol><h3 id="1-3-3-隔离级别：解决问题"><a href="#1-3-3-隔离级别：解决问题" class="headerlink" title="1.3.3 隔离级别：解决问题"></a>1.3.3 隔离级别：解决问题</h3><ul><li>数据库规范规定了4种隔离级别，分别用于描述两个事务并发的所有情况。</li></ul><ol><li><p>read uncommitted 读未提交，一个事务读到另一个事务没有提交的数据。<br>存在：3个问题（脏读、不可重复读、虚读）。解决：0个问题</p></li><li><p>read committed 读已提交，一个事务读到另一个事务已经提交的数据。<br>存在：2个问题（不可重复读、虚读）。解决：1个问题（脏读）</p></li><li><p>repeatable read:可重复读，在一个事务中读到的数据始终保持一致，无论另一个事务是否提交。存在：1个问题（虚读）。解决：2个问题（脏读、不可重复读）</p></li><li><p>serializable 串行化，同时只能执行一个事务，相当于事务中的单线程。<br>存在：0个问题。解决：3个问题（脏读、不可重复读、虚读）</p></li></ol><h3 id="1-3-4-演示演示"><a href="#1-3-4-演示演示" class="headerlink" title="1.3.4 演示演示"></a>1.3.4 演示演示</h3><ul><li>设置数据库的隔离级别<ul><li>set session transactionisolation level 级别字符串</li><li>级别字符串： readuncommitted 、 read committed 、 repeatable read 、 serializable</li><li>例如： set session transaction isolation level read uncommitted;</li><li>例如： set session transaction isolation level read committed;</li><li>例如： set session transaction isolation level repeatable read;</li><li>例如： set session transaction isolation level serializable;</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day28-jdbc预处理对象-连接池-DBUtils</title>
      <link href="/2020/03/17/day28-jdbc-yu-chu-li-dui-xiang-lian-jie-chi-dbutils/"/>
      <url>/2020/03/17/day28-jdbc-yu-chu-li-dui-xiang-lian-jie-chi-dbutils/</url>
      
        <content type="html"><![CDATA[<h1 id="day28-jdbc预处理对象-amp-连接池-amp-DBUtils"><a href="#day28-jdbc预处理对象-amp-连接池-amp-DBUtils" class="headerlink" title="day28-jdbc预处理对象&amp;连接池&amp;DBUtils"></a>day28-jdbc预处理对象&amp;连接池&amp;DBUtils</h1><h2 id="1-1-PreparedStatement"><a href="#1-1-PreparedStatement" class="headerlink" title="1.1 PreparedStatement"></a>1.1 PreparedStatement</h2><h3 id="1-1-1-SQL注入问题"><a href="#1-1-1-SQL注入问题" class="headerlink" title="1.1.1 SQL注入问题"></a>1.1.1 SQL注入问题</h3><p>SQL注入：用户输入的内容作为了SQL语句语法的一部分，改变了原有SQL真正的意义。<br>假设有登录案例SQL语句如下:</p><a id="more"></a><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM 用户表 WHERE NAME = 用户输入的用户名 AND PASSWORD = 用户输的密码;</code></pre><p>此时，当用户输入正确的账号与密码后，查询到了信息则让用户登录。但是当用户输入的账号为XXX 密码为：<code>XXX’  OR ‘a’=’a</code>时，则真正执行的代码变为：</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM 用户表 WHERE NAME = ‘XXX’ AND PASSWORD =’ XXX’  OR ’a’=’a’;</code></pre><p>此时，上述查询语句时永远可以查询出结果的。那么用户就直接登录成功了，显然我们不希望看到这样的结果，这便是SQL注入问题。为此，我们使用PreparedStatement来解决对应的问题。</p><h3 id="1-1-2-API详解：预处理对象"><a href="#1-1-2-API详解：预处理对象" class="headerlink" title="1.1.2 API详解：预处理对象"></a>1.1.2 API详解：预处理对象</h3><p><strong>preparedStatement</strong>：预编译对象，是Statement对象的子类。</p><p>特点：</p><ul><li>性能高</li><li>会把sql语句先编译</li><li>能过滤掉用户输入的关键字。</li></ul><p>PreparedStatement预处理对象，处理的每条sql语句中所有的实际参数，都必须使用占位符?替换。</p><pre class=" language-mysql"><code class="language-mysql">String sql = "select * from user where username = ? and password = ?";</code></pre><p>PreparedStatement使用，需要通过以下3步骤完成：</p><ol><li>PreparedStatement预处理对象代码：</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获得预处理对象，需要提供已经使用占位符处理后的SQL语句</span>PreparedStatement psmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span></code></pre><ol start="2"><li>设置实际参数</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">setXxx</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Xxx xx<span class="token punctuation">)</span> 将指定参数设置指定类型的值    参数<span class="token number">1</span>：index 实际参数序列号，从<span class="token number">1</span>开始。    参数<span class="token number">2</span>：xxx 实际参数值，xxx表示具体的类型。例如：<span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">)</span> 把SQL语句中第<span class="token number">2</span>个位置的占位符<span class="token operator">?</span>替换成实际参数 <span class="token string">"1234"</span></code></pre><ol start="3"><li>执行SQL语句:</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span>执行insert update delete语句<span class="token punctuation">.</span>ResultSet <span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span>执行select语句<span class="token punctuation">.</span><span class="token keyword">boolean</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span>执行select返回<span class="token boolean">true</span> 执行其他的语句返回<span class="token boolean">false</span><span class="token punctuation">.</span></code></pre><h3 id="1-1-3-插入"><a href="#1-1-3-插入" class="headerlink" title="1.1.3 插入"></a>1.1.3 插入</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//添加：向分类表中添加数据</span>    Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>    PreparedStatement psmt <span class="token operator">=</span> null<span class="token punctuation">;</span>    ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1 获得连接</span>        conn <span class="token operator">=</span> JdbcUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2 处理sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into category(cname) values(? )"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3获得预处理对象</span>        psmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4设置实际参数</span>        psmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"预处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5执行</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> psmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//6释放资源</span>        JdbcUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> psmt<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-5-通过id查询详情"><a href="#1-5-通过id查询详情" class="headerlink" title="1.5 通过id查询详情"></a>1.5 通过id查询详情</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通过id查询</span>    Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>    PreparedStatement psmt <span class="token operator">=</span> null<span class="token punctuation">;</span>    ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        conn <span class="token operator">=</span> JdbcUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from category where cid = ?"</span><span class="token punctuation">;</span>        psmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        psmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rs <span class="token operator">=</span> psmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询不到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span><span class="token punctuation">{</span>        JdbcUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> psmt<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-2-使用连接池重写工具类"><a href="#1-2-使用连接池重写工具类" class="headerlink" title="1.2 使用连接池重写工具类"></a>1.2 使用连接池重写工具类</h2><h3 id="1-2-1-连接池原理"><a href="#1-2-1-连接池原理" class="headerlink" title="1.2.1 连接池原理"></a>1.2.1 连接池原理</h3><p>连接池理解为存放多个连接的集合。</p><p><img src="/2020/03/17/day28-jdbc-yu-chu-li-dui-xiang-lian-jie-chi-dbutils/02_%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%8E%9F%E7%90%86.png" alt></p><p>使用连接池技术的目的：解决建立数据库连接耗费资源和时间很多的问题，提高性能。</p><h3 id="1-2-2-编写标准的数据源-规范"><a href="#1-2-2-编写标准的数据源-规范" class="headerlink" title="1.2.2 编写标准的数据源(规范)"></a>1.2.2 编写标准的数据源(规范)</h3><p>Java为数据库连接池提供了公共的接口：<strong>javax.sql.DataSource</strong>，各个厂商需要让自己的连接池实现这个接口。这样应用程序可以方便的切换不同厂商的连接池！</p><p>图解：<br><img src="/2020/03/17/day28-jdbc-yu-chu-li-dui-xiang-lian-jie-chi-dbutils/03_%E8%BF%9E%E6%8E%A5%E6%B1%A0%E6%A6%82%E5%BF%B5.png" alt></p><p>常见的连接池：C3P0、DRUID.、DBCP连接池。</p><h3 id="1-2-3-C3P0连接池"><a href="#1-2-3-C3P0连接池" class="headerlink" title="1.2.3 C3P0连接池"></a>1.2.3 C3P0连接池</h3><p>DDD开源免费的连接池！目前使用它的开源项目有：Spring、Hibernate等。使用C3P0连接池需要导入jar包，c3p0使用时还需要添加配置文件“c3p0-config.xml” </p><p><strong>使用步骤</strong></p><ol><li>添加jar包 </li><li>编写配置文件 c3p0-config.xml，放在src中（注：文件名一定不要写错）</li><li>编写工具类</li></ol><ul><li>编写配置文件 c3p0-config.xml</li></ul><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>c3p0-config</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 使用默认的配置读取连接池对象 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>default-config</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--  连接参数 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/day17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 连接池参数 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialPoolSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkoutTimeout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxIdleTime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>default-config</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>c3p0-config</span><span class="token punctuation">></span></span></code></pre><p><strong>c3p0连接池常用的配置参数：</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>initialPoolSize</td><td>初始连接数</td></tr><tr><td>maxPoolSize</td><td>最大连接数</td></tr><tr><td>checkoutTimeout</td><td>最大等待时间</td></tr><tr><td>maxIdleTime</td><td>最大空闲回收时间</td></tr></tbody></table><p><code>初始连接数</code>：刚创建好连接池的时候准备的连接数量<br><code>最大连接数</code>：连接池中最多可以放多少个连接<br><code>最大等待时间</code>：连接池中没有连接时最长等待时间<br><code>最大空闲回收时间</code>：连接池中的空闲连接多久没有使用就会回收</p><ul><li>编写C3P0工具类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C3P0Util</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建C3P0连接池的对象,内部存储了多个Connection对象</span>    <span class="token comment" spellcheck="true">//创建对象时,会自动读取src根目录下的配置文件,怎么读取的,不用关心</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ComboPooledDataSource cpds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">C3P0Util</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义静态方法,获取Connection对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//连接池对象,调用getConnection()方法,获取连接Connection对象</span>        <span class="token keyword">return</span> cpds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义静态方法,获取连接池对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DataSource <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cpds<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//释放资源</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span>Connection con<span class="token punctuation">,</span> Statement stmt<span class="token punctuation">,</span> ResultSet rs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//4.关闭资源</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>con<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stmt<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-4-C3P0连接池工具类的使用"><a href="#1-2-4-C3P0连接池工具类的使用" class="headerlink" title="1.2.4 C3P0连接池工具类的使用"></a>1.2.4 C3P0连接池工具类的使用</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 拿到连接</span>        Connection conn <span class="token operator">=</span> C3P0Util<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"INSERT INTO student VALUES (NULL, ?, ?, ?);"</span><span class="token punctuation">;</span>        PreparedStatement pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pstmt<span class="token punctuation">.</span><span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"影响的函数: "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        C3P0Util<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span>pstmt<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-3-DBUtils"><a href="#1-3-DBUtils" class="headerlink" title="1.3 DBUtils"></a>1.3 DBUtils</h2><p>如果只使用JDBC进行开发，我们会发现冗余代码过多，为了简化JDBC开发，本案例我们讲采用apache commons组件一个成员：DBUtils。</p><p>DBUtils就是JDBC的简化开发工具包。需要项目导入commons-dbutils-1.6.jar才能够正常使用DBUtils工具。</p><h2 id="1-3-1-概述"><a href="#1-3-1-概述" class="headerlink" title="1.3.1 概述"></a>1.3.1 概述</h2><p>DBUtils是java编程中的数据库操作实用工具，小巧简单实用。DBUtils封装了对JDBC的操作，简化了JDBC操作，可以少写代码。</p><p>Dbutils三个核心功能介绍</p><ul><li><p>QueryRunner中提供对sql语句操作的API.</p></li><li><p>ResultSetHandler接口，用于定义select操作后，怎样封装结果集.</p></li><li><p>DbUtils类，它就是一个工具类,定义了关闭资源与事务处理的方法</p></li></ul><h2 id="1-3-2-准备数据"><a href="#1-3-2-准备数据" class="headerlink" title="1.3.2 准备数据"></a>1.3.2 准备数据</h2><ul><li>创建表：</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> product<span class="token punctuation">(</span>    pid <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    pname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    price <span class="token keyword">double</span><span class="token punctuation">,</span>    category_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>插入表记录</li></ul><pre class=" language-mysql"><code class="language-mysql">INSERT INTO product(pid,pname,price,category_id) VALUES(1,'联想',5000,'c001');INSERT INTO product(pid,pname,price,category_id) VALUES(2,'海尔',3000,'c001');INSERT INTO product(pid,pname,price,category_id) VALUES(3,'雷神',5000,'c001');INSERT INTO product(pid,pname,price,category_id) VALUES(4,'JACK JONES',800,'c002');INSERT INTO product(pid,pname,price,category_id) VALUES(5,'真维斯',200,'c002');INSERT INTO product(pid,pname,price,category_id) VALUES(6,'花花公子',440,'c002');INSERT INTO product(pid,pname,price,category_id) VALUES(7,'劲霸',2000,'c002');INSERT INTO product(pid,pname,price,category_id) VALUES(8,'香奈儿',800,'c003');INSERT INTO product(pid,pname,price,category_id) VALUES(9,'相宜本草',200,'c003');INSERT INTO product(pid,pname,price,category_id) VALUES(10,'面霸',5,'c003');INSERT INTO product(pid,pname,price,category_id) VALUES(11,'好想你枣',56,'c004');INSERT INTO product(pid,pname,price,category_id) VALUES(12,'香飘飘奶茶',1,'c005');INSERT INTO product(pid,pname,price,category_id) VALUES(13,'果9',1,NULL);</code></pre><h3 id="1-3-3-QueryRunner核心类介绍"><a href="#1-3-3-QueryRunner核心类介绍" class="headerlink" title="1.3.3 QueryRunner核心类介绍"></a>1.3.3 QueryRunner核心类介绍</h3><h3 id="提供数据源"><a href="#提供数据源" class="headerlink" title="提供数据源"></a>提供数据源</h3><ul><li><p>构造方法</p><ul><li><code>QueryRunner(DataSource)</code> 创建核心类，并提供数据源，内部自己维护Connection</li></ul></li><li><p>普通方法</p><ul><li><code>update(String sql , Object ... params)</code> 执行DML语句</li><li><code>query(String sql , ResultSetHandler , Object ... params)</code> 执行DQL语句，并将查询结果封装到对象中。</li></ul></li></ul><h3 id="提供连接"><a href="#提供连接" class="headerlink" title="提供连接"></a>提供连接</h3><ul><li>构造方法<ul><li><code>QueryRunner()</code> 创建核心类，<strong>没有</strong>提供数据源，在进行具体操作时，需要手动提供Connection</li></ul></li><li>普通方法<ul><li><code>update(Connection conn , String sql , Object ... params)</code>  使用提供的Connection，完成DML语句</li><li><code>query(Connection conn , String sql , ResultSetHandler , Object ... params)</code> 使用提供的Connection，执行DQL语句，并将查询结果封装到对象中。</li></ul></li></ul><h3 id="1-3-4-QueryRunner实现添加、更新、删除操作"><a href="#1-3-4-QueryRunner实现添加、更新、删除操作" class="headerlink" title="1.3.4 QueryRunner实现添加、更新、删除操作"></a>1.3.4 QueryRunner实现添加、更新、删除操作</h3><ul><li><code>update(String sql, Object... params)</code> 用来完成表数据的增加、删除、更新操作</li></ul><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取一个用来执行SQL语句的对象   QueryRunner</span>    QueryRunner qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span>C3P0Utils<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">" INSERT INTO product(pid,pname,price,category_id) VALUES(?,?,?,?);"</span><span class="token punctuation">;</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"百岁山"</span><span class="token punctuation">,</span> <span class="token number">5500</span><span class="token punctuation">,</span> <span class="token string">"c005"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> line <span class="token operator">=</span> qr<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用来完成表数据的增加、删除、更新操作</span>    <span class="token comment" spellcheck="true">//结果集处理</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"line = "</span> <span class="token operator">+</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-5-QueryRunner实现查询操作"><a href="#1-3-5-QueryRunner实现查询操作" class="headerlink" title="1.3.5 QueryRunner实现查询操作"></a>1.3.5 QueryRunner实现查询操作</h3><ul><li><code>query(String sql, ResultSetHandler&lt;T&gt; rsh, Object... params)</code> 用来完成表数据的查询操作</li></ul><h3 id="1-5-1ResultSetHandler-结果集"><a href="#1-5-1ResultSetHandler-结果集" class="headerlink" title="1.5.1ResultSetHandler 结果集"></a>1.5.1ResultSetHandler 结果集</h3><ul><li>BeanHandler：将结果集中第一条记录封装到一个指定的javaBean中。</li><li>BeanListHandler：将结果集中每一条记录封装到指定的javaBean中，将这些javaBean在封装到List集合中</li><li>ScalarHandler：它是用于单数据。例如select count(*) from 表操作。</li><li>ColumnListHandler：将结果集中指定的列的字段值，封装到一个List集合中</li></ul><h4 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h4><p>JavaBean就是一个类，在开发中常用语封装数据。具有如下特性</p><ol><li><p>需要实现接口：java.io.Serializable ，通常实现接口这步骤省略了，不会影响程序。</p></li><li><p>提供私有字段：private 类型 字段名;</p></li><li><p>提供getter/setter方法：</p></li><li><p>提供无参构造</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String pid<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pname<span class="token punctuation">;</span>    <span class="token keyword">private</span> Double price<span class="token punctuation">;</span>    <span class="token keyword">private</span> String category_id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//省略 getter和setter方法</span><span class="token punctuation">}</span></code></pre><h4 id="BeanHandler"><a href="#BeanHandler" class="headerlink" title="BeanHandler"></a>BeanHandler</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 查询数据表结果集处理其中一种方式: * BeanHandler处理方式 *     将数据表的结果集第一行数据,封装成JavaBean类的对象 * 构造方法: *     BeanHandler(Class&lt;T> type)  *     传递一个Class类型对象,将结果封装到哪个类的对象呢 *     ZhangWu类的Class对象 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过id查询详情，将查询结果封装到JavaBean product</span>    <span class="token comment" spellcheck="true">//1核心类 </span>    QueryRunner queryRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span>C3P0Utils<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2 sql语句</span>    String sql <span class="token operator">=</span> <span class="token string">"select * from product where pid = ?"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3 实际参数</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4 查询并封装</span>    Product product <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanHandler</span><span class="token operator">&lt;</span>Product<span class="token operator">></span><span class="token punctuation">(</span>Product<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="BeanListHandler"><a href="#BeanListHandler" class="headerlink" title="BeanListHandler"></a>BeanListHandler</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 查询数据表结果集处理其中一种方式: * BeanListHandler处理方式 *     将数据表的每一行数据,封装成JavaBean类对象 *     多行数据了,多个JavaBean对象,存储List集合 */</span><span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询所有，将每一条记录封装到一个JavaBean，然后将JavaBean添加到List中，最后返回List，BeanListHandler</span>    QueryRunner queryRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span>C3P0Utils<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"select * from product"</span><span class="token punctuation">;</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Product<span class="token operator">></span> list <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token operator">&lt;</span>Product<span class="token operator">></span><span class="token punctuation">(</span>Product<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Product product <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="ScalarHander"><a href="#ScalarHander" class="headerlink" title="ScalarHander"></a>ScalarHander</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 查询数据表结果集处理其中一种方式: * ScalarHandler处理方式 *     处理单值查询结果,执行的select语句后,结果集只有1个 */</span><span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ScalarHandler : 用于处理聚合函数执行结果(一行一列)</span>    <span class="token comment" spellcheck="true">// * 查询总记录数</span>    QueryRunner queryRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span>C3P0Utils<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"select count(*) from product"</span><span class="token punctuation">;</span>    Long obj <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ScalarHandler</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//System.out.println(obj.getClass());</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="ColumnListHandler"><a href="#ColumnListHandler" class="headerlink" title="ColumnListHandler"></a>ColumnListHandler</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 查询数据表结果集处理其中一种方式:* ColumnListHandler处理方式*     将查询数据表结果集中的某一列数据,存储到List集合*     哪个列不清楚,数据类型也不清楚, List&lt;Object>* ColumnListHandler构造方法*     空参数: 获取就是数据表的第一列*     int参数: 传递列的顺序编号*     String参数: 传递列名*/</span><span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ColumnListHandler ： 查询指定一列数据</span>    QueryRunner queryRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span>C3P0Utils<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"select * from product"</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ColumnListHandler</span><span class="token punctuation">(</span><span class="token string">"pname"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="1-6-小结"><a href="#1-6-小结" class="headerlink" title="1.6 小结"></a>1.6 小结</h2><p>DBUtils工具</p><ul><li>作用：简化JDBC的操作</li></ul><p>DBUtils常用类与方法</p><ul><li><p>QueryRunner 用来执行SQL语句对象</p><ul><li>update(Connection conn, String sql, Object… params) 插入表记录、更新表记录、删除表记录</li><li>query(Connection conn, String sql, ResultSetHandler handler, Object… params) 查询表记录</li></ul></li><li><p>ResultSetHandler 处理结果集的对象</p></li><li><ul><li>BeanHandler：将结果集中第一条记录封装到一个指定的javaBean中。</li><li>BeanListHandler：将结果集中每一条记录封装到指定的javaBean中，将这些javaBean在封装到List集合中</li><li>ScalarHandler：它是用于单数据。例如select count(*) from 表操作。</li><li>ColumnListHandler：将结果集中指定的列的字段值，封装到一个List集合中</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day27mysql多表查询-原生jdbc</title>
      <link href="/2020/03/16/day27mysql-duo-biao-cha-xun-yuan-sheng-jdbc/"/>
      <url>/2020/03/16/day27mysql-duo-biao-cha-xun-yuan-sheng-jdbc/</url>
      
        <content type="html"><![CDATA[<h1 id="day27mysql多表查询-原生jdbc"><a href="#day27mysql多表查询-原生jdbc" class="headerlink" title="day27mysql多表查询-原生jdbc"></a>day27mysql多表查询-原生jdbc</h1><h2 id="1-1-多表关系实战"><a href="#1-1-多表关系实战" class="headerlink" title="1.1 多表关系实战"></a>1.1 多表关系实战</h2><h3 id="1-1-1-实战1：省和市"><a href="#1-1-1-实战1：省和市" class="headerlink" title="1.1.1 实战1：省和市"></a>1.1.1 实战1：省和市</h3><ul><li><p>方案1：多张表，一对多</p><a id="more"></a><p><img src="/2020/03/16/day27mysql-duo-biao-cha-xun-yuan-sheng-jdbc/01.png" alt></p></li><li><p>方案2：一张表，自关联一对多</p></li></ul><p><img src="/2020/03/16/day27mysql-duo-biao-cha-xun-yuan-sheng-jdbc/02.png" alt></p><p>id=1</p><p>name=’北京’</p><p>p_id = null;</p><p>id=2</p><p>name=’昌平’</p><p>p_id=1</p><p>id=3</p><p>name=’大兴’</p><p>p_id=1</p><p>id=3</p><p>name=’上海’</p><p>p_id=null</p><p>id=4</p><p>name=’浦东’</p><p>p_id=3</p><h3 id="1-1-2-实战2：用户和角色"><a href="#1-1-2-实战2：用户和角色" class="headerlink" title="1.1.2 实战2：用户和角色"></a>1.1.2 实战2：用户和角色</h3><ul><li>多对多关系</li></ul><p><img src="/2020/03/16/day27mysql-duo-biao-cha-xun-yuan-sheng-jdbc/03.png" alt></p><h3 id="1-1-3-实战3：用户-角色-权限"><a href="#1-1-3-实战3：用户-角色-权限" class="headerlink" title="1.1.3 实战3：用户_角色_权限"></a>1.1.3 实战3：用户_角色_权限</h3><ul><li>多对多关系<br><img src="/2020/03/16/day27mysql-duo-biao-cha-xun-yuan-sheng-jdbc/01_%E7%94%A8%E6%88%B7_%E8%A7%92%E8%89%B2_%E6%9D%83%E9%99%90%E4%B8%89%E8%A1%A8%E5%85%B3%E7%B3%BB.png" alt></li></ul><h2 id="1-2-多表查询"><a href="#1-2-多表查询" class="headerlink" title="1.2 多表查询"></a>1.2 多表查询</h2><p><strong>提供表结构如下：</strong></p><p><img src="/2020/03/16/day27mysql-duo-biao-cha-xun-yuan-sheng-jdbc/04.png" alt></p><pre class=" language-mysql"><code class="language-mysql"># 分类表CREATE TABLE category (  cid VARCHAR(32) PRIMARY KEY ,  cname VARCHAR(50));#商品表CREATE TABLE products(  pid VARCHAR(32) PRIMARY KEY ,  pname VARCHAR(50),  price INT,  flag VARCHAR(2), #是否上架标记为：1表示上架、0表示下架  cid VARCHAR(32),  CONSTRAINT products_fk FOREIGN KEY products(cid) REFERENCES category (cid));</code></pre><h3 id="2-1-1-初始化数据"><a href="#2-1-1-初始化数据" class="headerlink" title="2.1.1 初始化数据"></a>2.1.1 初始化数据</h3><pre class=" language-mysql"><code class="language-mysql">#分类INSERT INTO category(cid,cname) VALUES('c001','家电');INSERT INTO category(cid,cname) VALUES('c002','服饰');INSERT INTO category(cid,cname) VALUES('c003','化妆品');#商品INSERT INTO products(pid, pname,price,flag,cid) VALUES('p001','联想',5000,'1','c001');INSERT INTO products(pid, pname,price,flag,cid) VALUES('p002','海尔',3000,'1','c001');INSERT INTO products(pid, pname,price,flag,cid) VALUES('p003','雷神',5000,'1','c001');INSERT INTO products (pid, pname,price,flag,cid) VALUES('p004','JACK JONES',800,'1','c002');INSERT INTO products (pid, pname,price,flag,cid) VALUES('p005','真维斯',200,'1','c002');INSERT INTO products (pid, pname,price,flag,cid) VALUES('p006','花花公子',440,'1','c002');INSERT INTO products (pid, pname,price,flag,cid) VALUES('p007','劲霸',2000,'1','c002');INSERT INTO products (pid, pname,price,flag,cid) VALUES('p008','香奈儿',800,'1','c003');INSERT INTO products (pid, pname,price,flag,cid) VALUES('p009','相宜草',200,'1','c003');</code></pre><h3 id="1-2-2-多表查询"><a href="#1-2-2-多表查询" class="headerlink" title="1.2.2  多表查询"></a>1.2.2  多表查询</h3><ol><li>交叉连接查询(基本不会使用-得到的是两个表的乘积)</li></ol><p>交叉查询图解：<br><img src="/2020/03/16/day27mysql-duo-biao-cha-xun-yuan-sheng-jdbc/02_%E4%BA%A4%E5%8F%89%E6%9F%A5%E8%AF%A2.png" alt></p><ul><li>语法：<code>select * from A,B;</code></li></ul><ol><li>内连接查询(使用的关键字 inner join  – inner可以省略)</li></ol><ul><li>隐式内连接：<code>select * from A,B where 条件;</code></li></ul><ul><li>显示内连接：<code>select * from A inner join B on 条件;</code></li></ul><pre class=" language-mysql"><code class="language-mysql">1.查询哪些分类的商品已经上架#隐式内连接SELECT DISTINCT c.cname FROM category c , products p WHERE c.cid = p.cid AND p.flag = '1';显示内连接SELECT DISTINCT c.cname FROM category c INNER JOIN products p ON c.cid = p.cid WHERE p.flag = '1';2.查询每种分类商品的个数#隐式内连接SELECT c.cid,c.cname COUNT(p.pid)FROM category c , products pWHERE c.cid=p.cid GROUP BY c.cid #显示内连接SELECT c.cid,c.cname COUNT(p.pid)FROM category c INNER JOIN products p ON c.cid = p.cid GROUP BY c.cid </code></pre><p><img src="/2020/03/16/day27mysql-duo-biao-cha-xun-yuan-sheng-jdbc/05.png" alt></p><ol start="2"><li>外连接查询(使用的关键字 outer join – outer可以省略)</li></ol><ul><li>左外连接：left outer join<ul><li><code>select * from A left outer join B on 条件;</code></li></ul></li><li>右外连接：right outer join<ul><li><code>select * from A right outer join B on 条件;</code></li></ul></li></ul><pre class=" language-mysql"><code class="language-mysql">1.查询每种分类商品的个数#左外连接INSERT INTO category(cid,cname) VALUES('c004','奢侈品');SELECT cname,COUNT(cid) FROM category c LEFT OUTER JOIN products p ON c.cid = p.cid GROUP BY cname;</code></pre><p><img src="/2020/03/16/day27mysql-duo-biao-cha-xun-yuan-sheng-jdbc/06.png" alt></p><p>下面通过一张图说明连接的区别:</p><p><img src="/2020/03/16/day27mysql-duo-biao-cha-xun-yuan-sheng-jdbc/07.png" alt></p><p>注意：</p><p>左外连接查询：以left join 左侧的表为标准,左表中的所有记录都会显示,不管有没有对应的右表内容</p><p>隐式内连接: 会保证左右两边的记录的cid必须相同才会显示</p><h3 id="1-2-3-子查询"><a href="#1-2-3-子查询" class="headerlink" title="1.2.3 子查询"></a>1.2.3 子查询</h3><p><strong>子查询</strong>：一条select语句结果作为另一条select语法一部分（查询条件，查询结果，表等）。<br><strong>语法</strong>：<code>select ....查询字段 ... from ... 表.. where ... 查询条件</code></p><pre class=" language-mysql"><code class="language-mysql">#3 子查询, 查询“化妆品”分类上架商品详情#隐式内连接SELECT p.* FROM products p , category c WHERE p.cid=c.cid AND c.cname = '化妆品';#子查询##作为查询条件SELECT * FROM products p WHERE p.cid =     (         SELECT c.cid FROM category c             WHERE c.cname='化妆品'    );##作为另一张表SELECT * FROM products p ,      (SELECT * FROM category WHERE cname='化妆品') c WHERE p.cid = c.cid;</code></pre><p><img src="/2020/03/16/day27mysql-duo-biao-cha-xun-yuan-sheng-jdbc/08.png" alt></p><p><strong>子查询练习：</strong></p><pre class=" language-mysql"><code class="language-mysql">#查询“化妆品”和“家电”两个分类上架商品详情SELECT * FROM products p WHERE p.cid in     (SELECT c.cid      FROM category c      WHERE c.cname='化妆品' or c.name='家电'    );</code></pre><h2 id="1-3-JDBC"><a href="#1-3-JDBC" class="headerlink" title="1.3 JDBC"></a>1.3 JDBC</h2><h3 id="1-3-1-JDBC概述"><a href="#1-3-1-JDBC概述" class="headerlink" title="1.3.1 JDBC概述"></a>1.3.1 JDBC概述</h3><p>JDBC（Java DataBase Connectivity,java数据库连接）是一种用于执行SQL语句的Java API。JDBC是Java访问数据库的标准规范，可以为不同的关系型数据库提供统一访问，它由一组用Java语言编写的接口和类组成。</p><p>JDBC需要连接驱动，驱动是两个设备要进行通信，满足一定通信数据格式，数据格式由设备提供商规定，设备提供商为设备提供驱动软件，通过软件可以与该设备进行通信。</p><p><img src="/2020/03/16/day27mysql-duo-biao-cha-xun-yuan-sheng-jdbc/04_jdbc%E6%A6%82%E5%BF%B5.png" alt></p><p><strong>JDBC规范（掌握四个核心对象）：</strong></p><ul><li>DriverManager:用于注册驱动</li><li>Connection: 表示与数据库创建的连接</li><li>Statement: 操作数据库sql语句的对象</li><li>ResultSet: 结果集或一张虚拟表</li></ul><h3 id="1-3-2-JDBC原理"><a href="#1-3-2-JDBC原理" class="headerlink" title="1.3.2 JDBC原理"></a>1.3.2 JDBC原理</h3><p>Java提供访问数据库规范称为JDBC，而生产厂商提供规范的实现类称为驱动。</p><p>JDBC是接口，驱动是接口的实现，没有驱动将无法完成数据库连接，从而不能操作数据库！每个数据库厂商都需要提供自己的驱动，用来连接自己公司的数据库，也就是说驱动一般都由数据库生成厂商提供。</p><h3 id="1-3-3-JDBC入门案例"><a href="#1-3-3-JDBC入门案例" class="headerlink" title="1.3.3 JDBC入门案例"></a>1.3.3 JDBC入门案例</h3><h3 id="1-3-4-准备数据"><a href="#1-3-4-准备数据" class="headerlink" title="1.3.4 准备数据"></a>1.3.4 准备数据</h3><p>之前我们学习了sql语句的使用，并创建的分类表category，今天我们将使用JDBC对分类表进行增删改查操作。</p><pre class=" language-mysql"><code class="language-mysql">#创建数据库create database day04;#使用数据库use day04;#创建学生表        CREATE TABLE scores(            sid INT PRIMARY KEY,            score INT,            sname VARCHAR(200)        );</code></pre><h3 id="1-3-5-导入驱动jar包"><a href="#1-3-5-导入驱动jar包" class="headerlink" title="1.3.5 导入驱动jar包"></a>1.3.5 导入驱动jar包</h3><p>创建lib目录，存放mysql的驱动mysql-connector-java-5.1.37-bin.jar</p><p>选中mysql的jar包，右键选择“ Add as Library…” 完成jar导入</p><p><img src="/2020/03/16/day27mysql-duo-biao-cha-xun-yuan-sheng-jdbc/11.png" alt></p><h3 id="1-3-6-开发步骤"><a href="#1-3-6-开发步骤" class="headerlink" title="1.3.6 开发步骤"></a>1.3.6 开发步骤</h3><ol><li>注册驱动.</li><li>获得连接.</li><li>获得执行sql语句的对象</li><li>执行sql语句，并返回结果</li><li>处理结果</li><li>释放资源.</li></ol><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03JDBC</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.注册驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 获得连接.</span>        <span class="token comment" spellcheck="true">//定义数据库的连接地址</span>        String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/day04"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义用户名</span>        String userName <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义密码</span>        String passWord <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方法,获取到数据库的连接对象</span>        Connection con <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> userName<span class="token punctuation">,</span> passWord<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//com.mysql.jdbc.JDBC4Connection@2b71fc7e</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-4-API详解"><a href="#1-4-API详解" class="headerlink" title="1.4 API详解"></a>1.4 API详解</h2><h3 id="API详解：注册驱动"><a href="#API详解：注册驱动" class="headerlink" title="API详解：注册驱动"></a>API详解：注册驱动</h3><p><code>DriverManager.registerDriver(new com.mysql.jdbc.Driver());</code>不建议使用，原因有2个：</p><ul><li>导致驱动被注册2次</li><li>强烈依赖数据库的驱动jar</li></ul><p>解决办法：</p><ul><li><code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code></li></ul><p>好处: 参数是String类型的全类名,可以写到配置文件中</p><h3 id="1-4-1-API详解：获得链接"><a href="#1-4-1-API详解：获得链接" class="headerlink" title="1.4.1 API详解：获得链接"></a>1.4.1 API详解：获得链接</h3><p><code>static Connection getConnection(String url, String user, String password)</code>:试图建立到给定数据库 URL 的连接。</p><ul><li>参数说明：<ul><li>url 需要连接数据库的位置（网址） </li><li>user用户名  </li><li>password 密码</li></ul></li><li>例如：<code>getConnection(&quot;jdbc:mysql://localhost:3306/day04&quot;, &quot;root&quot;, &quot;root&quot;);</code></li></ul><blockquote><p>扩展：</p><p>URL:SUN公司与数据库厂商之间的一种协议。</p><p>jdbc:mysql://localhost:3306/day04</p><p>协议子协议  IP :端口号数据库<br>​    mysql: jdbc:mysql://localhost:3306/day04 或者 jdbc:mysql:///day04（默认本机连接）<br>​    oracle数据库: jdbc:oracle:thin:@localhost:1521:sid</p></blockquote><h3 id="1-4-2-API详解：java-sql-Connection接口：一个连接"><a href="#1-4-2-API详解：java-sql-Connection接口：一个连接" class="headerlink" title="1.4.2 API详解：java.sql.Connection接口：一个连接"></a>1.4.2 API详解：java.sql.Connection接口：一个连接</h3><p>接口的实现在数据库驱动中。所有与数据库交互都是基于连接对象的。</p><ul><li><code>Statement  createStatement();</code>//创建操作sql语句的对象</li></ul><h3 id="1-4-3-API详解：java-sql-Statement接口-操作sql语句，并返回相应结果"><a href="#1-4-3-API详解：java-sql-Statement接口-操作sql语句，并返回相应结果" class="headerlink" title="1.4.3 API详解：java.sql.Statement接口: 操作sql语句，并返回相应结果"></a>1.4.3 API详解：java.sql.Statement接口: 操作sql语句，并返回相应结果</h3><pre class=" language-java"><code class="language-java">String sql <span class="token operator">=</span> <span class="token string">"某SQL语句"</span><span class="token punctuation">;</span>获取Statement语句执行平台：Statement stmt <span class="token operator">=</span>con<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>常用方法：</p><ul><li><code>int executeUpdate(String sql);</code>–执行insert update delete语句.</li></ul><ul><li><code>ResultSet executeQuery(String sql);</code> –执行select语句.</li></ul><ul><li><code>boolean execute(String sql);</code> –仅当执行select并且有结果时才返回true，执行其他的语句返回false.</li></ul><h3 id="1-4-4-API详解：处理结果集（注：执行insert、update、delete无需处理）"><a href="#1-4-4-API详解：处理结果集（注：执行insert、update、delete无需处理）" class="headerlink" title="1.4.4 API详解：处理结果集（注：执行insert、update、delete无需处理）"></a>1.4.4 API详解：处理结果集（注：执行insert、update、delete无需处理）</h3><p>ResultSet实际上就是一张二维的表格，我们可以调用其<code>boolean next()</code>方法指向某行记录，当第一次调用<code>next()</code>方法时，便指向第一行记录的位置，这时就可以使用ResultSet提供的<code>getXXX(int col)</code>方法来获取指定列的数据：(与数组索引从0开始不同，这里索引从1开始)</p><pre class=" language-java"><code class="language-java">rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指向第一行</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取第一行第一列的数据</span></code></pre><p>常用方法：</p><ul><li><code>Object getObject(int index)</code> / <code>Object getObject(String name)</code> 获得任意对象</li><li><code>String getString(int index)</code> / <code>String getString(String name)</code> 获得字符串</li></ul><ul><li><code>int getInt(int index)</code> / <code>int getInt(String name)</code> 获得整形</li><li><code>double getDouble(int index)</code> / <code>double getDouble(String name)</code>获得双精度浮点型</li></ul><h3 id="1-4-5-API详解：释放资源"><a href="#1-4-5-API详解：释放资源" class="headerlink" title="1.4.5 API详解：释放资源"></a>1.4.5 API详解：释放资源</h3><p>与IO流一样，使用后的东西都需要关闭！关闭的顺序是先得到的后关闭，后得到的先关闭。</p><pre class=" language-java"><code class="language-java">rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="1-5-JDBC工具类"><a href="#1-5-JDBC工具类" class="headerlink" title="1.5 JDBC工具类"></a>1.5 JDBC工具类</h2><p>“获得数据库连接”操作，将在以后的增删改查所有功能中都存在，可以封装工具类JDBCUtils。提供获取连接对象的方法，从而达到代码的重复利用。</p><p>该工具类提供方法：<code>public static Connection getConnection()</code>。代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String driver <span class="token operator">=</span> <span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/webdb_4"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String password <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//注册驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得连接     * @return     * @throws SQLException      */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  SQLException<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获得连接</span>        Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> conn<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 释放资源     * @param conn     * @param st     * @param rs     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeResource</span><span class="token punctuation">(</span>Connection conn <span class="token punctuation">,</span> Statement st <span class="token punctuation">,</span> ResultSet rs<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rs <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                st<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-6-JDBC增删改查操作"><a href="#1-6-JDBC增删改查操作" class="headerlink" title="1.6 JDBC增删改查操作"></a>1.6 JDBC增删改查操作</h2><h3 id="1-6-1-插入"><a href="#1-6-1-插入" class="headerlink" title="1.6.1 插入"></a>1.6.1 插入</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//添加</span>    Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>    Statement st <span class="token operator">=</span> null<span class="token punctuation">;</span>    ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1 获得连接</span>        conn <span class="token operator">=</span> JdbcUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//操作</span>        <span class="token comment" spellcheck="true">//1) 获得语句执行者</span>        st <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2) 执行sql语句</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"insert into category(cname) values('测试')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3) 处理结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源</span>        JdbcUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> st<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="1-6-2-通过id查询详情"><a href="#1-6-2-通过id查询详情" class="headerlink" title="1.6.2 通过id查询详情"></a>1.6.2 通过id查询详情</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通过id查询详情</span>    Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>    Statement st <span class="token operator">=</span> null<span class="token punctuation">;</span>    ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        conn <span class="token operator">=</span> JdbcUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//操作</span>        st <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rs <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"select * from category where cid = 30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String cid <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"cid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String cname <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"cname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cid <span class="token operator">+</span> <span class="token string">" @ "</span> <span class="token operator">+</span> cname <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span><span class="token punctuation">{</span>        JdbcUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> st<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day26-mysql查询DQL-多表关系</title>
      <link href="/2020/03/10/day26-mysql-cha-xun-dql-duo-biao-guan-xi/"/>
      <url>/2020/03/10/day26-mysql-cha-xun-dql-duo-biao-guan-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="day26-mysql查询DQL-amp-多表关系"><a href="#day26-mysql查询DQL-amp-多表关系" class="headerlink" title="day26-mysql查询DQL&amp;多表关系"></a>day26-mysql查询DQL&amp;多表关系</h1><h2 id="1-1-SQL语句-DQL"><a href="#1-1-SQL语句-DQL" class="headerlink" title="1.1 SQL语句(DQL)"></a>1.1 SQL语句(DQL)</h2><h3 id="1-1-1-DQL准备工作和语法"><a href="#1-1-1-DQL准备工作和语法" class="headerlink" title="1.1.1 DQL准备工作和语法"></a>1.1.1 DQL准备工作和语法</h3><h3 id="1-1-2-准备工作"><a href="#1-1-2-准备工作" class="headerlink" title="1.1.2 准备工作"></a>1.1.2 准备工作</h3><a id="more"></a><pre class=" language-mysql"><code class="language-mysql">#创建商品表：pid intpname varchar(20)price doublecategory_id varchar(32)插入一条数据:pid=1,pname='联想',price=5000,category_id='c001'create table product(    pid int primary key,    pname varchar(20),    price double,    category_id varchar(32));INSERT INTO product(pid,pname,price,category_id) VALUES(1,'联想',5000,'c001');INSERT INTO product(pid,pname,price,category_id) VALUES(2,'海尔',3000,'c001');INSERT INTO product(pid,pname,price,category_id) VALUES(3,'雷神',5000,'c001');INSERT INTO product(pid,pname,price,category_id) VALUES(4,'JACK JONES',800,'c002');INSERT INTO product(pid,pname,price,category_id) VALUES(5,'真维斯',200,'c002');INSERT INTO product(pid,pname,price,category_id) VALUES(6,'花花公子',440,'c002');INSERT INTO product(pid,pname,price,category_id) VALUES(7,'劲霸',2000,'c002');INSERT INTO product(pid,pname,price,category_id) VALUES(8,'香奈儿',800,'c003');INSERT INTO product(pid,pname,price,category_id) VALUES(9,'相宜本草',200,'c003');INSERT INTO product(pid,pname,price,category_id) VALUES(10,'面霸',5,'c003');INSERT INTO product(pid,pname,price,category_id) VALUES(11,'好想你枣',56,'c004');INSERT INTO product(pid,pname,price,category_id) VALUES(12,'香飘飘奶茶',1,'c005');INSERT INTO product(pid,pname,price,category_id) VALUES(13,'果9',1,NULL);</code></pre><h3 id="1-1-3-语法"><a href="#1-1-3-语法" class="headerlink" title="1.1.3 语法"></a>1.1.3 语法</h3><pre class=" language-mysql"><code class="language-mysql">select [distinct] * | 列名,列名 from 表 where 条件</code></pre><h3 id="1-1-4-简单查询"><a href="#1-1-4-简单查询" class="headerlink" title="1.1.4 简单查询"></a>1.1.4 简单查询</h3><ul><li>练习</li></ul><pre class=" language-mysql"><code class="language-mysql">#查询所有的商品.    select * from product;</code></pre><pre class=" language-mysql"><code class="language-mysql">#查询商品名和商品价格.select pname,price from product;</code></pre><pre class=" language-mysql"><code class="language-mysql">#别名查询.使用的关键字是as（as可以省略的）.表别名:select * from product as p;</code></pre><pre class=" language-mysql"><code class="language-mysql">#别名查询.使用的关键字是as（as可以省略的）.列别名:select pname as pn from product;</code></pre><pre class=" language-mysql"><code class="language-mysql">#去掉重复值.select distinct price from product;</code></pre><pre class=" language-mysql"><code class="language-mysql">#查询结果是表达式（运算查询）：将所有商品的价格+10元进行显示. select pname,price+10 from product;</code></pre><p>注意：</p><ol><li>as可以省略</li><li>‘’可以省略,但是如果别名中有’,就不能省略了</li><li>表名也是可以起别名的,但是不能写’’</li></ol><h3 id="1-1-5-条件查询"><a href="#1-1-5-条件查询" class="headerlink" title="1.1.5 条件查询"></a>1.1.5 条件查询</h3><table><thead><tr><th><strong>比较运算符</strong></th><th>&lt;  &lt;=  =   !=  &lt;&gt;</th><th>大于、小于、大于(小于)等于、不等于</th></tr></thead><tbody><tr><td></td><td>BETWEEN  …AND…</td><td>显示在某一区间的值(含头含尾)</td></tr><tr><td></td><td>IN(值1,值2…)</td><td>显示在in列表中的值，例：in(100,200)</td></tr><tr><td></td><td>LIKE ‘张pattern’</td><td>模糊查询，Like语句中，% 代表零个或多个任意字符，_ 代表一个字符， 例如：<code>first_name like &#39;_a%&#39;;</code></td></tr><tr><td></td><td>IS NULL</td><td>判断是否为空</td></tr><tr><td><strong>逻辑运行符</strong></td><td>and</td><td>多个条件同时成立</td></tr><tr><td></td><td>or</td><td>多个条件任一成立</td></tr><tr><td></td><td>not</td><td>不成立，例：<code>where not(salary&gt;100);</code></td></tr></tbody></table><ul><li>练习</li></ul><pre class=" language-mysql"><code class="language-mysql">#查询商品名称为“花花公子”的商品所有信息：SELECT * FROM product WHERE pname = '花花公子'</code></pre><pre class=" language-mysql"><code class="language-mysql">#查询价格为800商品SELECT * FROM product WHERE price = 800</code></pre><pre class=" language-mysql"><code class="language-mysql">#查询价格不是800的所有商品SELECT * FROM product WHERE price != 800SELECT * FROM product WHERE price <> 800SELECT * FROM product WHERE NOT(price = 800)</code></pre><pre class=" language-mysql"><code class="language-mysql">#查询商品价格大于60元的所有商品信息SELECT * FROM product WHERE price > 60;</code></pre><pre class=" language-mysql"><code class="language-mysql">#查询商品价格在200到1000之间所有商品SELECT * FROM product WHERE price >= 200 AND price <=1000;SELECT * FROM product WHERE price BETWEEN 200 AND 1000;</code></pre><pre class=" language-mysql"><code class="language-mysql">#查询商品价格是200或800的所有商品SELECT * FROM product WHERE price = 200 OR price = 800;SELECT * FROM product WHERE price IN (200,800);</code></pre><pre class=" language-mysql"><code class="language-mysql">#查询含有'霸'字的所有商品SELECT * FROM product WHERE pname LIKE '%霸%';#查询以'香'开头的所有商品SELECT * FROM product WHERE pname LIKE '香%';#查询第二个字为'想'的所有商品SELECT * FROM product WHERE pname LIKE '_想%';</code></pre><pre class=" language-mysql"><code class="language-mysql">#商品没有分类的商品SELECT * FROM product WHERE category_id IS NULL#查询有分类的商品SELECT * FROM product WHERE category_id IS NOT NULL</code></pre><h3 id="1-1-6-排序查询"><a href="#1-1-6-排序查询" class="headerlink" title="1.1.6 排序查询"></a>1.1.6 排序查询</h3><p>通过order by语句，可以将查询出的结果进行排序。暂时放置在select语句的最后。</p><ul><li>格式:</li></ul><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM 表名 ORDER BY 排序字段 ASC|DESC;#ASC 升序 (默认)#DESC 降序</code></pre><ul><li>练习：</li></ul><pre><code>#查询id 为1 3 5 7的商品 并按价格降序排列SELECT * FROM product WHERE pid IN(1,3,5,7) ORDER BY price DESC;</code></pre><pre class=" language-mysql"><code class="language-mysql">#使用价格排序(降序)SELECT * FROM product ORDER BY price DESC;</code></pre><pre class=" language-mysql"><code class="language-mysql">#在价格排序(降序)的基础上，以分类排序(降序)SELECT * FROM product ORDER BY price DESC,category_id DESC;</code></pre><pre class=" language-mysql"><code class="language-mysql">#显示商品的价格(去重复)，并排序(降序)SELECT DISTINCT price FROM product ORDER BY price DESC;</code></pre><h3 id="1-1-7-聚合查询"><a href="#1-1-7-聚合查询" class="headerlink" title="1.1.7 聚合查询"></a>1.1.7 聚合查询</h3><p>之前我们做的查询都是横向查询，它们都是根据条件一行一行的进行判断，而使用聚合函数查询是纵向查询，它是对一列的值进行计算，然后返回一个单一的值；另外聚合函数会忽略空值。</p><p>今天我们学习如下五个聚合函数：</p><ul><li>count：统计指定列不为NULL的记录行数；</li></ul><ul><li>sum：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0；</li></ul><ul><li>max：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；</li></ul><ul><li>min：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；</li></ul><ul><li>avg：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；</li></ul><p>练习：</p><pre class=" language-mysql"><code class="language-mysql">#查询商品的总条数SELECT COUNT(*) FROM product; #查询商品的价格和select sum(price) as 'totalprice' FROM product;</code></pre><pre class=" language-mysql"><code class="language-mysql">#查询价格大于200商品的总条数SELECT COUNT(*) FROM product WHERE price > 200;</code></pre><pre class=" language-mysql"><code class="language-mysql">#查询分类为'c001'的所有商品的总和SELECT SUM(price) FROM product WHERE category_id = 'c001';</code></pre><pre class=" language-mysql"><code class="language-mysql">#查询分类为'c002'所有商品的平均价格SELECT AVG(price) FROM product WHERE category_id = 'c002';</code></pre><pre class=" language-mysql"><code class="language-mysql">#查询商品的最大价格和最小价格SELECT MAX(price),MIN(price) FROM product;</code></pre><pre><code>#查询pid为1 3 7 商品价格的平均值SELECT AVG(price) FROM product WHERE pid IN(1,3,7);</code></pre><pre><code>#查询pid为1 3 7 14 商品价格的平均值SELECT AVG(price) FROM product WHERE pid IN(1,3,7,14);#price是null,不参与计算</code></pre><pre><code>#统计指定列(category_id)不为NULL的记录行数SELECT COUNT(category_id) FROM product WHERE category_id IS NOT NULL;</code></pre><h3 id="1-1-8-分组查询"><a href="#1-1-8-分组查询" class="headerlink" title="1.1.8 分组查询"></a>1.1.8 分组查询</h3><p>分组查询是指使用group by字句对查询信息进行分组。</p><p>图解<br><img src="/2020/03/10/day26-mysql-cha-xun-dql-duo-biao-guan-xi/02_%E5%88%86%E7%BB%84.png" alt></p><ul><li>格式：</li></ul><pre class=" language-mysql"><code class="language-mysql">SELECT 字段1,字段2… FROM 表名 GROUP BY分组字段 HAVING 分组条件;</code></pre><p>分组操作中的having子语句，是用于在分组后对数据进行过滤的，作用类似于where条件。</p><ul><li><p>having与where的区别:</p><ul><li><p>having是在分组后对数据进行过滤.</p><p>where是在分组前对数据进行过滤</p></li><li><p>having后面可以使用聚合函数(统计函数)</p><p>where后面不可以使聚合函数。</p></li></ul></li></ul><pre><code>/*    学生成绩表scores:    sid: 学生成绩的id    score: 成绩    sname: 课程*/CREATE TABLE scores(    sid INT PRIMARY KEY,    score INT,    sname VARCHAR(200));INSERT INTO scores(sid,score,sname) VALUES(1,90,&#39;语文&#39;);INSERT INTO scores(sid,score,sname) VALUES(2,70,&#39;数学&#39;);INSERT INTO scores(sid,score,sname) VALUES(3,90,&#39;外语&#39;);INSERT INTO scores(sid,score,sname) VALUES(4,50,&#39;语文&#39;);INSERT INTO scores(sid,score,sname) VALUES(5,90,&#39;数学&#39;);INSERT INTO scores(sid,score,sname) VALUES(6,80,&#39;外语&#39;);INSERT INTO scores(sid,score,sname) VALUES(7,100,&#39;语文&#39;);INSERT INTO scores(sid,score,sname) VALUES(8,20,&#39;数学&#39;);INSERT INTO scores(sid,score,sname) VALUES(9,100,&#39;外语&#39;);INSERT INTO scores(sid,score,sname) VALUES(10,75,&#39;编程&#39;);#查询所有#查询所有课程和对应的成绩</code></pre><pre><code>#统计每门课程的平均分SELECT sname,AVG(score) FROM scores GROUP BY sname;</code></pre><pre><code>#统计每门课程的平均分,且只显示平均分&gt;70分的信息SELECT sname,AVG(score) FROM scores GROUP BY sname HAVING AVG(score)&gt;70;</code></pre><p>练习：</p><pre class=" language-mysql"><code class="language-mysql">#统计各个分类商品的个数SELECT category_id ,COUNT(*) FROM product GROUP BY category_id ;</code></pre><pre class=" language-mysql"><code class="language-mysql">#统计各个分类商品的个数,且只显示个数大于1的信息SELECT category_id ,COUNT(*) FROM product GROUP BY category_id HAVING COUNT(*) > 1;</code></pre><pre><code>#统计各个分类商品的平均价格SELECT category_id,AVG(price) FROM product GROUP BY category_id;</code></pre><pre><code>#统计各个分类商品的平均价格,且只显示平均价格&gt;800的信息SELECT category_id,AVG(price) FROM product GROUP BY category_id HAVING AVG(price)&gt;800;</code></pre><p>注意:</p><ol><li>分组一般要和聚合函数一起使用</li><li>作为分组的字段,一般建议显示出来,方便查看数据</li><li>如果聚合函数作为条件,只能使用having</li></ol><h3 id="1-1-9-sql查询语句的书写顺序和执行顺序"><a href="#1-1-9-sql查询语句的书写顺序和执行顺序" class="headerlink" title="1.1.9 sql查询语句的书写顺序和执行顺序"></a>1.1.9 sql查询语句的书写顺序和执行顺序</h3><p>图解<br><img src="/2020/03/10/day26-mysql-cha-xun-dql-duo-biao-guan-xi/01_%E8%AF%AD%E5%8F%A5%E4%B9%A6%E5%86%99%E5%92%8C%E6%89%A7%E8%A1%8C%E7%9A%84%E9%A1%BA%E5%BA%8F.png" alt></p><p>SQL语句书写顺序：select … from… where…. group by… having… order by … </p><p>SQL语句执行顺序：from… where…group by… having…. select … order by…</p><p>注意:</p><ol><li>where后面不能写聚合函数</li><li>having后面可以使用聚合函数</li><li>where 后面不能使用select中定义的别名</li></ol><h2 id="1-2-SQL备份与恢复"><a href="#1-2-SQL备份与恢复" class="headerlink" title="1.2 SQL备份与恢复"></a>1.2 SQL备份与恢复</h2><h3 id="1-2-1-SQL备份"><a href="#1-2-1-SQL备份" class="headerlink" title="1.2.1 SQL备份"></a>1.2.1 SQL备份</h3><p>数据库的备份是指将数据库转换成对应的sql文件</p><h3 id="1-2-2-MySQL命令备份"><a href="#1-2-2-MySQL命令备份" class="headerlink" title="1.2.2 MySQL命令备份"></a>1.2.2 MySQL命令备份</h3><p>数据库导出sql脚本的格式：</p><pre class=" language-mysql"><code class="language-mysql">mysqldump  -u用户名 -p密码 数据库名>生成的脚本文件路径</code></pre><p>例如:</p><pre class=" language-mysql"><code class="language-mysql">mysqldump  -uroot  -proot day04>d:\day03.sql</code></pre><p>以上备份数据库的命令中需要用户名和密码，即表明该命令要在用户没有登录的情况下使用</p><h2 id="1-2-3-SQL恢复"><a href="#1-2-3-SQL恢复" class="headerlink" title="1.2.3 SQL恢复"></a>1.2.3 SQL恢复</h2><p>数据库的恢复指的是使用备份产生的sql文件恢复数据库，即将sql文件中的sql语句执行就可以恢复数据库内容。</p><h3 id="1-2-4-MySQL命令恢复"><a href="#1-2-4-MySQL命令恢复" class="headerlink" title="1.2.4 MySQL命令恢复"></a>1.2.4 MySQL命令恢复</h3><p>使用数据库命令备份的时候只是备份了数据库内容，产生的sql文件中没有创建数据库的sql语句，在恢复数据库之前需要自己动手创建数据库。</p><ul><li>在数据库外恢复                       <ul><li><strong>格式:</strong><code>mysql  -uroot  -p密码 数据库名 &lt; 文件路径</code></li><li>例如:<code>mysql  -uroot  -proot day03&lt;d:\day03.sql</code>       </li></ul></li><li>在数据库内恢复                       <ul><li><strong>格式:</strong><code>source SQL脚本路径</code></li><li>例如:<code>source d:\day03.sql</code></li><li>注意:使用这种方式恢复数据，首先要登录数据库.</li></ul></li></ul><h2 id="1-3-多表操作"><a href="#1-3-多表操作" class="headerlink" title="1.3 多表操作"></a>1.3 多表操作</h2><p>实际开发中，一个项目通常需要很多张表才能完成。例如：一个商城项目就需要分类表(category)、商品表(products)、订单表(orders)等多张表。且这些表的数据之间存在一定的关系，接下来我们将在单表的基础上，一起学习多表方面的知识。</p><p><img src="/2020/03/10/day26-mysql-cha-xun-dql-duo-biao-guan-xi/07.png" alt></p><h3 id="1-3-1-表与表之间的关系"><a href="#1-3-1-表与表之间的关系" class="headerlink" title="1.3.1 表与表之间的关系"></a>1.3.1 表与表之间的关系</h3><ul><li>一对多关系：<ul><li>常见实例：客户和订单，分类和商品，部门和员工.</li><li>一对多建表原则：在从表(多方)创建一个字段，字段作为外键指向主表(一方)的主键.</li></ul></li></ul><p><img src="/2020/03/10/day26-mysql-cha-xun-dql-duo-biao-guan-xi/03_%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E8%A1%A8%E5%92%8C%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E8%A1%A8.png" alt></p><ul><li>多对多关系：<ul><li>常见实例：学生和课程、用户和角色</li><li>多对多关系建表原则：需要创建第三张表,中间表中至少两个字段，这两个字段分别作为外键指向各自一方的主键.</li></ul></li></ul><p><img src="/2020/03/10/day26-mysql-cha-xun-dql-duo-biao-guan-xi/04_%E5%95%86%E5%93%81%E5%88%86%E7%B1%BB_%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF_%E5%95%86%E5%93%81%E8%AE%A2%E5%8D%95%E8%A1%A8%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt></p><ul><li>一对一关系：(了解)<ul><li>在实际的开发中应用不多.因为一对一可以创建成一张表.</li><li>两种建表原则：<ul><li>外键唯一：主表的主键和从表的外键（唯一），形成主外键关系，外键唯一unique。</li><li>外键是主键：主表的主键和从表的主键，形成主外键关系。</li></ul></li></ul></li></ul><h3 id="1-3-2-外键约束"><a href="#1-3-2-外键约束" class="headerlink" title="1.3.2 外键约束"></a>1.3.2 外键约束</h3><p>现在我们有两张表“分类表”和“商品表”，为了表明商品属于哪个分类，通常情况下，我们将在商品表上添加一列，用于存放分类cid的信息，此列称为：外键</p><p><img src="/2020/03/10/day26-mysql-cha-xun-dql-duo-biao-guan-xi/10.png" alt></p><p><img src="/2020/03/10/day26-mysql-cha-xun-dql-duo-biao-guan-xi/11.png" alt></p><pre><code>此时“分类表category”称为：主表，“cid”我们称为主键。“商品表products”称为：从表，category_id称为外键。我们通过主表的主键和从表的外键来描述主外键关系，呈现就是一对多关系。</code></pre><ul><li>外键特点：<ul><li>从表外键的值是对主表主键的引用。</li><li>从表外键类型，必须与主表主键类型一致。</li></ul></li></ul><ul><li>声明外键约束         </li></ul><pre class=" language-mysql"><code class="language-mysql">语法：alter table 从表 add [constraint 外键名称] foreign key 从表名(从表外键字段名) references 主表 名(主表的主键);直接在从表中最后一句添加：[constraint 外键名称] foreign key 从表名(从表外键字段名) references 主表 名(主表的主键);[外键名称]用于删除外键约束的，一般建议“_fk”结尾alter table 从表 drop foreign key 外键名称</code></pre><ul><li>使用外键目的：<ul><li>保证数据完整性</li></ul></li></ul><h3 id="1-3-3-一对多操作"><a href="#1-3-3-一对多操作" class="headerlink" title="1.3.3 一对多操作"></a>1.3.3 一对多操作</h3><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="/2020/03/10/day26-mysql-cha-xun-dql-duo-biao-guan-xi/12.png" alt></p><ul><li>category分类表，为一方，也就是主表，必须提供主键cid</li><li>products商品表，为多方，也就是从表，必须提供外键category_id</li></ul><h3 id="实现：分类和商品"><a href="#实现：分类和商品" class="headerlink" title="实现：分类和商品"></a>实现：分类和商品</h3><pre class=" language-mysql"><code class="language-mysql">#创建分类表create table category(  cid varchar(32) PRIMARY KEY ,  cname varchar(100) -- 分类名称);# 商品表CREATE TABLE `products` (  `pid` varchar(32) PRIMARY KEY  ,  `name` VARCHAR(40) ,  `price` DOUBLE );#添加外键字段alter table products add column category_id varchar(32);#添加约束alter table products add constraint product_fk foreign key (category_id) references category (cid);</code></pre><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><pre class=" language-mysql"><code class="language-mysql">#1 向分类表中添加数据INSERT INTO category (cid ,cname) VALUES('c001','服装');#2 向商品表添加普通数据,没有外键数据，默认为nullINSERT INTO products (pid,pname) VALUES('p001','商品名称');#3 向商品表添加普通数据，含有外键信息(category表中存在这条数据)INSERT INTO products (pid ,pname ,category_id) VALUES('p002','商品名称2','c001');#4 向商品表添加普通数据，含有外键信息(category表中不存在这条数据) -- 失败,异常INSERT INTO products (pid ,pname ,category_id) VALUES('p003','商品名称2','c999');#5 删除指定分类(分类被商品使用) -- 执行异常DELETE FROM category WHERE cid = 'c001';</code></pre><h3 id="1-4-4-多对多"><a href="#1-4-4-多对多" class="headerlink" title="1.4.4 多对多"></a>1.4.4 多对多</h3><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p><img src="/2020/03/10/day26-mysql-cha-xun-dql-duo-biao-guan-xi/13.png" alt></p><ul><li>商品和订单多对多关系，将拆分成两个一对多。</li><li>products商品表，为其中一个一对多的主表，需要提供主键pid</li><li>orders 订单表，为另一个一对多的主表，需要提供主键oid</li><li>orderitem中间表，为另外添加的第三张表，需要提供两个外键oid和pid</li></ul><h3 id="实现：订单和商品"><a href="#实现：订单和商品" class="headerlink" title="实现：订单和商品"></a>实现：订单和商品</h3><pre class=" language-mysql"><code class="language-mysql">#商品表[已存在]#订单表create table `orders`(  `oid` varchar(32) PRIMARY KEY ,  `totalprice` double     #总计);#订单项表create table orderitem(  oid varchar(50),-- 订单id  pid varchar(50)-- 商品id);#订单表和订单项表的主外键关系alter table `orderitem` add constraint orderitem_orders_fk foreign key (oid) references orders(oid);#商品表和订单项表的主外键关系alter table `orderitem` add constraint orderitem_product_fk foreign key (pid) references products(pid);#联合主键（可省略）alter table `orderitem` add primary key (oid,pid);</code></pre><h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><pre class=" language-mysql"><code class="language-mysql">#1 向商品表中添加数据INSERT INTO products (pid,pname) VALUES('p003','商品名称');#2 向订单表中添加数据INSERT INTO orders (oid ,totalprice) VALUES('x001','998');INSERT INTO orders (oid ,totalprice) VALUES('x002','100');#3向中间表添加数据(数据存在)INSERT INTO orderitem(pid,oid) VALUES('p001','x001');INSERT INTO orderitem(pid,oid) VALUES('p001','x002');INSERT INTO orderitem(pid,oid) VALUES('p002','x002');#4删除中间表的数据DELETE FROM orderitem WHERE pid='p002' AND oid = 'x002';#5向中间表添加数据(数据不存在) -- 执行异常INSERT INTO orderitem(pid,oid) VALUES('p002','x003');#6删除商品表的数据 -- 执行异常DELETE FROM products WHERE pid = 'p001';</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day25mysql基础-约束</title>
      <link href="/2020/03/03/day25mysql-ji-chu-yue-shu/"/>
      <url>/2020/03/03/day25mysql-ji-chu-yue-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="day25mysql基础-约束"><a href="#day25mysql基础-约束" class="headerlink" title="day25mysql基础-约束"></a>day25mysql基础-约束</h1><h2 id="1-1-数据库介绍"><a href="#1-1-数据库介绍" class="headerlink" title="1.1 数据库介绍"></a>1.1 数据库介绍</h2><h3 id="1-1-1-数据库概述"><a href="#1-1-1-数据库概述" class="headerlink" title="1.1.1 数据库概述"></a>1.1.1 数据库概述</h3><ul><li><p>什么是数据库</p><a id="more"></a>  <p>数据库就是存储数据的仓库，其本质是一个文件系统，数据按照特定的格式将数据存储起来，用户可以对数据库中的数据进行增加，修改，删除及查询操作</p></li><li><p>什么是数据库管理系统</p></li></ul><p>数据库管理系统（DataBase Management System，DBMS）：指一种操作和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问数据库中表内的数据。</p><ul><li>数据库与数据库管理系统的关系</li></ul><h3 id="1-1-2-数据库表"><a href="#1-1-2-数据库表" class="headerlink" title="1.1.2 数据库表"></a>1.1.2 数据库表</h3><p>数据库中以表为组织单位存储数据。表类似我们的Java类，每个字段都有对应的数据类型。</p><p>那么用我们熟悉的java程序来与关系型数据对比，就会发现以下对应关系。</p><p>类———-表</p><p>类中属性———-表中字段</p><p>对象———-记录</p><h2 id="1-2-MySql数据库"><a href="#1-2-MySql数据库" class="headerlink" title="1.2 MySql数据库"></a>1.2 MySql数据库</h2><h3 id="1-2-1-mysql安装"><a href="#1-2-1-mysql安装" class="headerlink" title="1.2.1 mysql安装"></a>1.2.1 mysql安装</h3><p>参考MySQL安装图解.doc</p><h3 id="1-2-2-登录数据库"><a href="#1-2-2-登录数据库" class="headerlink" title="1.2.2 登录数据库"></a>1.2.2 登录数据库</h3><p>MySQL是一个需要账户名密码登录的数据库，登陆后使用，它提供了一个默认的root账号，使用安装时设置的密码即可登录。</p><p>开启mysql服务: net start mysql</p><p>关闭mysql服务: net stop mysql</p><p>格式1：cmd&gt; mysql –u用户名 –p密码</p><p>例如：mysql -uroot –proot</p><p>格式2：cmd&gt; mysql –host=ip地址 –user=用户名 –password=密码</p><p>例如：mysql –host=127.0.0.1 –user=root –password=root</p><h2 id="1-3-SQL语句"><a href="#1-3-SQL语句" class="headerlink" title="1.3 SQL语句"></a>1.3 SQL语句</h2><h3 id="1-3-1-SQL概述"><a href="#1-3-1-SQL概述" class="headerlink" title="1.3.1 SQL概述"></a>1.3.1 SQL概述</h3><p>SQL语句介绍：</p><p>数据库是不认识JAVA语言的，但是我们同样要与数据库交互，这时需要使用到数据库认识的语言SQL语句，它是数据库的代码。 结构化查询语言(Structured Query Language)简称SQL，是关系型数据库管理系统都需要遵循的规范。不同的数据库生产厂商都支持SQL语句，但都有特有内容。</p><p>SQL语句分类：</p><ul><li><p>数据定义语言：简称DDL(Data Definition Language)，用来定义数据库对象：数据库，表，列等。关键字：create，alter，drop等</p></li><li><p>数据操作语言：简称DML(Data Manipulation Language)，用来对数据库中表的记录进行更新。关键字：insert，delete，update等</p></li><li><p>数据控制语言：简称DCL(Data Control Language)，用来定义数据库的访问权限和安全级别，及创建用户。</p></li><li><p>数据查询语言：简称DQL(Data Query Language)，用来查询数据库中表的记录。关键字：select，from，where等</p></li></ul><p>SQL通用语法：</p><ul><li><p>SQL语句可以单行或多行书写，以分号结尾</p></li><li><p>可使用空格和缩进来增强语句的可读性</p></li><li><p>MySQL数据库的SQL语句不区分大小写，关键字建议使用大写</p></li><li><p>同样可以使用/**/的方式完成注释</p></li><li><p>MySQL中的我们常使用的数据类型如下</p></li></ul><p><img src="/2020/03/03/day25mysql-ji-chu-yue-shu/1.png" alt="数据类型图"></p><h3 id="1-3-2-DDL之数据库操作：database"><a href="#1-3-2-DDL之数据库操作：database" class="headerlink" title="1.3.2 DDL之数据库操作：database"></a>1.3.2 DDL之数据库操作：database</h3><p>1.创建数据库</p><pre class=" language-mysql"><code class="language-mysql">create database 数据库名称;#没有指定编码表,使用mysql安装时指定的编码表utf8create database 数据库名称 character set 编码表;# 指定编码表</code></pre><p>2.使用数据库</p><pre class=" language-mysql"><code class="language-mysql">use 数据库名称;</code></pre><p>3.查看某个数据库的定义的信息</p><pre class=" language-mysql"><code class="language-mysql">show create database 数据库名称;</code></pre><p>4.查看所有数据库</p><pre class=" language-mysql"><code class="language-mysql">show databases;</code></pre><p>5.查看正在使用的数据库</p><pre class=" language-mysql"><code class="language-mysql">select database();</code></pre><p>6.删除数据库</p><pre class=" language-mysql"><code class="language-mysql">drop database 数据库名称;</code></pre><h3 id="1-3-3-DDL之表操作：table"><a href="#1-3-3-DDL之表操作：table" class="headerlink" title="1.3.3 DDL之表操作：table"></a>1.3.3 DDL之表操作：table</h3><p>1.创建表</p><pre class=" language-mysql"><code class="language-mysql">create table 表名(            字段名1 类型(长度) 约束,            字段名2 类型(长度) 约束,            字段名3 类型(长度) 约束        #最后一个字段后面不用写逗号            );CREATE TABLE student(    sid INT,    sname VARCHAR(200),    sgender VARCHAR(10),    sage INT);</code></pre><p>2.查看表</p><pre class=" language-mysql"><code class="language-mysql">1.查看数据库中的所有表  show tables;2.查看表结构  desc 数据库表名称;</code></pre><p>3.删除表</p><pre class=" language-mysql"><code class="language-mysql">drop table 数据库表名称;</code></pre><p>4.修改表结构</p><pre class=" language-mysql"><code class="language-mysql">1.修改表添加列alter table 表名 add 列名(已是关键字可以添加` `来使用) 类型(长度) [约束];2.修改表修改列的类型长度及约束alter table 表名 modify 列名 类型(长度) 约束;3.修改表修改列名alter table 表名 change 旧列名 新列名 类型(长度) 约束;4.修改表删除列alter table 表名 drop 列名;5.修改表名rename table 表名 to 新表名;6.修改表的字符集alter table 表名 character set</code></pre><h3 id="1-3-4-DML数据操作语言"><a href="#1-3-4-DML数据操作语言" class="headerlink" title="1.3.4 DML数据操作语言"></a>1.3.4 DML数据操作语言</h3><p>1.插入表记录</p><pre class=" language-mysql"><code class="language-mysql">1.向表中插入某些字段insert into 表 (字段1,字段2,字段3..) values (值1,值2,值3..);2.向表中插入所有字段,字段的顺序为创建表时的顺序insert into 表 values (值1,值2,值3..);</code></pre><p>注意：</p><ol><li>值与字段必须对应，个数相同，类型相同，值的数据大小必须在字段的长度范围内</li><li>除了数值类型外，其它的字段类型的值必须使用引号引起。（建议单引号）</li><li>如果要插入空值，可以不写字段，或者插入null。</li><li>字段的值如果是varchar类型,可以使用单引/双引,但是建议用单引</li><li>指定列值添加 主键自动增长,mysql帮助维护,添加数据时,可以不用写</li></ol><p>2.更新表记录</p><pre class=" language-mysql"><code class="language-mysql">1.更新所有记录的指定字段update 表名 set 字段名=值,字段名=值,...;2.更新符合条件记录的指定字段update 表名 set 字段名=值,字段名=值,... where 条件;</code></pre><p>注意：</p><ol><li>列名的类型与修改的值要一致.</li><li>修改值得时候不能超过最大长度.</li><li>除了数值类型外，其它的字段类型的值必须使用引号引起</li></ol><p>3.删除记录</p><pre class=" language-mysql"><code class="language-mysql">1.删除表delete from 表名2.删除指定记录delete from 表名 [where 条件];</code></pre><h2 id="1-4-SQL约束"><a href="#1-4-SQL约束" class="headerlink" title="1.4 SQL约束"></a>1.4 SQL约束</h2><h3 id="1-4-1-主键约束"><a href="#1-4-1-主键约束" class="headerlink" title="1.4.1 主键约束"></a>1.4.1 主键约束</h3><p>主键的特点：</p><ul><li>主键必须包含唯一的值。</li><li>主键列不能包含 NULL 值。</li><li>每个表都应该有一个主键，并且每个表只能有一个主键</li></ul><p>添加主键约束：</p><p>方式一：创建表时，在字段描述处，声明指定字段为主键：</p><pre class=" language-mysql"><code class="language-mysql">CREATE    TABLE category(    cid INT PRIMARY KEY,    cname VARCHAR(100));</code></pre><p>方式二：创建表时，在constraint约束区域，声明指定字段为主键：</p><pre class=" language-mysql"><code class="language-mysql">CREATE    TABLE category(    cid INT,    cname VARCHAR(100),    CONSTRAINT pk_cid PRIMARY KEY(cid));</code></pre><p>注意：</p><ol><li><p>关键字constraint可以省略，如果需要为主键命名，constraint不能省略，主键名称一般没用。</p></li><li><p>字段列表需要使用小括号括住，如果有多字段需要使用逗号分隔。声明两个以上字段为主键，我们称为联合主键</p></li></ol><p>方式三：创建表之后，通过修改表结构，声明指定字段为主键：</p><pre class=" language-mysql"><code class="language-mysql">alter table 表名 add [constraint 主键约束名称] primary key(作为主键的字段名称)</code></pre><h2 id="1-4-2-自动增长列"><a href="#1-4-2-自动增长列" class="headerlink" title="1.4.2 自动增长列"></a>1.4.2 自动增长列</h2><p>我们通常希望在每次插入新记录时，数据库自动生成字段的值。</p><p>我们可以在表中使用 auto_increment（自动增长列）关键字，自动增长列类型必须是整形，自动增长列必须为键(一般是主键)。</p><p>下列 SQL 语句把 “category” 表中的 “cid” 列定义为 auto_increment 主键:</p><pre class=" language-mysql"><code class="language-mysql">CREATE    TABLE category(    cid INT PRIMARY KEY AUTO_INCREMENT,    cname VARCHAR(100));</code></pre><p>向persons添加数据时，可以不为p_id字段设置值，也可以设置成null，数据库将自动维护主键值：</p><pre class=" language-mysql"><code class="language-mysql">INSERT INTO persons (firstname,lastname) VALUES ('Bill','Gates')INSERT INTO persons (p_id,firstname,lastname) VALUES (NULL,'Bill','Gates')</code></pre><p>扩展：默认AUTO_INCREMENT 的开始值是 1，如果希望修改起始值，请使用下列 SQL 语法：</p><pre class=" language-mysql"><code class="language-mysql">ALTER TABLE persons AUTO_INCREMENT=100</code></pre><p>面试题</p><p>问：针对auto_increment ，删除表中所有记录使用 delete from 表名 或使用 truncate table 表名，二者有什么区别？</p><p>删除方式：</p><p>delete 一条一条删除，不清空auto_increment记录数。</p><p>truncate 直接将表删除，重新建表，auto_increment将置为零，从新开始</p><h3 id="1-4-3-非空约束"><a href="#1-4-3-非空约束" class="headerlink" title="1.4.3 非空约束"></a>1.4.3 非空约束</h3><p>非空的特点：</p><ul><li><p>NOT NULL 约束强制列不接受NULL值。</p></li><li><p>NOT NULL 约束强制字段始终包含值。这意味着，如果不向字段添加值，就无法插入新记录或者更新记录</p></li><li><p>NOT NULL 可以有多个 </p></li></ul><p>添加方式：</p><ul><li>约束的添加的统一方式</li></ul><h3 id="1-4-4-唯一约束"><a href="#1-4-4-唯一约束" class="headerlink" title="1.4.4 唯一约束"></a>1.4.4 唯一约束</h3><p>UNIQUE 约束唯一标识数据库表中的每条记录。 UNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。 PRIMARY KEY 拥有自动定义的 UNIQUE 约束。 请注意，每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束</p><p>添加方式：</p><ul><li>约束的添加的统一方式</li></ul><h2 id="1-5-MySQL数据库密码重置"><a href="#1-5-MySQL数据库密码重置" class="headerlink" title="1.5 MySQL数据库密码重置"></a>1.5 MySQL数据库密码重置</h2><ol><li><p>停止mysql服务器运行输入services.msc 停止mysql服务</p></li><li><p>在cmd下,输入mysqld –console –skip-grant-tables 启动服务器,出现一下页面,不要关闭该窗口</p></li><li><p>新打开cmd,输入mysql -uroot 不需要密码</p></li><li><p>输入：</p><pre class=" language-mysql"><code class="language-mysql">use mysql;update user set password=password('abc') WHERE user='root';</code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day24Junit、反射、类加载器、注解</title>
      <link href="/2020/03/02/day24junit-fan-she-lei-jia-zai-qi-zhu-jie/"/>
      <url>/2020/03/02/day24junit-fan-she-lei-jia-zai-qi-zhu-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="day24Junit、反射、类加载器、注解"><a href="#day24Junit、反射、类加载器、注解" class="headerlink" title="day24Junit、反射、类加载器、注解"></a>day24Junit、反射、类加载器、注解</h1><h2 id="1-1-Junit单元测试"><a href="#1-1-Junit单元测试" class="headerlink" title="1.1 Junit单元测试"></a>1.1 Junit单元测试</h2><ul><li>测试分类：</li></ul><p>黑盒测试：不需要写代码，给输入值，看程序是否能够输出期望的值。</p><a id="more"></a><p>白盒测试：需要写代码的。关注程序具体的执行流程。</p><h3 id="1-1-1-Junit介绍"><a href="#1-1-1-Junit介绍" class="headerlink" title="1.1.1 Junit介绍"></a>1.1.1 Junit介绍</h3><p>Junit是一个Java语言的单元测试框架，属于白盒测试，简单理解为可以用于取代java的main方法。Junit属于第三方工具，需要导入jar包后使用。</p><h3 id="1-1-2-Junit的使用"><a href="#1-1-2-Junit的使用" class="headerlink" title="1.1.2 Junit的使用"></a>1.1.2 Junit的使用</h3><ol><li>编写测试类，简单理解Junit可以用于取代java的main方法</li><li>在测试类方法上添加注解 @Test</li><li>@Test修饰的方法要求：public void 方法名() {…} ，方法名自定义建议test开头，没有参数。</li><li>添加Junit库到lib文件夹中，然后进行jar包关联</li><li>使用：点击方法左侧绿色箭头(idea中)，执行当前方法（方法必须标记@Test）。执行结果红色：代表失败；执行结果绿色：代表成功</li></ol><h3 id="1-1-3-常用注解"><a href="#1-1-3-常用注解" class="headerlink" title="1.1.3 常用注解"></a>1.1.3 常用注解</h3><ul><li>@Test，用于修饰需要执行的测试方法</li><li>@Before，修饰的方法会在测试方法之前被自动执行</li><li>@After，修饰的方法会在测试方法执行之后自动被执行</li></ul><p>*示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Junit</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"myTest1...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"myBefore...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"myAfter...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"myTest2...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-2-反射"><a href="#1-2-反射" class="headerlink" title="1.2 反射"></a>1.2 反射</h2><h3 id="1-2-1-类的加载"><a href="#1-2-1-类的加载" class="headerlink" title="1.2.1 类的加载"></a>1.2.1 类的加载</h3><p>当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过加载，连接，初始化三步来实现对这个类进行初始化。</p><ul><li>加载</li></ul><p>就是指将class文件读入内存，并为之创建一个Class对象。<br>任何类被使用时系统都会建立一个Class对象</p><ul><li>连接</li></ul><p>验证是否有正确的内部结构，并和其他类协调一致<br>准备负责为类的静态成员分配内存，并设置默认初始化值<br>解析将类的二进制数据中的符号引用替换为直接引用</p><ul><li>初始化</li></ul><p>就是我们以前讲过的初始化步骤(创建对象)</p><ul><li>Class文件的概念<br><img src="/2020/03/02/day24junit-fan-she-lei-jia-zai-qi-zhu-jie/01_Class%E7%B1%BB%E7%9A%84%E4%BB%8B%E7%BB%8D.png" alt="01_Class类的介绍图"></li></ul><ul><li>什么时候加载类到JVM中</li></ul><ol><li>创建本类的对象</li><li>创建子类对象</li><li>使用java命令,运行主类时(含有main方法的类)</li><li>使用类中的静态内容</li><li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象。任意类型,都有一个隐藏的class属性</li></ol><h3 id="1-2-2-反射概述"><a href="#1-2-2-反射概述" class="headerlink" title="1.2.2 反射概述"></a>1.2.2 反射概述</h3><ul><li><p>框架：半成品软件。可以在框架的基础上进行软件开发，简化编码</p></li><li><p>反射：将java代码的各个组成部分封装为其他对象，可以在程序运行过程中操作这些对象，这就是java的反射机制，如下图。<br><img src="/2020/03/02/day24junit-fan-she-lei-jia-zai-qi-zhu-jie/02_%E5%8F%8D%E5%B0%84%E7%9A%84%E4%BB%8B%E7%BB%8D.png" alt="02_反射的介绍图"></p></li></ul><p>反射的好处：</p><ol><li>可以在程序运行过程中，操作这些对象。</li><li>可以解耦，提高程序的可扩展性。</li></ol><h3 id="1-2-3-获取Class对象的方式"><a href="#1-2-3-获取Class对象的方式" class="headerlink" title="1.2.3 获取Class对象的方式"></a>1.2.3 获取Class对象的方式</h3><p><img src="/2020/03/02/day24junit-fan-she-lei-jia-zai-qi-zhu-jie/03%E8%8E%B7%E5%8F%96Class%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E5%BC%8F.png" alt="03获取Class对象的方式图"></p><p>提示：同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</p><h3 id="1-2-4-获取Class对象的信息"><a href="#1-2-4-获取Class对象的信息" class="headerlink" title="1.2.4 获取Class对象的信息"></a>1.2.4 获取Class对象的信息</h3><p>知道怎么获取Class对象之后，接下来就介绍几个Class类中常用的方法了。</p><p>Class对象相关方法</p><ol><li>String getSimpleName(); 获得简单类名，只是类名，没有包<br>. String getName(); 获取完整类名，包含包名+类名</li><li>T newInstance() ;创建此 Class 对象所表示的类的一个新实例。要求：类必须有public的无参数构造方法</li></ol><h3 id="1-2-5-Constructor类"><a href="#1-2-5-Constructor类" class="headerlink" title="1.2.5 Constructor类"></a>1.2.5 Constructor类</h3><p>Constructor是构造方法类，类中的每一个构造方法都是Constructor的对象，通过Constructor对象可以实例化对象。</p><p>Class类中与Constructor相关方法</p><ol><li>Constructor[] getConstructors()</li></ol><p>获取所有的public修饰的构造方法</p><ol><li>Constructor getConstructor(Class… parameterTypes)</li></ol><p>根据参数类型获取构造方法对象，只能获得public修饰的构造方法。</p><p>如果不存在对应的构造方法，则会抛出 java.lang.NoSuchMethodException 异常。</p><p>参数是可变参数,调用此方法时,可以不写参数,获取的空参构造</p><p>可以写参数,给定的参数必须是Class对象 比如:String.class,int.class</p><p>Constructor类中常用方法</p><ol><li>T newInstance(Object… initargs) 根据指定参数创建对象。</li><li>T newInstance() 空参构造方法创建对象。</li></ol><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo06NewInstance</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.获取Class类型的对象(三种方式,建议使用第三种forName)</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"domain.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.通过Class类型的对象获取带参构造方法对象</span>      <span class="token comment" spellcheck="true">//获取满参构造方法对象</span>      Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> con <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//3.执行带参构造方法对象,创建一个具体的对象</span>      Person p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p>创建对象的简单方式</p><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo07NewInstance</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.获取Class类型的对象(三种方式,建议使用第三种forName)</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"domain.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.java.lang.Class类 成员方法: newInstance</span>      Person p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p>内部原理:</p><ol><li>内部会获取空参构造方法对象,要求类中必须定义空参构造</li><li>空参构造方法对象调用newInstance(Construct类中的),创建一个对象</li></ol><h3 id="1-2-6-Method类"><a href="#1-2-6-Method类" class="headerlink" title="1.2.6 Method类"></a>1.2.6 Method类</h3><p>Method是方法类，类中的每一个方法都是Method的对象，通过Method对象可以调用方法。</p><p>Class类中与Method相关方法</p><ol><li><p>public Method[] getMethods(): 获取所有public修饰的成员方法,包含继承下来的<br>每个成员方法被封装成了一个Method对象,存储Method数组中</p></li><li><p>public Method getMethod(String name, Class… parameterTypes):获取public修饰的指定方法名称,指定参数类型对应的成员方法对象</p></li></ol><p>Method类中常用方法</p><ul><li>public Object invoke(Object obj,Object… args): 对带有指定参数的指定对象调用由此 Method 对象表示的底层方法。</li></ul><p>参数:1.Object obj: 成员方法的执行,必须有对象的支，2.Object… args: 执行方法时,该方法需要的具体的参数</p><p>返回值: 方法执行的结果,被封装成一个Object返回，1.没有返回值的方法: 返回一个null，2.有返回值的方法: Object对象中,封装了具体的结果</p><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05Invoke</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.获取Class类型的对象(三种方式,建议使用第三种forName)</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"domain.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//成员方法的调用,需要对象的支持</span>      <span class="token comment" spellcheck="true">//快捷方式,创建一个对象</span>      Object obj <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.获取setName方法对象</span>      Method setNameMethod <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//3.执行setName方法对象</span>      Object result <span class="token operator">=</span> setNameMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"柳岩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//null</span>      <span class="token comment" spellcheck="true">//System.out.println(obj);</span>      <span class="token comment" spellcheck="true">//2.获取getName方法对象</span>      Method getNameMethod <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//3.执行getName方法对象</span>      result <span class="token operator">=</span> getNameMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="1-2-7-案例"><a href="#1-2-7-案例" class="headerlink" title="1.2.7 案例"></a>1.2.7 案例</h3><p>需求：写一个”框架”，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法</p><p>实现：</p><ol><li>配置文件</li><li>反射</li></ol><p>步骤：</p><ol><li>将需要创建的对象的全类名和需要执行的方法定义在配置文件中</li><li>在程序中加载读取配置文件</li><li>使用反射技术来加载类文件进内存</li><li>创建对象</li><li>执行方法</li></ol><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo06Reflect</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//2.读取(IO+Properties)配置文件,获取String类型的类名称和方法名称</span>      Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"day15\\config.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//类名称</span>      String className <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"ClassName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String methodName <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"MethodName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//System.out.println(className);</span>      <span class="token comment" spellcheck="true">//System.out.println(methodName);</span>      <span class="token comment" spellcheck="true">//3.获取Class类型的对象(三种方式,建议使用第三种forName)</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//4.获取方法对象</span>      Method method <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//方法的执行,需要对象的支持</span>      Object obj <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//5.执行方法对象</span>      method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="1-3-类加载器"><a href="#1-3-类加载器" class="headerlink" title="1.3 类加载器"></a>1.3 类加载器</h2><h3 id="1-3-1-类加载器概念"><a href="#1-3-1-类加载器概念" class="headerlink" title="1.3.1 类加载器概念"></a>1.3.1 类加载器概念</h3><p>类加载器：类加载器是负责加载类的对象。将class文件（硬盘）加载到内存生成Class对象。</p><h3 id="1-3-2-类加载器的组成"><a href="#1-3-2-类加载器的组成" class="headerlink" title="1.3.2 类加载器的组成"></a>1.3.2 类加载器的组成</h3><ul><li><p>BootstrapClassLoader 根类加载器 也被称为引导类加载器，负责Java核心类的加载<br>比如System,String等</p></li><li><p>ExtClassLoader 扩展类加载器负责JRE的扩展目录中jar包的加载。在JDK中JRE的lib目录下ext目录</p></li><li><p>AppClassLoader 系统类加载器负责在JVM启动时加载来自java命令的class文件，以及classpath环境变量所指定的jar包和类路径。</p></li></ul><h3 id="1-3-3-类加载器的继承关系"><a href="#1-3-3-类加载器的继承关系" class="headerlink" title="1.3.3 类加载器的继承关系"></a>1.3.3 类加载器的继承关系</h3><p>所有的类加载器都是 java.lang.ClassLoader 的子类</p><p>AppClassLoader extends ExtClassLoader extends BootstrapClassLoader extends ClassLoader</p><h3 id="1-3-4-类加载器机制"><a href="#1-3-4-类加载器机制" class="headerlink" title="1.3.4 类加载器机制"></a>1.3.4 类加载器机制</h3><p>全盘负责委托机制</p><p>全盘负责：A类如果要使用B类（不存在），A类加载器必须负责加载B类。</p><p>委托机制：</p><p>A类加载器如果要加载资源B，必须询问父类加载是否加载。 如果加载，将直接使用。 如果没有机制，自己再加载。</p><h3 id="1-3-5-获取类加载器"><a href="#1-3-5-获取类加载器" class="headerlink" title="1.3.5 获取类加载器"></a>1.3.5 获取类加载器</h3><ul><li><p>获取类加载器</p><p>  java.lang.Class类 成员方法</p><p>  public ClassLoader getClassLoader(): 返回该类的类加载器。</p></li><li><p>获取父类加载器</p><p>  java.lang.ClassLoader类 成员方法</p><p>  public final ClassLoader getParent(): 返回委托的父类加载器。</p></li><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo07ClassLoader</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//获取AppClassLoader</span>      ClassLoader app <span class="token operator">=</span> Demo07ClassLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sun.misc.Launcher$AppClassLoader@18b4aac2</span>      <span class="token comment" spellcheck="true">//获取ExtClassLoader</span>      ClassLoader ext <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sun.misc.Launcher$ExtClassLoader@452b3a41</span>      <span class="token comment" spellcheck="true">//获取BootstrapClassLoader</span>      ClassLoader boot <span class="token operator">=</span> ext<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>boot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//null</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//获取AppClassLoader</span>      ClassLoader app <span class="token operator">=</span> Demo07ClassLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sun.misc.Launcher$AppClassLoader@18b4aac2</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//直接获取ExtClassLoader</span>      ClassLoader ext <span class="token operator">=</span> DNSNameService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sun.misc.Launcher$ExtClassLoader@452b3a41</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//直接获取BootstrapClassLoader</span>      ClassLoader boot <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>boot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//null</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="1-4-注解"><a href="#1-4-注解" class="headerlink" title="1.4 注解"></a>1.4 注解</h2><h3 id="1-4-1-注解概述"><a href="#1-4-1-注解概述" class="headerlink" title="1.4.1 注解概述"></a>1.4.1 注解概述</h3><p>定义：注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</p><p>作用分类：</p><ul><li>编写文档：通过代码里标识的注解生成文档【例如，生成文档doc文档】</li><li>代码分析：通过代码里标识的注解对代码进行分析【例如，注解的反射】</li><li>编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【例如，Override】</li><li>简化配置开发</li></ul><p>常见注解</p><ol><li>@author：用来标识作者名</li><li>@version：用于标识对象的版本号，适用范围：文件、类、方法。</li><li>@Override ：用来修饰方法声明，告诉编译器该方法是重写父类中的方法，如果父类不存在该方法，则编译失败。</li></ol><h3 id="1-4-2-自定义注解"><a href="#1-4-2-自定义注解" class="headerlink" title="1.4.2 自定义注解"></a>1.4.2 自定义注解</h3><p>1.格式</p><p>public @interface 注解名称 {<br>         属性集<br>}</p><p>2.分类</p><ul><li>空注解: 没有属性集</li><li>有属性集的注解</li></ul><p>属性的定义格式:</p><ul><li><p>数据类型 属性名称();    //没有默认值</p></li><li><p>数据类型 属性名称() default 默认值;    //有默认值,default后面的内容</p></li></ul><p>属性的类型都有哪些?</p><ul><li>8种基本类型,String,枚举,Class类型,注解类型,以及以上任意类型的一维数组</li></ul><p>属性的作用</p><ul><li>可以让用户在使用注解时传递参数，让注解的功能更加强大。</li></ul><h3 id="1-4-3-使用自定义注解"><a href="#1-4-3-使用自定义注解" class="headerlink" title="1.4.3 使用自定义注解"></a>1.4.3 使用自定义注解</h3><ul><li><p>使用格式:<br>  @注解名称(属性名称1=属性值1,属性名称2=属性值2…)</p></li><li><p>可以使用在哪些位置? 包、类、字段、方法、局部变量、方法参数等</p></li><li><p>注意事项:</p><p>  (1)空注解可以直接使用</p><p>  (2)属性是数组,使用时,多个值用{}括起来</p><p>  (3)属性是数组,只有一个个值{}可以省略</p><p>  (4)有默认值的属性,可以省略不写</p></li></ul><h3 id="1-4-4-案例"><a href="#1-4-4-案例" class="headerlink" title="1.4.4 案例"></a>1.4.4 案例</h3><ul><li>定义一个注解：Book</li></ul><p>包含属性：String value() 书名</p><p>包含属性：double price() 价格，默认值为 100</p><p>包含属性：String[] authors() 多位作者</p><p>并使用</p><p>*示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">100</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">authors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Book</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"深入学习java反射技术"</span><span class="token punctuation">,</span>price <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>authors <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"峰哥"</span><span class="token punctuation">,</span><span class="token string">"响哥"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo08AnnotationBook</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Book</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"深入学习JVM"</span><span class="token punctuation">,</span>authors <span class="token operator">=</span> <span class="token string">"峰哥"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day23网络编程</title>
      <link href="/2020/03/01/day23-wang-luo-bian-cheng/"/>
      <url>/2020/03/01/day23-wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="day23网络编程"><a href="#day23网络编程" class="headerlink" title="day23网络编程"></a>day23网络编程</h1><h2 id="1-1-网络编程入门"><a href="#1-1-网络编程入门" class="headerlink" title="1.1 网络编程入门"></a>1.1 网络编程入门</h2><h3 id="1-1-1-软件结构"><a href="#1-1-1-软件结构" class="headerlink" title="1.1.1 软件结构"></a>1.1.1 软件结构</h3><ul><li>C/S结构 ：全称为Client/Server结构，是指客户端和服务器结构。常见程序有ＱＱ、迅雷等软件<a id="more"></a></li><li>B/S结构 ：全称为Browser/Server结构，是指浏览器和服务器结构。常见浏览器有谷歌、火狐等</li></ul><p>两种架构各有优势，但是无论哪种架构，都离不开网络的支持。网络编程，就是在一定的协议下，实现两台计算机的通信的程序。</p><h3 id="1-1-2-网络通信协议"><a href="#1-1-2-网络通信协议" class="headerlink" title="1.1.2 网络通信协议"></a>1.1.2 网络通信协议</h3><ul><li><p>网络通信协议：通信协议是对计算机必须遵守的规则，只有遵守这些规则，计算机之间才能进行通信。这就好比在道路中行驶的汽车一定要遵守交通规则一样，协议中对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守，最终完成数据交换。</p></li><li><p>TCP/IP协议： 传输控制协议/因特网互联协议( Transmission Control Protocol/Internet Protocol)，是Internet最基本、最广泛的协议。它定义了计算机如何连入因特网，以及数据如何在它们之间传输的标准。它的内部包含一系列的用于处理数据通信的协议，并采用了4层的分层模型，每一层都呼叫它的下一层所提供的协议来完成自己的需求。</p></li></ul><h3 id="1-1-3-常用协议"><a href="#1-1-3-常用协议" class="headerlink" title="1.1.3 常用协议"></a>1.1.3 常用协议</h3><p>通信的协议还是比较复杂的， java.net 包中包含的类和接口，它们提供低层次的通信细节。我们可以直接使用这些类和接口，来专注于网络程序开发，而不用考虑通信的细节。<br>java.net 包中提供了两种常见的网络协议的支持：</p><ul><li>TCP：传输控制协议 (Transmission Control Protocol)。TCP协议是面向连接的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输</li></ul><p>三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠。</p><ul><li>第一次握手，客户端向服务器端发出连接请求，等待服务器确认。</li><li>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求。</li><li>第三次握手，客户端再次向服务器端发送确认信息，确认连接。</li></ul><p>完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛，例如下载文件、浏览网页等。</p><ul><li>UDP：用户数据报协议(User Datagram Protocol)。UDP协议是一个面向无连接的协议。传输数据时，不需要建立连接，不管对方端服务是否启动，直接将数据、数据源和目的地都封装在数据包中，直接发送。每个数据包的大小限制在64k以内。它是不可靠协议，因为无连接，所以传输速度快，但是容易丢失数据。日常应用中,例如视频会议、QQ聊天等。每次发送的数据最大为64kb</li></ul><h3 id="1-1-4-网络编程三要素"><a href="#1-1-4-网络编程三要素" class="headerlink" title="1.1.4 网络编程三要素"></a>1.1.4 网络编程三要素</h3><p>协议</p><ul><li>计算机网络通信必须遵守的规则，已经介绍过了，不再赘述。</li></ul><p>IP地址</p><ul><li>指互联网协议地址（Internet Protocol Address），俗称IP。IP地址用来给一个网络中的计算机设备做唯一的编号。假如我们把“个人电脑”比作“一台电话”的话，那么“IP地址”就相当于“电话号码”。</li></ul><p>端口号</p><p>网络的通信，本质上是两个进程（应用程序）的通信。每台计算机都有很多的进程，那么在网络通信时，如何区分这些进程呢？</p><p>如果说IP地址可以唯一标识网络中的设备，那么端口号就可以唯一标识设备中的进程（应用程序）了</p><ul><li>用两个字节表示的整数，它的取值范围是0<del>65535。其中，0</del>1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。</li></ul><p>利用 协议 + IP地址 + 端口号 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。</p><h2 id="1-2-TCP通信程序"><a href="#1-2-TCP通信程序" class="headerlink" title="1.2 TCP通信程序"></a>1.2 TCP通信程序</h2><h3 id="1-2-1-概述"><a href="#1-2-1-概述" class="headerlink" title="1.2.1 概述"></a>1.2.1 概述</h3><p>TCP通信能实现两台计算机之间的数据交互，通信的两端，要严格区分为客户端（Client）与服务端（Server）。</p><p>两端通信时步骤：</p><ol><li>服务端程序，需要事先启动，等待客户端的连接。</li><li>客户端主动连接服务器端，连接成功才能通信。服务端不可以主动连接客户端。</li></ol><p>在Java中，提供了两个类用于实现TCP通信程序：</p><ol><li>客户端： java.net.Socket 类表示。创建 Socket 对象，向服务端发出连接请求，服务端响应请求，两者建立连接开始通信。</li><li>服务端： java.net.ServerSocket 类表示。创建 ServerSocket 对象，相当于开启一个服务，并等待客户端的连接。</li></ol><h3 id="1-2-2-Socket类"><a href="#1-2-2-Socket类" class="headerlink" title="1.2.2 Socket类"></a>1.2.2 Socket类</h3><p>Socket 类：该类实现客户端套接字，套接字指的是两台设备之间通讯的端点。</p><p>构造方法</p><ul><li>public Socket(String host, int port) :创建套接字对象并将其连接到指定主机上的指定端口号。如果指定的host是null ，则相当于指定地址为回送地址。</li></ul><p>小贴士：回送地址(127.x.x.x) 是本机回送地址（Loopback Address），主要用于网络软件测试以及本地机进程间通信，无论什么程序，一旦使用回送地址发送数据，立即返回，不进行任何网络传输。</p><p>成员方法</p><ul><li>public InputStream getInputStream() ： 返回此套接字的输入流。如果此Scoket具有相关联的通道，则生成的InputStream 的所有操作也关联该通道。关闭生成InputStream也将关闭相关的Socket。</li><li>public OutputStream getOutputStream() ： 返回此套接字的输出流。如果此Scoket具有相关联的通道，则生成的OutputStream 的所有操作也关联该通道。关闭生成的OutputStream也将关闭相关的Socket。</li><li>public void close() ：关闭此套接字。一旦一个socket被关闭，它不可再使用。<br>关闭此socket也将关闭相关的InputStream和OutputStream 。</li><li>public void shutdownOutput() ： 禁用此套接字的输出流。任何先前写出的数据将被发送，随后终止输出流。相当于发送-1。</li></ul><h3 id="1-2-3-ServerSocket类"><a href="#1-2-3-ServerSocket类" class="headerlink" title="1.2.3 ServerSocket类"></a>1.2.3 ServerSocket类</h3><p>ServerSocket 类：这个类实现了服务器套接字，该对象等待通过网络的请求。</p><p>构造方法</p><ul><li>public ServerSocket(int port) ：使用该构造方法在创建ServerSocket对象时，就可以将其绑定到一个指定的端口号上，参数port就是端口号。</li></ul><p>成员方法</p><ul><li>public Socket accept() ：侦听并接受连接，返回一个新的Socket对象，用于和客户端实现通信。该方法会一直阻塞直到建立连接。</li></ul><h3 id="1-2-4-简单的TCP网络程序"><a href="#1-2-4-简单的TCP网络程序" class="headerlink" title="1.2.4 简单的TCP网络程序"></a>1.2.4 简单的TCP网络程序</h3><p>TCP通信分析图解</p><p><img src="/2020/03/01/day23-wang-luo-bian-cheng/01_TCP%E9%80%9A%E4%BF%A1%E7%9A%84%E5%8E%9F%E7%90%86.png" alt="01_TCP通信的原理图"></p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建客户端Socket对象,指定要连接的服务器的ip地址和端口号</span>        Socket client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.客户端Socket对象调用getOutputStream方法,获取客户端的字节输出流对象</span>        OutputStream netOs <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.客户端的字节输出流对象调用write方法,给服务器发送请求信息</span>        netOs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好,服务器"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.客户端Socket对象调用getInputStream方法,获取客户端的字节输入流对象</span>        InputStream netIs <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.客户端的字节输入流对象调用read方法,读取服务器端发送回来的响应信息</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        len <span class="token operator">=</span> netIs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端收到服务器端的响应信息: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6.关闭流,释放资源</span>        netIs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        netOs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建服务器端的ServerSocket对象,指定端口号</span>        ServerSocket server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.服务器端的ServerSocket对象调用accept方法,获取连接到服务器的客户端Socket对象</span>        Socket client <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.服务器的客户端Socket对象调用getInputStream方法,获取服务器端的字节输入流对象</span>        InputStream netIs <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.服务器端的字节输入流对象调用read方法,读取客户端发送的请求信息</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        len <span class="token operator">=</span> netIs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器端收到客户端的请求信息: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.服务器的客户端Socket对象调用getOutputStream方法,获取服务器端的字节输出流对象</span>        OutputStream netOs <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6.服务器端的字节输出流对象调用write方法,给客户端发送响应信息</span>        netOs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"我很好,老弟~~~"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//7.关闭流释放资源</span>        netIs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        netOs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-3-综合案例"><a href="#1-3-综合案例" class="headerlink" title="1.3 综合案例"></a>1.3 综合案例</h2><h3 id="1-3-1-文件上传案例"><a href="#1-3-1-文件上传案例" class="headerlink" title="1.3.1 文件上传案例"></a>1.3.1 文件上传案例</h3><p>文件上传分析图解<br><img src="/2020/03/01/day23-wang-luo-bian-cheng/02_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90.png" alt="02_文件上传分析图"></p><p>文件上传问题分析图解<br><img src="/2020/03/01/day23-wang-luo-bian-cheng/03_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90.png" alt="03_文件上传问题分析图"></p><p>并使其能够实现多线程，接入多个客户端</p><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpLoadClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建客户端Socket对象,指定连接服务器的ip地址和端口号</span>        Socket client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建文件字节输入流FileInputStream类对象fis,绑定客户端本地源文件</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"day14\\from\\1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.客户端Socket对象调用getOutputStream方法,获取客户端的字节输出流对象</span>        OutputStream netOs <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.循环读(客户端本地文件)写(服务器)</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            netOs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//通知服务器,文件传输完毕,相当于给服务器发送一个-1</span>        client<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.客户端Socket对象调用getInputStream方法,获取客户端的字节输入流对象</span>        InputStream netIs <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6.客户端的字节输入流对象调用read方法,读取服务器发送回来的响应信息</span>        len <span class="token operator">=</span> netIs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端收到服务器的响应信息: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//7.关闭流,释放资源</span>        netIs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        netOs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpLoadServer4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建服务器端ServerSocket对象,指定端口号</span>        ServerSocket server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//死循环</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//2.服务器端ServerSocket对象调用accept方法,获取连接服务器的Socket对象</span>            Socket client <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/*                该方法用来控制服务端的被访问权限                flag: true  表示所有客户端都可以访问                flag: false 表示只允许本机的客户端访问             */</span>             NetUtils<span class="token punctuation">.</span><span class="token function">control</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//来了一个客户端,就应该给这个客户端单独开启一个线程</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//创建一个新的文件名称,防止文件同名时,被覆盖</span>                        String newFileName <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//3.创建文件字节输出流FileOutputStream类的对象fos,绑定服务器端本地目标文件</span>                        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"day14\\upload"</span><span class="token punctuation">,</span>newFileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//4.连接服务器的Socket对象调用getInputStream方法,获取服务器端的字节输入流对象</span>                        InputStream netIs <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//5.循环读(客户端发送的信息)写(服务器端的本地目标文件)</span>                        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> netIs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//6.连接服务器的Socket对象调用getOutputStream方法,获取服务器端的字节输出流对象</span>                        OutputStream netOs <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//7.服务器端的字节输出流对象调用write方法,给客户端发送响应信息</span>                        netOs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"上传成功"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//8.关闭流,释放资源</span>                        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        netIs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        netOs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//server.close();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-2-模拟B-S服务器"><a href="#1-3-2-模拟B-S服务器" class="headerlink" title="1.3.2 模拟B\S服务器"></a>1.3.2 模拟B\S服务器</h3><p>模拟网站服务器，使用浏览器访问自己编写的服务端程序，查看网页效果</p><p>浏览器访问服务器原理分析<br><img src="/2020/03/01/day23-wang-luo-bian-cheng/04_%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%86%E6%9E%90.png" alt="04_浏览器访问服务器分析图"></p><h3 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建服务器端的ServerSocket对象,指定端口号</span>        ServerSocket server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//死循环</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//2.服务器端ServerSocket对象调用accept方法,获取连接服务器的Socket对象</span>            Socket client <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//进来一个客户端,开启一个线程</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//3.连接服务器的Socket对象调用getInputStream方法,获取服务器端的字节输入流对象</span>                        InputStream netIs <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//4.通过服务器端的字节输入流对象获取浏览器请求文件路径</span>                        <span class="token comment" spellcheck="true">//字节输入流转换成字符缓冲输入流</span>                        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>netIs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//读取第一行</span>                        String line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//System.out.println(line);//GET /day14/web/index.html HTTP/1.1</span>                        String path <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// day14/web/index.html</span>                        <span class="token comment" spellcheck="true">//文件夹中,没有此文件</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"favicon.ico"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//5.创建文件字节输入流FileInputStream对象,绑定服务器端的源文件(浏览器请求的文件)</span>                        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//6.连接服务器的Socket对象调用getOutputStream方法,获取服务器端的字节输出流对象</span>                        OutputStream netOs <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//服务器给浏览器响应.html文件前,必须下发送以下三行内容</span>                        netOs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"HTTP/1.1 200 OK\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        netOs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Content-Type:text/html\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        netOs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//7.循环读(服务器端的目标文件)写(客户端浏览器)</span>                        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            netOs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//8.关闭资源</span>                        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        netOs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//server.close();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day22Lambda、函数式接口、Stream流</title>
      <link href="/2020/03/01/day22lambda-han-shu-shi-jie-kou-stream-liu/"/>
      <url>/2020/03/01/day22lambda-han-shu-shi-jie-kou-stream-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="day22Lambda、函数式接口、Stream流"><a href="#day22Lambda、函数式接口、Stream流" class="headerlink" title="day22Lambda、函数式接口、Stream流"></a>day22Lambda、函数式接口、Stream流</h1><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><h3 id="1-1-1-函数式编程思想概述"><a href="#1-1-1-函数式编程思想概述" class="headerlink" title="1.1.1 函数式编程思想概述"></a>1.1.1 函数式编程思想概述</h3><p>在数学中，函数就是有输入量、输出量的一套计算方案，也就是“拿什么东西做什么事情”。相对而言，面向对象过分强调“必须通过对象的形式来做事情”，而函数式思想则尽量忽略面向对象的复杂语法——强调做什么，而不是以什么形式做。</p><a id="more"></a><h3 id="1-1-2-Lambda的优化"><a href="#1-1-2-Lambda的优化" class="headerlink" title="1.1.2 Lambda的优化"></a>1.1.2 Lambda的优化</h3><p>当需要启动一个线程去完成任务时，通常会通过 java.lang.Runnable 接口来定义任务内容，并使用java.lang.Thread 类来启动该线程。</p><p>传统写法,代码如下：</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//.创建Runnable接口的匿名内部类对象</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程B执行了...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>本着“一切皆对象”的思想，这种做法是无可厚非的：首先创建一个 Runnable 接口的匿名内部类对象来指定任务内容，再将其交给一个线程来启动。</p><p>代码分析:</p><p>对于 Runnable 的匿名内部类用法，可以分析出几点内容：</p><ul><li>Thread 类需要 Runnable 接口作为参数，其中的抽象 run 方法是用来指定线程任务内容的核心；</li><li>为了指定 run 的方法体，不得不需要 Runnable 接口的实现类；</li><li>为了省去定义一个 RunnableImpl 实现类的麻烦，不得不使用匿名内部类；</li><li>必须覆盖重写抽象 run 方法，所以方法名称、方法参数、方法返回值不得不再写一遍，且不能写错；</li><li>而实际上，似乎只有方法体才是关键所在。</li></ul><p>Lambda表达式写法,代码如下：</p><p>借助Java 8的全新语法，上述 Runnable 接口的匿名内部类写法可以通过更简单的Lambda表达式达到等效：</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程B执行了...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这段代码和刚才的执行效果是完全一样的，可以在1.8或更高的编译级别下通过。从代码的语义中可以看出：我们启动了一个线程，而线程任务的内容以一种更加简洁的形式被指定。<br>不再有“不得不创建接口对象”的束缚，不再有“抽象方法覆盖重写”的负担，就是这么简单！</p><h3 id="1-1-3-Lambda的格式"><a href="#1-1-3-Lambda的格式" class="headerlink" title="1.1.3 Lambda的格式"></a>1.1.3 Lambda的格式</h3><p>标准格式:</p><p>Lambda省去面向对象的条条框框，格式由3个部分组成：</p><ol><li>一些参数</li><li>一个箭头</li><li>一段代码</li></ol><p>Lambda表达式的标准格式为：<br>(参数类型 参数名称) -&gt; { 代码语句 }</p><p>格式说明：</p><ul><li>小括号内的语法与传统方法参数列表一致：无参数则留空；多个参数则用逗号分隔。</li><li>-&gt; 是新引入的语法格式，代表指向动作。</li><li>大括号内的语法与传统方法体要求基本一致。</li></ul><p>参数和返回值：</p><p>下面举例演示 java.util.Comparator<T> 接口的使用场景代码，其中的抽象方法定义为：</T></p><ul><li>public abstract int compare(T o1, T o2);</li></ul><p>当需要对一个对象数组进行排序时， Arrays.sort 方法需要一个 Comparator 接口实例来指定排序的规则。假设有一个 Person 类，含有 String name 和 int age 两个成员量：</p><p>匿名内部类对象的方式：</p><pre class=" language-java"><code class="language-java">        Person<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前: "</span><span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.匿名内部类对象的方式</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Person o1<span class="token punctuation">,</span> Person o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄升序排序后: "</span><span class="token operator">+</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>lambda表达式的方式：</p><pre class=" language-java"><code class="language-java">Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token punctuation">(</span>Person p1<span class="token punctuation">,</span>Person p2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> p2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> p1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄降序排序后: "</span><span class="token operator">+</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>省略格式:</p><p>在Lambda标准格式的基础上，使用省略写法的规则为：</p><ol><li>小括号内参数的类型可以省略；</li><li>如果小括号内有且仅有一个参，则小括号可以省略；</li><li>如果大括号内有且仅有一个语句，则无论是否有返回值，都可以省略大括号、return关键字及语句分号。</li></ol><p>可推导即可省略</p><p>Lambda强调的是“做什么”而不是“怎么做”，所以凡是可以推导得知的信息，都可以省略。</p><h3 id="1-1-4-Lambda的前提条件"><a href="#1-1-4-Lambda的前提条件" class="headerlink" title="1.1.4 Lambda的前提条件"></a>1.1.4 Lambda的前提条件</h3><p>Lambda的语法非常简洁，完全没有面向对象复杂的束缚。但是使用时有几个问题需要特别注意：</p><ol><li>使用Lambda必须具有接口，且要求接口中有且仅有一个抽象方法。无论是JDK内置的 Runnable 、 Comparator 接口还是自定义的接口，只有当接口中的抽象方法存在且唯一时，才可以使用Lambda。</li><li>使用Lambda必须具有接口作为方法参数。也就是方法的参数或局部变量类型必须为Lambda对应的接口类型，才能使用Lambda作为该接口的实例。</li></ol><p>备注：有且仅有一个抽象方法的接口，称为“函数式接口”</p><h2 id="1-2-函数式接口"><a href="#1-2-函数式接口" class="headerlink" title="1.2 函数式接口"></a>1.2 函数式接口</h2><h3 id="1-2-1-概述"><a href="#1-2-1-概述" class="headerlink" title="1.2.1 概述"></a>1.2.1 概述</h3><p>函数式接口在Java中是指：有且仅有一个抽象方法的接口。</p><p>函数式接口，即适用于函数式编程场景的接口。而Java中的函数式编程体现就是Lambda，所以函数式接口就是可以适用于Lambda使用的接口。只有确保接口中有且仅有一个抽象方法，Java中的Lambda才能顺利地进行推导。</p><p>备注:从应用层面来讲，Java中的Lambda可以看做是匿名内部类的简化格式，但是二者在原理上不同。</p><p>格式：</p><p>只要确保接口中有且仅有一个抽象方法即可：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFunctionalInter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//public abstract void show();//函数是接口中,只能有一个抽象方法</span>    <span class="token comment" spellcheck="true">//默认方法: 只能用实现类对象调用</span>    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认方法...print..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//静态方法: 只能接口名称调用</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态方法...show..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>自定义函数式接口：</p><p>对于刚刚定义好的 MyFunctionalInterface 函数式接口，典型使用场景就是作为方法的参数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03LambdaBase</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.匿名内部类对象的方式</span>        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyFunctionalInter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.lambda表达式的标准方式</span>        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.lambda表达式的简化方式</span>        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C..."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>MyFunctionalInter mfi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用抽象方法</span>        mfi<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用默认方法</span>        mfi<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用静态方法</span>        MyFunctionalInter<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>FunctionalInterface注解：</p><p>与 @Override 注解的作用类似，Java 8中专门为函数式接口引入了一个新的注解： @FunctionalInterface 。该注解可用于一个接口的定义上：</p><p>一旦使用该注解来定义接口，编译器将会强制检查该接口是否确实有且仅有一个抽象方法，否则将会报错。不过，即使不使用该注解，只要满足函数式接口的定义，这仍然是一个函数式接口，使用起来都一样。</p><h3 id="1-2-2-常用函数式接口"><a href="#1-2-2-常用函数式接口" class="headerlink" title="1.2.2 常用函数式接口"></a>1.2.2 常用函数式接口</h3><p>JDK提供了大量常用的函数式接口以丰富Lambda的典型使用场景，它们主要在 java.util.function 包中被提供。下面是两个常用的函数式接口及使用示例。</p><p>Consumer接口：</p><p>java.util.function.Consumer<T> 接口，是消费一个数据，其数据类型由泛型参数决定。</T></p><p>抽象方法：accept</p><p>Consumer 接口中包含抽象方法 void accept(T t) : 消费一个指定泛型的数据。</p><p>*示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04Consumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.匿名内部类对象的方式</span>        <span class="token function">method</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.lambda表达式的标准方式</span>        <span class="token function">method</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长度: "</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.lambda表达式的简化方式</span>        <span class="token function">method</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>s <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全部大写: "</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        定义方法,使用函数式接口Consumer作为参数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span>Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> con<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用抽象方法</span>        con<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Predicate接口</p><p>有时候我们需要对某种类型的数据进行判断，从而得到一个boolean值结果。这时可以使用<br>java.util.function.Predicate<T> 接口。</T></p><p>抽象方法：test</p><p>Predicate 接口中包含一个抽象方法： boolean test(T t) 。用于条件判断的场景：</p><p>*示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05Predicate</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str <span class="token operator">=</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.匿名内部类对象的方式</span>        <span class="token function">method</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//断字符串长度是否大于5</span>                <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.lambda表达式的标准方式</span>        <span class="token comment" spellcheck="true">//断字符串长度是否大于5</span>        <span class="token function">method</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.lambda表达式的简化方式</span>        <span class="token comment" spellcheck="true">//断字符串长度是否大于5</span>        <span class="token function">method</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        定义方法,使用函数式接口Predicate作为参数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span>Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-3-Stream流"><a href="#1-3-Stream流" class="headerlink" title="1.3 Stream流"></a>1.3 Stream流</h2><p>在Java 8中，得益于Lambda所带来的函数式编程，引入了一个全新的Stream概念，用于解决已有集合类库既有的弊端。</p><h3 id="1-3-1-引言"><a href="#1-3-1-引言" class="headerlink" title="1.3.1 引言"></a>1.3.1 引言</h3><p>传统集合的多步遍历代码</p><p>几乎所有的集合（如 Collection 接口或 Map 接口等）都支持直接或间接的遍历操作。而当我们需要对集合中的元素进行操作的时候，除了必需的添加、删除、获取外，最典型的就是集合遍历。例如：</p><pre class=" language-java"><code class="language-java">   List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"周芷若"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"赵敏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三丰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1. 首先筛选所有姓张的人</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> zhangList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>这是一段非常简单的集合遍历操作：对集合中的每一个字符串都进行打印输出操作。</p><p>循环遍历的弊端</p><p>Java 8的Lambda让我们可以更加专注于做什么（What），而不是怎么做（How），这点此前已经结合内部类进行了对比说明。现在，我们仔细体会一下上例代码，可以发现：</p><ul><li>for循环的语法就是“怎么做”</li><li>for循环的循环体才是“做什么”</li></ul><p>为什么使用循环？因为要进行遍历。但循环是遍历的唯一方式吗？遍历是指每一个元素逐一进行处理，而并不是从第一个到最后一个顺次处理的循环。前者是目的，后者是方式。</p><p>每当我们需要对集合中的元素进行操作的时候，总是需要进行循环、循环、再循环。这是理所当然的么？不是。循环是做事情的方式，而不是目的。另一方面，使用线性循环就意味着只能遍历一次。如果希望再次遍历，只能再使用另一个循环从头开始。</p><p>那，Lambda的衍生物Stream能给我们带来怎样更加优雅的写法呢？</p><h3 id="1-3-2-流式思想概述"><a href="#1-3-2-流式思想概述" class="headerlink" title="1.3.2 流式思想概述"></a>1.3.2 流式思想概述</h3><p>注意：请暂时忘记对传统IO流的固有印象！</p><p>整体来看，流式思想类似于工厂车间的“生产流水线”</p><p>当需要对多个元素进行操作（特别是多步操作）的时候，考虑到性能及便利性，我们应该首先拼好一个“模型”步骤方案，然后再按照方案去执行它。</p><p><img src="/2020/03/01/day22lambda-han-shu-shi-jie-kou-stream-liu/Stream%E6%B5%81%E7%9A%84%E6%A6%82%E5%BF%B5.png" alt="Stream流的概念图"><br>这张图中展示了过滤、映射、跳过、计数等多步操作，这是一种集合元素的处理方案，而方案就是一种“函数模型”。图中的每一个方框都是一个“流”，调用指定的方法，可以从一个流模型转换为另一个流模型。而最右侧的数字3是最终结果。</p><p>这里的 filter 、 map 、 skip 都是在对函数模型进行操作，集合元素并没有真正被处理。只有当终结方法 count执行的时候，整个模型才会按照指定策略执行操作。而这得益于Lambda的延迟执行特性。</p><p>备注：“Stream流”其实是一个集合元素的函数模型，它并不是集合，也不是数据结构，其本身并不存储任何元素（或其地址值）</p><h3 id="1-3-3-获取流方式"><a href="#1-3-3-获取流方式" class="headerlink" title="1.3.3 获取流方式"></a>1.3.3 获取流方式</h3><p>java.util.stream.Stream<T> 是Java 8新加入的最常用的流接口。（这并不是一个函数式接口。）</T></p><p>获取一个流非常简单，有以下几种常用的方式：</p><ol><li><p>方式一:</p><p>java.util.Collection<T> 接口</T></p><p>默认方法: 必须由Collection接口的实现类(ArrayList/LinkedList/HashSet/LinkedHashSet)对象调用</p><p>public default Stream<T> stream(): 获取Collection集合对象对应的Stream流对象</T></p></li><li><p>方式二:</p><p>java.util.stream.Stream<T> 接口:</T></p><p>静态方法</p><p>public static <T> Stream<T> of(T … t): 把方法的可变参数指定的具体数据,转换成Stream流对象</T></T></p><p>参数: T … t: 可变参数   传递数组,参数列表,不传递</p></li></ol><p>*示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05GetStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取List集合的Stream对象</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> s1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取Set集合的Stream对象</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> s2 <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Map键的Set集合</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set2 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> s3 <span class="token operator">=</span> set2<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Map值的Collection集合</span>        Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> coll <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> s4 <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Map键值对的Set集合</span>        Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> set3 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> s5 <span class="token operator">=</span> set3<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Hello"</span><span class="token punctuation">,</span><span class="token string">"World"</span><span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> s6 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6<span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> s7 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s7<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-4-常用方法"><a href="#1-3-4-常用方法" class="headerlink" title="1.3.4 常用方法"></a>1.3.4 常用方法</h3><p>流模型的操作很丰富，这里介绍一些常用的API。这些方法可以被分成两种：</p><ul><li><p>终结方法：返回值类型不再是 Stream 接口自身类型的方法，因此不再支持类似 StringBuilder 那样的链式调用。本小节中，终结方法包括 count 和 forEach 方法。</p></li><li><p>非终结方法：返回值类型仍然是 Stream 接口自身类型的方法，因此支持链式调用。（除了终结方法外，其余方法均为非终结方法。）</p></li></ul><p>forEach : 逐一处理</p><p>虽然方法名字叫 forEach ，但是与for循环中的“for-each”昵称不同，该方法并不保证元素的逐一消费动作在流中是被有序执行的。</p><p>void forEach(Consumer&lt;? super T&gt; action);</p><ul><li>filter：过滤</li></ul><p>可以通过 filter 方法将一个流转换成另一个子集流。</p><p>方法声明：Stream<T> filter(Predicate&lt;? super T&gt; predicate);</T></p><ul><li>count：统计个数</li></ul><p>正如旧集合 Collection 当中的 size 方法一样，流提供 count 方法来数一数其中的元素个数：</p><p>long count();</p><ul><li>limit：取用前几个</li></ul><p>limit  方法可以对流进行截取，只取用前n个。</p><p>方法声明：Stream<T> limit(long maxSize):获取Stream流对象中的前n个元素,返回一个新的Stream流对象</T></p><ul><li>skip：跳过前几个</li></ul><p>如果希望跳过前几个元素，可以使用 skip 方法获取一个截取之后的新流：</p><p>Stream<T> skip(long n): 跳过Stream流对象中的前n个元素,返回一个新的Stream流对象</T></p><p>如果流的当前长度大于n，则跳过前n个；否则将会得到一个长度为0的空流。</p><ul><li>concat：组合</li></ul><p>如果有两个流，希望合并成为一个流，那么可以使用 Stream 接口的静态方法 concat ：</p><p>static <T> Stream<T> concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b): 把参数列表中的两个Stream流对象a和b,合并成一个新的Stream流对象</T></T></p><h3 id="1-4-5-Stream综合案例"><a href="#1-4-5-Stream综合案例" class="headerlink" title="1.4.5 Stream综合案例"></a>1.4.5 Stream综合案例</h3><p>现在有两个 ArrayList 集合存储队伍当中的多个成员姓名，要求使用传统的for循环（或增强for循环）依次进行以<br>下若干操作步骤：</p><ol><li>第一个队伍只要名字为3个字的成员姓名；</li><li>第一个队伍筛选之后只要前3个人；</li><li>第二个队伍只要姓张的成员姓名；</li><li>第二个队伍筛选之后不要前2个人；</li><li>将两个队伍合并为一个队伍；</li><li>打印整个队伍的姓名信息。</li></ol><p>*示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05ListEach</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"迪丽热巴"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"宋远桥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"苏星河"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"老子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"庄子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"孙子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"洪七公"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"古力娜扎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三丰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"赵丽颖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张二狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张天爱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>                o<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>name<span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                t<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>name<span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day21缓冲流、转换流、序列化流、打印流</title>
      <link href="/2020/02/26/day21-huan-chong-liu-zhuan-huan-liu-xu-lie-hua-liu-da-yin-liu/"/>
      <url>/2020/02/26/day21-huan-chong-liu-zhuan-huan-liu-xu-lie-hua-liu-da-yin-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="day21缓冲流、转换流、序列化流、打印流"><a href="#day21缓冲流、转换流、序列化流、打印流" class="headerlink" title="day21缓冲流、转换流、序列化流、打印流"></a>day21缓冲流、转换流、序列化流、打印流</h1><h2 id="1-1-缓冲流"><a href="#1-1-缓冲流" class="headerlink" title="1.1 缓冲流"></a>1.1 缓冲流</h2><p>昨天学习了基本的一些流，作为IO流的入门，今天我们要见识一些更强大的流。比如能够高效读写的缓冲流，能够转换编码的转换流，能够持久化存储对象的序列化流等等。这些功能更为强大的流，都是在基本的流对象基础之上创建而来的，就像穿上铠甲的武士一样，相当于是对基本流对象的一种增强。</p><h3 id="1-1-1-概述"><a href="#1-1-1-概述" class="headerlink" title="1.1.1 概述"></a>1.1.1 概述</h3><a id="more"></a><p>缓冲流,也叫高效流，是对4个基本的 FileXxx 流的增强，所以也是4个流，按照数据类型分类：</p><ul><li>字节缓冲流： BufferedInputStream ， BufferedOutputStream</li><li>字符缓冲流： BufferedReader ， BufferedWriter</li></ul><p>缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。</p><h3 id="1-1-2-字节缓冲流"><a href="#1-1-2-字节缓冲流" class="headerlink" title="1.1.2 字节缓冲流"></a>1.1.2 字节缓冲流</h3><ul><li>构造方法</li></ul><p>public BufferedInputStream(InputStream in) ：创建一个 新的缓冲输入流。</p><p>public BufferedOutputStream(OutputStream out) ： 创建一个新的缓冲输出流。</p><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java">      <span class="token comment" spellcheck="true">//1.创建高效缓冲字节输入流BufferedInputStream类的对象bis,传递FileInputStream类的对象fis,绑定源文件</span>      BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.创建高效缓冲字节输出流BufferedOutputStream类的对象bos,传递FileOutputStream类的对象fos,绑定目标文件</span>      BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="1-1-3-字符缓冲流"><a href="#1-1-3-字符缓冲流" class="headerlink" title="1.1.3 字符缓冲流"></a>1.1.3 字符缓冲流</h3><ul><li>构造方法</li></ul><p>public BufferedReader(Reader in) ：创建一个 新的缓冲输入流。</p><p>public BufferedWriter(Writer out) ： 创建一个新的缓冲输出流。</p><ul><li>特有方法</li></ul><p>BufferedReader： public String readLine() : 读一行文字。</p><p>BufferedWriter： public void newLine() : 写一行行分隔符,由系统属性定义符号。</p><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">//1.创建高效字符输出流BufferedWriter对象bw,传递Writer类的子类FileWriter对象</span>   BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"day12\\bw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//2.创建高效字符输入流BufferedReader对象br,传递Reader类的子类FileReader对象</span>   BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"day12\\bw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   </code></pre></li></ul><h3 id="1-1-4-练习-文本排序"><a href="#1-1-4-练习-文本排序" class="headerlink" title="1.1.4 练习:文本排序"></a>1.1.4 练习:文本排序</h3><p>将前面带有序号的文本进行排序</p><p>案例分析</p><ol><li>使用流对象逐行读取原文本信息,把读取的信息保存到集合中</li><li>使用Collections集合工具类中的方法sort,对集合中的元素按照自定义规则排序</li><li>遍历集合,把集合中排序后的文本在写入到新的记事本中</li></ol><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04TxtFileSort</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.创建BufferedReader类的对象br,绑定源文件csbnosort.txt</span>      BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"day12\\csbnosort.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.创建Map集合对象,键: Integer,值: String</span>      Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//3.循环按行读取源文件</span>      String line <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//3.1 把读取到的当前行进行按照句点(.)切割</span>          String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//3.2 把切割后的内容存储到Map集合中(数字作为键,文本作为值)</span>          map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//4.获取Map集合对象中的所有的键对应的Set集合</span>      Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//5.所有的键对应的Set集合转换成List集合: 利用构造方法</span>      List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//6.Collections的sort方法对List集合进行排序</span>      Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//7.创建BufferedWriter对象bw,绑定目标文件csbsorted.txt</span>      BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"day12\\csbsorted.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//8.遍历List集合</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer num <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//8.1 使用当前数字作为键,获取对应的值</span>          String str <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//8.2 把键和值,拼接出一行</span>          String line2 <span class="token operator">=</span> num <span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span> str<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//8.3 BufferedWriter对象bw调用write方法写入新的一行</span>          bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line2<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//8.4 BufferedWriter对象bw调用write方法写入换行符</span>          bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//9.关闭流,释放资源</span>      br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre></li></ul><h2 id="1-2-转换流"><a href="#1-2-转换流" class="headerlink" title="1.2 转换流"></a>1.2 转换流</h2><h3 id="1-2-1-字符编码和字符集"><a href="#1-2-1-字符编码和字符集" class="headerlink" title="1.2.1 字符编码和字符集"></a>1.2.1 字符编码和字符集</h3><p>字符编码</p><p>计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为编码 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为解码 。比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本f符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。</p><p>编码: 字符转换为字节</p><p>解码:字节转换为字符</p><p>字符集</p><p>Charset ：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</p><p>计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBK字符集、Unicode字符集等</p><h3 id="1-2-2-编码引出的问题"><a href="#1-2-2-编码引出的问题" class="headerlink" title="1.2.2 编码引出的问题"></a>1.2.2 编码引出的问题</h3><p>在IDEA中，使用 FileReader 读取项目中的文本文件。由于IDEA的设置，都是默认的 UTF-8 编码，所以没有任何问题。但是，当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。</p><p>乱码分析图解<br><img src="/2020/02/26/day21-huan-chong-liu-zhuan-huan-liu-xu-lie-hua-liu-da-yin-liu/01_%E4%B9%B1%E7%A0%81%E7%9A%84%E5%88%86%E6%9E%90.png" alt="01_乱码的分析图"></p><ul><li>示例代码<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04LuanMa</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"day12\\luanma.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//单字符循环读取</span>      <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="1-2-3-字节转换流"><a href="#1-2-3-字节转换流" class="headerlink" title="1.2.3 字节转换流"></a>1.2.3 字节转换流</h3><p>转换流 java.io.InputStreamReader ，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。</p><p>转换流 java.io.OutputStreamWriter ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符<br>编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集</p><ul><li>构造方法</li></ul><p>InputStreamReader(InputStream in) : 创建一个使用默认字符集的字符流。</p><p>InputStreamReader(InputStream in, String charsetName) : 创建一个指定字符集的字符流。</p><ul><li>构造方法</li></ul><p>OutputStreamWriter(OutputStream in) : 创建一个使用默认字符集的字符流。</p><p>OutputStreamWriter(OutputStream in, String charsetName) : 创建一个指定字符集的字符流。</p><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java">      <span class="token comment" spellcheck="true">//1.创建InputStreamReader类对象isr,创建匿名的文件输入对象,指定编码表</span>      InputStreamReader isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"day12\\utf8file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.创建OutputStreamWriter类对象osw,创建匿名的文件输出对象,指定编码表</span>      OutputStreamWriter osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"day12\\gbkfile2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>字节流的转换图解<br><img src="/2020/02/26/day21-huan-chong-liu-zhuan-huan-liu-xu-lie-hua-liu-da-yin-liu/02_InputStreamReader%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90.png" alt="02_InputStreamReader原理分析图"><br><img src="/2020/02/26/day21-huan-chong-liu-zhuan-huan-liu-xu-lie-hua-liu-da-yin-liu/03_OutputStreamWriter%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90.png" alt="03_OutputStreamWriter原理分析图"></p><h2 id="1-3-序列化流"><a href="#1-3-序列化流" class="headerlink" title="1.3 序列化流"></a>1.3 序列化流</h2><h3 id="1-3-1-概述"><a href="#1-3-1-概述" class="headerlink" title="1.3.1 概述"></a>1.3.1 概述</h3><p>Java 提供了一种对象序列化的机制。用一个字节序列可以表示一个对象，该字节序列包含该 对象的数据 、 对象的类型 和 对象中存储的属性 等信息。字节序列写出到文件之后，相当于文件中持久保存了一个对象的信息。</p><p>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行反序列化。 对象的数据 、 对象的类型 和 对象中存储的数据 信息，都可以用来在内存中创建对象。</p><p>序列化图解<br><img src="/2020/02/26/day21-huan-chong-liu-zhuan-huan-liu-xu-lie-hua-liu-da-yin-liu/04_%E5%BA%8F%E5%88%97%E5%8C%96_%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E6%A6%82%E5%BF%B5.png" alt="04_序列化_反序列化的概念图"></p><h3 id="1-3-2-ObjectOutputStream类"><a href="#1-3-2-ObjectOutputStream类" class="headerlink" title="1.3.2 ObjectOutputStream类"></a>1.3.2 ObjectOutputStream类</h3><p>java.io.ObjectOutputStream 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。</p><ul><li>构造方法</li></ul><p>public ObjectOutputStream(OutputStream out) ： 创建一个指定OutputStream的ObjectOutputStream。</p><ul><li>序列化操作</li></ul><ol><li>一个对象要想序列化，必须满足两个条件:该类必须实现 java.io.Serializable 接口， Serializable 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出 NotSerializableException 。</li><li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用transient 关键字修饰</li><li>写出对象方法<br>public final void writeObject (Object obj) : 将指定的对象写出。</li></ol><h3 id="1-3-3-ObjectInputStream类"><a href="#1-3-3-ObjectInputStream类" class="headerlink" title="1.3.3 ObjectInputStream类"></a>1.3.3 ObjectInputStream类</h3><p>ObjectInputStream反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。</p><ul><li>构造方法</li></ul><p>public ObjectInputStream(InputStream in) ： 创建一个指定InputStream的ObjectInputStream。</p><ul><li><p>反序列化操作1<br>如果能找到一个对象的class文件，我们可以进行反序列化操作，调用ObjectInputStream 读取对象的方法：public final Object readObject () : 读取一个对象。</p></li><li><p>反序列化操作2<br>另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个 InvalidClassException 异常。发生这个异常的原因如下：</p></li></ul><p>该类的序列版本号与从流中读取的类描述符的版本号不匹配</p><p>该类包含未知数据类型</p><p>该类没有可访问的无参数构造方法</p><p>Serializable 接口给需要序列化的类，提供了一个序列版本号。 serialVersionUID 该版本号的目的在于验证序列化的对象和对应类是否版本匹配。 </p><p>序列号冲突图解<br><img src="/2020/02/26/day21-huan-chong-liu-zhuan-huan-liu-xu-lie-hua-liu-da-yin-liu/05_%E5%BA%8F%E5%88%97%E5%8F%B7%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png" alt="05_序列号冲突的解决方案图"></p><h3 id="序列化和反序列化示例代码"><a href="#序列化和反序列化示例代码" class="headerlink" title="序列化和反序列化示例代码"></a>序列化和反序列化示例代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05WriteReadObject</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//writeObject2File();</span>        <span class="token function">readObjectFromFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//反序列化: 从文件中读出一个对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readObjectFromFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建字节输入流InputStream类的子类FileInputStream对象fis,绑定源文件</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"day12\\info.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建ObjectInputStream类的对象ois,传递fis</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.ObjectInputStream类的对象ois调用readObject方法,从文件中读出一个对象</span>        Person p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.关闭流,释放资源</span>        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//序列化: 把对象写入到文件</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeObject2File</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建字节输出流OutputStream类的子类FileOutputStream对象fos,绑定目标文件</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"day12\\info.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建一个需要序列化的对象</span>        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.创建ObjectOutputStream类的对象oos,传递fos</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.ObjectOutputStream类的对象oos调用writeObject方法,向文件中写出对象</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.关闭流,释放资源</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-4-打印流"><a href="#1-4-打印流" class="headerlink" title="1.4 打印流"></a>1.4 打印流</h2><h3 id="1-4-1-概述"><a href="#1-4-1-概述" class="headerlink" title="1.4.1 概述"></a>1.4.1 概述</h3><p>平时我们在控制台打印输出，是调用 print 方法和 println 方法完成的，这两个方法都来自于java.io.PrintStream 类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。</p><h3 id="1-4-2-PrintStream类"><a href="#1-4-2-PrintStream类" class="headerlink" title="1.4.2 PrintStream类"></a>1.4.2 PrintStream类</h3><ul><li>构造方法<br>public PrintStream(String fileName) ： 使用指定的文件名创建一个新的打印流。</li></ul><ul><li>特有方法</li></ul><p>print(xxx):不带换行     原样写出</p><p>println(xxx):带换行     原样写出</p><ul><li>静态方法</li></ul><p>public static void setOut(PrintStream out) : 指定输出的目的地</p><p>System.out 就是 PrintStream 类型的，只不过它的流向是系统规定的，打印在控制台上。不过，既然是流对象，我们就可以玩一个”小把戏”，将数据输出到指定文本文件中。</p><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02PrintStream</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>      PrintStream ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token string">"day12\\ps2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day20字节流、字符流、Properties集合</title>
      <link href="/2020/02/25/day20-zi-jie-liu-zi-fu-liu-properties-ji-he/"/>
      <url>/2020/02/25/day20-zi-jie-liu-zi-fu-liu-properties-ji-he/</url>
      
        <content type="html"><![CDATA[<h1 id="day20字节流、字符流、Properties集合"><a href="#day20字节流、字符流、Properties集合" class="headerlink" title="day20字节流、字符流、Properties集合"></a>day20字节流、字符流、Properties集合</h1><h2 id="1-1字节流"><a href="#1-1字节流" class="headerlink" title="1.1字节流"></a>1.1字节流</h2><h3 id="1-1-1-字节输入流【InputStream】"><a href="#1-1-1-字节输入流【InputStream】" class="headerlink" title="1.1.1 字节输入流【InputStream】"></a>1.1.1 字节输入流【InputStream】</h3><p>java.io.InputStream 抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p><a id="more"></a><ul><li>public void close() ：关闭此输入流并释放与此流相关联的任何系统资源。</li><li>public abstract int read() ： 从输入流读取数据的下一个字节。</li><li>public int read(byte[] b) ： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。</li></ul><h3 id="1-1-2-FileInputStream类"><a href="#1-1-2-FileInputStream类" class="headerlink" title="1.1.2 FileInputStream类"></a>1.1.2 FileInputStream类</h3><p>java.io.FileInputStream 类是文件输入流，从文件中读取字节</p><ul><li>构造方法</li></ul><p>FileInputStream(File file) ： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。</p><p>FileInputStream(String name) ： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。</p><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出 FileNotFoundException 。</p><ul><li>读取字节数据</li></ul><ol><li>读取字节： read 方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回 -1 .</li></ol><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01InputStream</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.创建文件字节输入流FileInputStream类的对象fis,绑定源文件</span>      FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"day11\\fis1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.文件字节输入流FileInputStream类的对象fis调用read方法,读取文件中的内容</span>      <span class="token comment" spellcheck="true">//定义int变量,保存每次读取到的一个字节的内容</span>      <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//从fis关联的文件中,读取一个字节,返回读取到的字节内容,赋值给变量b,</span>      <span class="token comment" spellcheck="true">//最后判断b的值是否等于-1</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//3.文件字节输入流FileInputStream类的对象fis调用close方法,关闭流释放资源</span>      fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>小贴士：</p></li></ul><p>虽然读取了一个字节，但是会自动提升为int类型,要强制转正。</p><ol start="2"><li>使用字节数组读取： read(byte[] b) ，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回 -1 ，</li></ol><p>注意事项：</p><p>需要指定读取的有效长度，不然会出现数据还未被完全替换的情况</p><p>分析图解</p><p><img src="/2020/02/25/day20-zi-jie-liu-zi-fu-liu-properties-ji-he/01_%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90.png" alt="01_字节数组读取文件问题分析图"></p><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02InputStream</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.创建文件字节输入流FileInputStream类的对象fis,绑定源文件</span>      FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"day11\\fis2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.文件字节输入流FileInputStream类的对象fis调用read方法,读取文件中的内容</span>      <span class="token comment" spellcheck="true">//定义字节数组: 存储每次多去到的多个字节的内容的</span>      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//定义int变量,存储每次读取到的字节的数量</span>      <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//从fis关联的文件中,读取多个字节存储到字节数组bs中,返回读取的字节的数量,赋值给len</span>      <span class="token comment" spellcheck="true">//最后判断len的值是否等于-1</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//把字节数组bs中的内容,把索引0后面的len个字节,变成字符串</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//3.文件字节输入流FileInputStream类的对象fis调用close方法,关闭流释放资源</span>      fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="1-1-3-字节流练习：文件复制"><a href="#1-1-3-字节流练习：文件复制" class="headerlink" title="1.1.3 字节流练习：文件复制"></a>1.1.3 字节流练习：文件复制</h3><p>文件复制原理图解<br><img src="/2020/02/25/day20-zi-jie-liu-zi-fu-liu-properties-ji-he/02_%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6%E7%9A%84%E5%8E%9F%E7%90%86.png" alt="02_文件复制的原理图"></p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03CopyFile</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建文件字节输入流FileInputStream类的对象fis,绑定源文件</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"day11\\from\\coder_must.flv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建文件字节输出流FileOutputStream类的对象,绑定目标文件</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"day11\\dest\\coder_must3.flv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.循环读(源文件)写(目标文件),字节数组</span>        <span class="token comment" spellcheck="true">//定义字节数组: 存储每次多去到的多个字节的内容的</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义int变量,存储每次读取到的字节的数量</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从fis关联的文件中,读取多个字节存储到字节数组bs中,返回读取的字节的数量,赋值给len</span>        <span class="token comment" spellcheck="true">//最后判断len的值是否等于-1</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//把字节数组bs中索引0后面的len个字节的内容,写出到fos关联的文件中</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//4.关闭流释放资源</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    </code></pre><h2 id="1-2-字符流"><a href="#1-2-字符流" class="headerlink" title="1.2 字符流"></a>1.2 字符流</h2><p>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p><h3 id="1-2-1-字符输入流【Reader】"><a href="#1-2-1-字符输入流【Reader】" class="headerlink" title="1.2.1 字符输入流【Reader】"></a>1.2.1 字符输入流【Reader】</h3><p>java.io.Reader 抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p><ul><li>public void close() ：关闭此流并释放与此流相关联的任何系统资源。</li><li>public int read() ： 从输入流读取一个字符。</li><li>public int read(char[] cbuf) ： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。</li></ul><h3 id="1-2-2-FileReader类"><a href="#1-2-2-FileReader类" class="headerlink" title="1.2.2 FileReader类"></a>1.2.2 FileReader类</h3><p>java.io.FileReader 类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><p>小贴士：</p><ol><li>字符编码：字节与字符的对应规则。Windows系统的中文编码默认是GBK编码表。<br>idea中UTF-8</li><li>字节缓冲区：一个字节数组，用来临时存储字节数据</li></ol><ul><li>构造方法</li></ul><p>FileReader(File file) ： 创建一个新的 FileReader ，给定要读取的File对象。</p><p>FileReader(String fileName) ： 创建一个新的 FileReader ，给定要读取的文件的名称。</p><ul><li>读取字符数据</li></ul><ol><li>读取字符： read 方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回 -1 ，循环读取。</li></ol><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03Reader</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.创建文件字符输入流FileReader类的对象fr,绑定源文件</span>      FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"day11\\fis3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.文件字符输入流FileReader类的对象fr调用read方法,以字符的方式读取文件内容</span>      <span class="token comment" spellcheck="true">//定义int变量,保存每次读取到的一个字符的内容</span>      <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//从fr关联的文件中,读取一个字符,赋值给变量ch</span>      <span class="token comment" spellcheck="true">//判断ch的值是否等于-1</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//3.文件字符输入流FileReader类的对象fr调用close方法,关闭流,释放资源</span>      fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>   </code></pre></li></ul><ol start="2"><li>使用字符数组读取： read(char[] cbuf) ，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回 -1。</li></ol><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04Reader</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.创建文件字符输入流FileReader类的对象fr,绑定源文件</span>      FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"day11\\fis3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.文件字符输入流FileReader类的对象fr调用read方法,以字符的方式读取文件内容</span>      <span class="token comment" spellcheck="true">//定义int变量,保存读取的字符的数量</span>      <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//定义char数组,保存读取的多个字符的内容</span>      <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//从fr关联的文件中,读取多个字符存储到chs中,返回读取的字符数量赋值给len</span>      <span class="token comment" spellcheck="true">//判断len是否等于-1</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//3.文件字符输入流FileReader类的对象fr调用close方法,关闭流,释放资源</span>      fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre></li></ul><h3 id="1-2-3-字符输出流【Writer】"><a href="#1-2-3-字符输出流【Writer】" class="headerlink" title="1.2.3 字符输出流【Writer】"></a>1.2.3 字符输出流【Writer】</h3><p>java.io.FileWriter 类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区</p><ul><li>构造方法</li></ul><p>FileWriter(File file) ： 创建一个新的 FileWriter，给定要读取的File对象。</p><p>FileWriter(String fileName) ： 创建一个新的 FileWriter，给定要读取的文件的名称</p><ul><li>写出数据</li></ul><ol><li>写出字符： write(int b) 方法，每次可以写出一个字符数据</li></ol><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03Writer</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.创建文件字符输出流FileWriter类的对象fw,绑定目标文件</span>      FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"day11\\fw1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.文件字符输出流FileWriter类的对象fw调用write方法,写出字符到文件</span>      fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'中'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'国'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//3.文件字符输出流FileWriter类的对象fw调用close方法,关闭流,释放资源</span>      fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><ol start="2"><li>写出字符数组 ： write(char[] cbuf) 和 write(char[] cbuf, int off, int len) ，每次可以写出字符数组中的数据，用法类似FileOutputStream，</li></ol><ol start="3"><li>写出字符串： write(String str) 和 write(String str, int off, int len) ，每次可以写出字符串中的数据，更为方便.</li></ol><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04Writer</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.创建文件字符输出流FileWriter类的对象fw,绑定目标文件</span>      FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"day11\\fw2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.文件字符输出流FileWriter类的对象fw调用write方法,写出字符到文件</span>      <span class="token comment" spellcheck="true">//写出一个字符数组</span>      <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token string">"今天工作不努力,明天努力找工作"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//把chs数组的内容 明天努力找工作 重新写一遍</span>      <span class="token comment" spellcheck="true">//写出一个字符数组的一部分</span>      fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chs<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//写出一个字符串</span>      String s <span class="token operator">=</span> <span class="token string">"键盘敲烂,年薪过百万"</span><span class="token punctuation">;</span>      fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//写出一个字符串的一部分, 年薪过百万 重新写一遍</span>      fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//3.文件字符输出流FileWriter类的对象fw调用close方法,关闭流,释放资源</span>      fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><ol start="4"><li>关闭和刷新<br>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要 flush 方法了。</li></ol><ul><li>flush ：刷新缓冲区，流对象可以继续使用。</li><li>close ：关闭流，释放系统资源。关闭前会刷新缓冲区。</li></ul><p>flush和close的区别</p><p>1.字节流内部没有缓冲区,只要调用write方法,就是写出到目的地,所以不关流,也不会丢失数据</p><p>2.字符流内部有缓冲区,调用write方法,先写到缓冲区,如果缓冲区数据存满了,会自动刷新到目的地,如果没有执行关闭流的动作,导致缓冲区可能还有数据,程序停止,数据丢失</p><p>3.flush方法,把缓冲区中的数据,刷新到目的地,执行flush以后,可以继续调用write方法写出数据</p><p>4.close方法内部,会先执行一次flush操作</p><p>5.close方法之后,不能继续调用write方法写出数据</p><h2 id="1-3-IO异常的处理"><a href="#1-3-IO异常的处理" class="headerlink" title="1.3 IO异常的处理"></a>1.3 IO异常的处理</h2><h3 id="1-3-1-JDK7前处理"><a href="#1-3-1-JDK7前处理" class="headerlink" title="1.3.1 JDK7前处理"></a>1.3.1 JDK7前处理</h3><p>之前的入门练习，我们一直把异常抛出，而实际开发中并不能这样处理，建议使用 try…catch…finally 代码块，处理异常部分</p><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05CopyCharFile</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//提升作用域: finally中才可以使用</span>      <span class="token comment" spellcheck="true">//初始值null: 防止try中创建对象出现异常,导致变量没有被初始化,不能使用</span>      FileReader fr <span class="token operator">=</span> null<span class="token punctuation">;</span>      FileWriter fw <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"p:\\day11\\from\\f1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"day11\\dest\\f1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//关闭流的代码,必须要被执行,所以写在finally当中</span>          <span class="token comment" spellcheck="true">//close方法抛出IOException,必须分开处理</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>fw<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//防止空指针异常</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>fr<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="1-3-2-JDK7的处理"><a href="#1-3-2-JDK7的处理" class="headerlink" title="1.3.2 JDK7的处理"></a>1.3.2 JDK7的处理</h3><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo06CopyCharFile</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//-----------用的不多---------------</span>      <span class="token keyword">try</span> <span class="token punctuation">(</span>FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"p:\\day11\\from\\f1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"day11\\dest\\f1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="1-4-属性集"><a href="#1-4-属性集" class="headerlink" title="1.4 属性集"></a>1.4 属性集</h2><h3 id="1-4-1-概述"><a href="#1-4-1-概述" class="headerlink" title="1.4.1 概述"></a>1.4.1 概述</h3><p>java.util.Properties 继承于 Hashtable ，来表示一个持久的属性集。它使用键值结构存储数据，每个键及其对应值都是一个字符串。该类也被许多Java类使用，比如获取系统属性时， System.getProperties 方法就是返回一个 Properties 对象。</p><h3 id="1-4-2-Properties类"><a href="#1-4-2-Properties类" class="headerlink" title="1.4.2 Properties类"></a>1.4.2 Properties类</h3><ul><li>构造方法</li></ul><p>public Properties() :创建一个空的属性列表。</p><ul><li>基本的存储方法</li></ul><p>public Object setProperty(String key, String value) ： 保存一对属性。</p><p>public String getProperty(String key) ：使用此属性列表中指定的键搜索属性值。</p><p>public Set<String> stringPropertyNames() ：所有键的名称的集合。</String></p><ul><li>与流相关的方法</li></ul><p>public void load(InputStream inStream) ：从字节输入流中读取键值对。</p><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02PropertiesLoad</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.创建FileInputStream类的对象,绑定源文件</span>      FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"day11\\config.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.创建Properties集合对象props</span>      Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//3.Properties集合对象props调用load方法,传递FileInputStream类/FileReader类的对象,</span>      <span class="token comment" spellcheck="true">//会把流对象中的内容,以键值对的方式,加载到Properties集合对象中</span>      props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//4.遍历Properties集合对象</span>      Set<span class="token operator">&lt;</span>String<span class="token operator">></span> names <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">stringPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//增强for: 遍历</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>          String value <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"::::"</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>小贴士</p></li></ul><ol><li>Properties集合加载的文件,建议扩展名写 .properties</li><li>properties文件中的内容,一个键值对占用一行 格式  键=值</li><li>用#可以注释掉.properties文件中的内容</li><li>Properties集合没有泛型，继承Hashtable&lt;K,V&gt;时,已经确定了K的类型: Object,V的类型: Object,</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day19File类、递归、字节流</title>
      <link href="/2020/02/22/day19file-lei-di-gui-zi-jie-liu/"/>
      <url>/2020/02/22/day19file-lei-di-gui-zi-jie-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="day19File类、递归、IO流-字节输出流"><a href="#day19File类、递归、IO流-字节输出流" class="headerlink" title="day19File类、递归、IO流-字节输出流"></a>day19File类、递归、IO流-字节输出流</h1><h2 id="1-1-File类"><a href="#1-1-File类" class="headerlink" title="1.1 File类"></a>1.1 File类</h2><h3 id="1-1-1-概述"><a href="#1-1-1-概述" class="headerlink" title="1.1.1 概述"></a>1.1.1 概述</h3><p>java.io.File 类是文件和目录路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作。</p><a id="more"></a><h3 id="1-1-2-构造方法"><a href="#1-1-2-构造方法" class="headerlink" title="1.1.2 构造方法"></a>1.1.2 构造方法</h3><ul><li><p>public File(String pathname) ：通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例。</p></li><li><p>public File(String parent, String child) ：从父路径名字符串和子路径名字符串创建新的 File实例。</p></li><li><p>public File(File parent, String child) ：从父抽象路径名和子路径名字符串创建新的 File实例。</p></li><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02FileConstructor</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.表示存在的文件: a.txt</span>      File f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\projects\\jiuye349\\day10\\io\\ab\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.表示不存在的文件: aaa.txt</span>      File f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\projects\\jiuye349\\day10\\io\\ab\\aaa.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//3.表示存在的文件加: a</span>      File f3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\projects\\jiuye349\\day10\\io\\ab\\a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f3<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//4.表示不存在的文件加: aaa</span>      File f4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\projects\\jiuye349\\day10\\io\\ab\\aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f4<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//5.表示不存在的文件: 123.txt</span>      <span class="token comment" spellcheck="true">//把路径分成两部分: 都是String</span>      File f5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\projects\\jiuye349\\day10\\io"</span><span class="token punctuation">,</span> <span class="token string">"ab\\123.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//6.表示存在的文件夹: b</span>      <span class="token comment" spellcheck="true">//创建一个父路径对应的File对象</span>      File parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\projects\\jiuye349\\day10\\io"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      File f6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token string">"ab\\b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>小贴士：</p></li></ul><ol><li>一个File对象代表硬盘中实际存在的一个文件或者目录。</li><li>无论该路径下是否存在文件或者目录，都不影响File对象的创建。</li></ol><h3 id="1-1-3-常用方法"><a href="#1-1-3-常用方法" class="headerlink" title="1.1.3 常用方法"></a>1.1.3 常用方法</h3><p>获取功能的方法</p><ul><li>public String getAbsolutePath() ：返回此File的绝对路径名字符串。</li><li>public String getPath() ：将此File转换为路径名字符串。</li><li>public String getName() ：返回由此File表示的文件或目录的名称。</li><li>public long length() ：返回由此File表示的文件的长度。只能计算单个文件</li></ul><p>判断功能的方法</p><ul><li>public boolean exists() ：此File表示的文件或目录是否实际存在。</li><li>public boolean isDirectory() ：此File表示的是否为目录。</li><li>public boolean isFile() ：此File表示的是否为文件。</li></ul><p>创建删除功能的方法</p><ul><li>public boolean createNewFile() ：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。</li><li>public boolean delete() ：删除由此File表示的文件或目录。只能删除空文件夹</li><li>public boolean mkdir() ：创建由此File表示的目录。只能创建一级</li><li>public boolean mkdirs() ：创建由此File表示的目录，创建任何级</li></ul><p>绝对路径和相对路径</p><ul><li><p>绝对路径：从盘符开始的路径，这是一个完整的路径。</p></li><li><p>相对路径：相对于项目目录的路径，这是一个便捷的路径，开发中经常使用。</p></li><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04Path</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      File f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\projects\\jiuye349\\day10\\io\\ab\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//绝对路径</span>      File f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"day10\\io\\ab\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相对路径</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果D<span class="token operator">:</span>\projects\jiuye349\day10\io\ab\a<span class="token punctuation">.</span>txtD<span class="token operator">:</span>\IdeaJavaSE_Code\basic_code\day10\io\ab\a<span class="token punctuation">.</span>txt</code></pre><h3 id="1-1-4-目录的遍历"><a href="#1-1-4-目录的遍历" class="headerlink" title="1.1.4 目录的遍历"></a>1.1.4 目录的遍历</h3></li><li><p>public String[] list() ：返回一个String数组，表示该File目录中的所有子文件或目录。</p></li><li><p>public File[] listFiles() ：返回一个File数组，表示该File目录中的所有的子文件或目录。</p></li><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04FileEach</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"day10\\io\\ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//调用list()方法: 获取文件夹中子文件夹/文件 的 名字的String形式</span>      String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//遍历</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//调用listFiles()方法: 获取文件夹中子文件夹/文件 封装成File对象,返回File数组</span>      File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//遍历</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绝对路径: "</span><span class="token operator">+</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名称: "</span><span class="token operator">+</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//...</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>小贴士：</p></li></ul><p>1.不能是文件路径或者不存在的文件夹路径,否则返回null</p><p>2.如果文件夹存在,但是里面没内容,返回[]</p><p>3.建议,遍历之前,添加安全性判断,避免空指针异常</p><h2 id="1-2-递归"><a href="#1-2-递归" class="headerlink" title="1.2 递归"></a>1.2 递归</h2><h3 id="1-2-1-概述"><a href="#1-2-1-概述" class="headerlink" title="1.2.1 概述"></a>1.2.1 概述</h3><p>递归：指在当前方法内调用自己的这种现象</p><p>分析图解：<br><img src="/2020/02/22/day19file-lei-di-gui-zi-jie-liu/01_%E9%80%92%E5%BD%92%E7%9A%84%E6%A6%82%E5%BF%B5.png" alt="01_递归的概念图"></p><h3 id="1-2-2-递归累和"><a href="#1-2-2-递归累和" class="headerlink" title="1.2.2 递归累和"></a>1.2.2 递归累和</h3><p>分析：num的累和 = num + (num-1)的累和，所以可以把累和的操作定义成一个方法，递归调用。</p><ul><li>示例代码<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02DiGuiSum</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//调用方法</span>      <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//定义求和方法: 递归调用</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//2.出口:</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//1.规律</span>      <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token function">getSum</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p>分析图解：<br><img src="/2020/02/22/day19file-lei-di-gui-zi-jie-liu/02_%E9%80%92%E5%BD%92%E6%B1%82%E5%92%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="02_递归求和流程图"></p><h3 id="1-2-3-文件搜索"><a href="#1-2-3-文件搜索" class="headerlink" title="1.2.3 文件搜索"></a>1.2.3 文件搜索</h3><p>搜索 D:\aaa 目录中的 .java 文件。</p><p>分析：</p><ol><li>目录搜索，无法判断多少级目录，所以使用递归，遍历所有目录。</li><li>遍历目录时，获取的子文件，通过文件名称，判断是否符合条件。</li></ol><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04SearchTxtFiles</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.创建目录代表的File对象</span>      File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"day10\\io\\ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//3.调用方法listTxtFileNames,传递目录代表的File对象</span>      <span class="token function">listTxtFileNames</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">listTxtFileNames</span><span class="token punctuation">(</span>File dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.目录路径File对象dir,调用listFiles,获取目录中的所有File对象,组成的File数组</span>      File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.遍历File数组</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//3.获取当前File对象: file</span>          <span class="token comment" spellcheck="true">//4.如果当前File对象是文件,而且扩展名是.txt,打印文件名 a.txt</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//5.如果当前File对象是文件夹,递归调用本方法,参数传递当前File对象</span>              <span class="token function">listTxtFileNames</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>分析图解：<br><img src="/2020/02/22/day19file-lei-di-gui-zi-jie-liu/03_%E9%80%92%E5%BD%92%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E5%9B%BE%E8%A7%A3%E5%88%86%E6%9E%90.png" alt="003_递归获取文件夹下所有文件图解分析图"></p></li></ul><h2 id="1-3-IO流"><a href="#1-3-IO流" class="headerlink" title="1.3 IO流"></a>1.3 IO流</h2><h3 id="1-3-1-什么是IO"><a href="#1-3-1-什么是IO" class="headerlink" title="1.3.1 什么是IO"></a>1.3.1 什么是IO</h3><p>生活中，你肯定经历过这样的场景。当你编辑一个文本文件，忘记了 ctrl+s ，可能文件就白白编辑了。当你电脑上插入一个U盘，可以把一个视频，拷贝到你的电脑硬盘里。</p><p>那么数据都是在哪些设备上的呢？键盘、内存、硬盘、外接设备等等。我们把这种数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为 输入input 和 输出output ，即流向内存是输入流，流出内存的输出流。</p><p>Java中I/O操作主要是指使用 java.io 包下的内容，进行输入、输出操作。输入也叫做读取数据，输出也叫做作写出数据。</p><p>概念图解：<br><img src="/2020/02/22/day19file-lei-di-gui-zi-jie-liu/04_IO%E6%B5%81%E7%9A%84%E6%A6%82%E5%BF%B5.png" alt="04_IO流的概念图"></p><h3 id="1-3-2-IO的分类"><a href="#1-3-2-IO的分类" class="headerlink" title="1.3.2 IO的分类"></a>1.3.2 IO的分类</h3><p>根据数据的流向分为：输入流和输出流。</p><p>输入流 ：把数据从 其他设备 上读取到 内存 中的流。</p><p>输出流 ：把数据从 内存 中写出到 其他设备 上的流。</p><p>格局数据的类型分为：字节流和字符流。</p><p>字节流 ：以字节为单位，读写数据的流。</p><p>字符流 ：以字符为单位，读写数据的流。</p><h3 id="1-3-3-顶级父类们"><a href="#1-3-3-顶级父类们" class="headerlink" title="1.3.3 顶级父类们"></a>1.3.3 顶级父类们</h3><p><img src="/2020/02/22/day19file-lei-di-gui-zi-jie-liu/6.png" alt="顶级父类图"></p><h2 id="1-4字节流"><a href="#1-4字节流" class="headerlink" title="1.4字节流"></a>1.4字节流</h2><h3 id="1-4-1-一切皆为字节"><a href="#1-4-1-一切皆为字节" class="headerlink" title="1.4.1 一切皆为字节"></a>1.4.1 一切皆为字节</h3><p>一切文件数据(文本、图片、视频等)在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。</p><h3 id="1-4-2-字节输出流-OutputStream"><a href="#1-4-2-字节输出流-OutputStream" class="headerlink" title="1.4.2 字节输出流 OutputStream"></a>1.4.2 字节输出流 OutputStream</h3><p>java.io.OutputStream 抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li>public void close() ：关闭此输出流并释放与此流相关联的任何系统资源。</li><li>public void write(byte[] b) ：将 b.length字节从指定的字节数组写入此输出流。</li><li>public void write(byte[] b, int off, int len) ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。</li><li>public abstract void write(int b) ：将指定的字节输出流</li></ul><p>小贴士：</p><p>close方法，当完成流的操作时，必须调用此方法，释放系统资源</p><p>java.io.OutputStream类，抽象类，不能创建对象，必须使用子类</p><h3 id="1-4-3-FileOutputStream类"><a href="#1-4-3-FileOutputStream类" class="headerlink" title="1.4.3 FileOutputStream类"></a>1.4.3 FileOutputStream类</h3><p>OutputStream 有很多子类，我们从最简单的一个子类开始。<br>java.io.FileOutputStream 类是文件输出流，用于将数据写出到文件。</p><ul><li>构造方法</li></ul><p>public FileOutputStream(File file) ：创建文件输出流以写入由指定的 File对象表示的文件。</p><p>public FileOutputStream(String name) ： 创建文件输出流以指定的名称写入文件。<br>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据</p><ul><li>写出字节数据</li></ul><ol><li>写出字节： write(int b) 方法，每次可以写出一个字节数据</li></ol><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05OutPutStream</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.创建文件字节输出流FileOutputStream类的对象fos,绑定目标文件</span>      FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"day10\\io\\fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.文件字节输出流FileOutputStream类的对象fos调用write方法,写出字节到文件</span>      <span class="token comment" spellcheck="true">//把一个字节97,写出到fos关联的文件中</span>      fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//3.文件字节输出流FileOutputStream类的对象fos调用close方法,关闭流,释放资源</span>      fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>分析图解<br><img src="/2020/02/22/day19file-lei-di-gui-zi-jie-liu/05_%E5%86%99%E5%87%BA%E5%AD%97%E8%8A%82%E5%88%B0%E6%96%87%E4%BB%B6.png" alt="05_写出字节到文件图"></p></li></ul><p>2.写出字节数组： write(byte[] b) ，每次可以写出数组中的数据</p><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo06OutPutStream</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.创建文件字节输出流FileOutputStream类的对象fos,绑定目标文件</span>      FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"day10\\io\\fos2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.文件字节输出流FileOutputStream类的对象fos调用write方法,写出字节到文件</span>      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ABCDEF</span>      <span class="token comment" spellcheck="true">//写出字节数组</span>      <span class="token comment" spellcheck="true">//把字节数组bs中的所有字节内容,写出到fos关联的文件中</span>      fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//写出字节数组的一部分: 把BCDE重新写一遍</span>      fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"好想有个女同桌"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"好想有个女朋友"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//3.文件字节输出流FileOutputStream类的对象fos调用close方法,关闭流,释放资源</span>      fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>小贴士：</p></li></ul><ol><li>虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。</li><li>流操作完毕后，必须释放系统资源，调用close方法，千万记得</li></ol><ul><li>数据追加续写</li></ul><p>FileOutputStream类的构造方法</p><p>FileOutputStream(File path,boolean append)</p><p>FileOutputStream(String path,boolean append)</p><p>参数:</p><p>1.File/String类型的文件路径</p><p>2.boolean append</p><p>true: 追加写入,继续写入</p><p>false: 覆盖写入,重新写入</p><p>不指定第二个参数,默认是false，</p><ul><li>写出换行</li></ul><p>Windows系统里，换行符号是 \r\n 。把以指定是否追加续写了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day18Map</title>
      <link href="/2020/02/21/day18map/"/>
      <url>/2020/02/21/day18map/</url>
      
        <content type="html"><![CDATA[<h1 id="day18Map"><a href="#day18Map" class="headerlink" title="day18Map"></a>day18Map</h1><h2 id="1-1Map概述"><a href="#1-1Map概述" class="headerlink" title="1.1Map概述"></a>1.1Map概述</h2><p>现实生活中，我们常会看到这样的一种集合：IP地址与主机名，身份证号与个人，系统用户名与系统用户对象等，这种一一对应的关系，就叫做映射。Java提供了专门的集合类用来存放这种对象关系的对象，即 java.util.Map 接口。我们通过查看 Map 接口描述，发现 Map 接口下的集合与 Collection 接口下的集合，它们存储数据的形式不同，如下图</p><a id="more"></a><p><img src="/2020/02/21/day18map/01_Map%E9%9B%86%E5%90%88%E7%9A%84%E7%89%B9%E7%82%B9.png" alt="01_Map集合的特点图"></p><ul><li>Collection 中的集合，元素是孤立存在的（理解为单身），向集合中存储元素采用一个个元素的方式存储。</li><li>Map 中的集合，元素是成对存在的(理解为夫妻)。每个元素由键与值两部分组成，通过键可以找对所对应的<br>值。</li><li>Collection 中的集合称为单列集合， Map 中的集合称为双列集合。</li><li>需要注意的是， Map 中的集合不能包含重复的键，值可以重复；每个键只能对应一个值。</li></ul><h2 id="1-2-Map的常用子类"><a href="#1-2-Map的常用子类" class="headerlink" title="1.2 Map的常用子类"></a>1.2 Map的常用子类</h2><p>通过查看Map接口描述，看到Map有多个子类，这里我们主要讲解常用的HashMap集合、LinkedHashMap集合。</p><ul><li><p>HashMap&lt;K,V&gt;：存储数据采用的哈希表结构，元素的存取顺序不能保证一致。由于要保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</p></li><li><p>LinkedHashMap&lt;K,V&gt;：HashMap下有个子类LinkedHashMap，存储数据采用的哈希表结构+链表结构。通过链表结构可以保证元素的存取顺序一致；通过哈希表结构可以保证的键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</p></li></ul><p>tips：Map接口中的集合都有两个泛型变量&lt;K,V&gt;,在使用时，要为两个泛型变量赋予数据类型。两个泛型变量</p><h2 id="1-3-Map的常用方法"><a href="#1-3-Map的常用方法" class="headerlink" title="1.3 Map的常用方法"></a>1.3 Map的常用方法</h2><p>Map接口中定义了很多方法，常用的如下：</p><ul><li>public V put(K key, V value) : 把指定的键与指定的值添加到Map集合中。</li><li>public V remove(Object key) : 把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。</li><li>public V get(Object key) 根据指定的键，在Map集合中获取对应的值。</li><li>public Set<K> keySet() : 获取Map集合中所有的键，存储到Set集合中。</K></li><li>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() : 获取到Map集合中所有的键值对对象的集合(Set集合)。</li><li>public boolean containKey(Object key) :判断该集合中是否有此键。</li></ul><p>tips:<br>使用put方法时，若指定的键(key)在集合中没有，则没有这个键对应的值，返回null，并把指定的键值添加到集合中；</p><p>若指定的键(key)在集合中存在，则返回值为集合中键对应的值（该值为替换前的值），并把指定键所对应的值，替换成指定的新值</p><h2 id="1-4-Map的遍历"><a href="#1-4-Map的遍历" class="headerlink" title="1.4 Map的遍历"></a>1.4 Map的遍历</h2><p>Map集合遍历第一种方式: 根据键找值</p><p>遍历步骤  </p><ol><li>获取Map中所有的键，由于键是唯一的，所以返回一个Set集合存储所有的键。方法提示: keyset()</li><li>遍历键的Set集合，得到每一个键。</li><li>根据键，获取键所对应的值。方法提示: get(K key)</li></ol><p>遍历图解：<br><img src="/2020/02/21/day18map/02_Map%E9%9B%86%E5%90%88%E7%AC%AC%E4%B8%80%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F.png" alt="02_Map集合第一种遍历方式图"></p><ul><li>示例代码<pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"~~~~~~~~~~"</span><span class="token operator">+</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p>Map集合遍历第二种方式: 键值对方式</p><p>Map&lt;K,V&gt;接口内部定义了静态接口Entry&lt;K,V&gt;,用来描述结婚证/键值对的，所以只要是Map集合的实现类,该实现类内部必然会定义一个类,实现Entry接口,覆盖重写抽象方法,描述自己的结婚证(键值对/映射关系)</p><p>Map.Entry&lt;K,V&gt; 接口:</p><p>抽象方法:</p><p>public abstract K getKey() : 获取键</p><p>public abstract V getValue() : 获取值</p><p>Map接口的所有实现类,都描述了自己的结婚证(键值对),问题是如何获取所有的键值对呢?如果每个集合定义自己的方法,导致方法不统一,程序员使用不方便</p><p>解决方案:</p><p>Map&lt;K,V&gt; 接口内部,定义抽象方法</p><p>Set<Entry> entrySet(): 获取所有的键值对对象的所有Map的实现类,必然覆盖重写该方法,获取键值对对象</Entry></p><p>遍历步骤</p><ol><li>获取Map集合中，所有的键值对(Entry)对象，以Set集合形式返回。方法提示: entrySet() 。</li><li>遍历包含键值对(Entry)对象的Set集合，得到每一个键值对(Entry)对象。</li><li>通过键值对(Entry)对象，获取Entry对象中的键与值。 方法提示: getkey() getValue()</li></ol><p>遍历图解：<br><img src="/2020/02/21/day18map/03_Map%E9%9B%86%E5%90%88%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F.png" alt="03_Map集合的第二种遍历方式图"></p><ul><li>示例代码<pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"~~~~~"</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="1-5-Map集合练习"><a href="#1-5-Map集合练习" class="headerlink" title="1.5 Map集合练习"></a>1.5 Map集合练习</h2><p>需求：计算一个字符串中每个字符出现次数。</p><p>分析：</p><ol><li>获取一个字符串对象</li><li>创建一个Map集合，键代表字符，值代表次数。</li><li>遍历字符串得到每个字符。</li><li>判断Map中是否有该键。</li><li>如果没有，第一次出现，存储次数为1；如果有，则说明已经出现过，获取到对应的值进行++，再次存储。</li><li>打印最终结果</li></ol><p>图解：<br><img src="/2020/02/21/day18map/04_Map%E9%9B%86%E5%90%88%E6%A1%88%E4%BE%8B%E7%BB%9F%E8%AE%A1%E5%AD%97%E7%AC%A6%E4%B8%AA%E6%95%B0.png" alt="04_Map集合案例统计字符个数图"></p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05MapCount</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取字符串(直接定义/键盘录入)</span>        String str <span class="token operator">=</span> <span class="token string">"aabbbccccdddddeefff"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建Map集合对象,键: Character,值: Integer</span>        Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span>Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.遍历字符串</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//4.获取字符串中的当前字符,保存在字符变量ch中</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//思考: 能否一句话搞定</span>            <span class="token comment" spellcheck="true">//int num;</span>            <span class="token comment" spellcheck="true">//Integer integer = map.containsKey(ch) ? map.put(ch,  (num=map.get(ch))+1) : map.put(ch, 1);</span>            <span class="token comment" spellcheck="true">//5.Map集合对象调用containsKey方法,传递ch作为键,获取boolean结果</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//6.如果boolean结果: false</span>                <span class="token comment" spellcheck="true">//7.Map集合对象调用put方法,ch作为键,1作为值,存储到Map集合中</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//8.如果boolean结果: true</span>                <span class="token comment" spellcheck="true">//9.Map集合对象调用get方法,ch作为键,获取值(ch已经出现的次数),保存到int边练num中</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//10.num的值自增1</span>                num<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//11.Map集合对象调用put方法,ch作为键,num作为值,存储到Map集合中</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//12.遍历输出Map集合中的内容</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-6-补充知识"><a href="#1-6-补充知识" class="headerlink" title="1.6 补充知识"></a>1.6 补充知识</h2><h3 id="list和Set的相互转换"><a href="#list和Set的相互转换" class="headerlink" title="list和Set的相互转换"></a>list和Set的相互转换</h3><p>java.util.HashSet<E> 集合</E></p><p>成员方法: </p><p>在Set接口中定义的boolean addAll(Collection<E> c) : 把方法参数Collection集合中的所有内容添加到调用addAll方法的Collection集合中</E></p><ul><li>示例代码<pre class=" language-java"><code class="language-java">HashSet<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span></code></pre>构造方法:</li></ul><p>HashSet(Collection&lt;? extends E&gt; c) : 构造一个包含指定 collection 中的元素的新 set。</p><ul><li>示例代码<pre class=" language-java"><code class="language-java">HashSet<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>在JDK1.5之后，如果我们定义一个方法需要接受多个参数，并且多个参数类型一致，我们可以对其简化.</p><p>格式:</p><p>修饰符 返回值类型 方法名称(数据类型 … 变量名称) {<br> //…<br>}</p><p>注意:</p><p>1.可变参数的本质是数组</p><p>2.含有可变参数的方法,调用时,可以传递数组,可以传递参数列表(多个参数之间用逗号隔开),还可以不传参数</p><p>3.方法的可变参数,只能定义一个</p><p>4.方法的可变参数,只能定义在参数列表的最后</p><h2 id="1-7-斗地主案例"><a href="#1-7-斗地主案例" class="headerlink" title="1.7 斗地主案例"></a>1.7 斗地主案例</h2><p>需求：模拟斗地主 看牌按照从小到大的顺序</p><p>思路:</p><p>1.给54张牌,指定排序规则,不可能</p><p>2.给54张牌,按照从小到大的顺序,绑定一个数字(小到大)</p><p>3.洗牌洗的是数字(编号)</p><p>4.发牌发的是数字</p><p>5.玩家拿到牌的编号是无序的,但是可以排序,排序后,遍历,通过编号获取牌,就是有序的</p><p>思路图解：<br><img src="/2020/02/21/day18map/05_%E6%96%97%E5%9C%B0%E4%B8%BB%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="05_斗地主综合案例分析图"></p><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PokerGame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一: 准备牌</span>        <span class="token comment" spellcheck="true">//1.创建Map集合对象pokers,存储54张扑克,键: Integer(扑克编号) 值: String(扑克)</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token operator">></span> pokers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建2个List集合对象colors和nums,用来存储花色和数字</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.向List集合对象colors中存储花色</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>colors<span class="token punctuation">,</span><span class="token string">"♥"</span><span class="token punctuation">,</span><span class="token string">"♠"</span><span class="token punctuation">,</span><span class="token string">"♣"</span><span class="token punctuation">,</span><span class="token string">"♦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.向List集合对象nums中存储数字</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token string">"3-4-5-6-7-8-9-10-J-Q-K-A-2"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义int变量,代表扑克编号</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.循环嵌套遍历存储花色和数字的集合对象</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String color <span class="token operator">:</span> colors<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//6.拼接处一张扑克</span>                String poker <span class="token operator">=</span> color <span class="token operator">+</span> num<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//7.编号和扑克存储到牌盒pokers中</span>                pokers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>poker<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//给下一张扑克做准备</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//8.存储小王和大王</span>        pokers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">,</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pokers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token string">"大王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//9.打印</span>        <span class="token comment" spellcheck="true">//System.out.println(pokers);</span>        <span class="token comment" spellcheck="true">//System.out.println(pokers.size());</span>        <span class="token comment" spellcheck="true">//二: 洗牌</span>        <span class="token comment" spellcheck="true">//1.获取存储54张扑克的Map集合的所有的键对应的Set集合</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> pokers<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.把Set集合转换成List集合(addAll方法/构造方法)</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.Collections工具类调用shuffle方法,打乱List集合(存储54张牌的编号)的顺序</span>        Collections<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.打印</span>        <span class="token comment" spellcheck="true">//System.out.println(list);</span>        <span class="token comment" spellcheck="true">//System.out.println(list.size());</span>        <span class="token comment" spellcheck="true">//三: 发牌</span>        <span class="token comment" spellcheck="true">//1.创建4个List集合对象,泛型:Integer(发的是扑克的编号) ,分别代表3个玩家和1个底牌</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//玩家一</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//玩家二</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//玩家三</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> bottom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//底牌</span>        <span class="token comment" spellcheck="true">//2.因为要根据索引%3的结果,决定发给不同的玩家</span>        <span class="token comment" spellcheck="true">//所以只能使用for + get(索引) 遍历 存储54张扑克编号的List集合</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//3.获取当前扑克的编号</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.根据索引值,把编号发给不同的玩家</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//留作底牌</span>                bottom<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//发给玩家一</span>                    p1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//发给玩家二</span>                    p2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//发给玩家三</span>                    p3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//打印</span>        <span class="token comment" spellcheck="true">//System.out.println(p1);</span>        <span class="token comment" spellcheck="true">//System.out.println(p2);</span>        <span class="token comment" spellcheck="true">//System.out.println(p3);</span>        <span class="token comment" spellcheck="true">//System.out.println(bottom);</span>        <span class="token comment" spellcheck="true">//四: 看牌</span>        <span class="token comment" spellcheck="true">//调用方法</span>        <span class="token function">lookPokers</span><span class="token punctuation">(</span><span class="token string">"宝强"</span><span class="token punctuation">,</span>p1<span class="token punctuation">,</span>pokers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">lookPokers</span><span class="token punctuation">(</span><span class="token string">"金莲"</span><span class="token punctuation">,</span>p2<span class="token punctuation">,</span>pokers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">lookPokers</span><span class="token punctuation">(</span><span class="token string">"哲哲"</span><span class="token punctuation">,</span>p3<span class="token punctuation">,</span>pokers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">lookPokers</span><span class="token punctuation">(</span><span class="token string">"底牌"</span><span class="token punctuation">,</span>bottom<span class="token punctuation">,</span>pokers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lookPokers</span><span class="token punctuation">(</span>String playerName<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token operator">></span> pokers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//0.打印玩家名称</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>playerName<span class="token operator">+</span><span class="token string">": [ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.Collections静态方法sort对玩家手里的扑克编号List集合对象,进行排序</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.遍历List集合对象</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//3.获取当前的编号: num</span>            <span class="token comment" spellcheck="true">//4.Map集合对象调用get方法,传递当前的编号,获取对应的值(扑克)</span>            String poker <span class="token operator">=</span> pokers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.打印扑克</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>poker<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day17List、Set、数据结构、Collections</title>
      <link href="/2020/02/19/day17list-set-shu-ju-jie-gou-collections/"/>
      <url>/2020/02/19/day17list-set-shu-ju-jie-gou-collections/</url>
      
        <content type="html"><![CDATA[<h1 id="day17List、Set、数据结构、Collections"><a href="#day17List、Set、数据结构、Collections" class="headerlink" title="day17List、Set、数据结构、Collections"></a>day17List、Set、数据结构、Collections</h1><h2 id="1-1-List集合"><a href="#1-1-List集合" class="headerlink" title="1.1 List集合"></a>1.1 List集合</h2><h3 id="1-1-1-List接口介绍"><a href="#1-1-1-List接口介绍" class="headerlink" title="1.1.1 List接口介绍"></a>1.1.1 List接口介绍</h3><p>java.util.List 接口继承自 Collection 接口，是单列集合的一个重要分支，习惯性地会将实现了 List 接口的对象称为List集合。在List集合中允许出现重复的元素，所有的元素是以一种线性方式进行存储的，在程序中可以通过索引来访问集合中的指定元素。另外List集合还有一个特点就是元素有序，即元素的存入顺序和取出顺序一致。</p><h3 id="1-1-2-List接口的特点"><a href="#1-1-2-List接口的特点" class="headerlink" title="1.1.2 List接口的特点"></a>1.1.2 List接口的特点</h3><p>1.有序(保证存入和取出元素的顺序是一致的)</p><a id="more"></a><p>2.有索引</p><p>3.可重复</p><h3 id="1-1-3-List接口常用的实现类"><a href="#1-1-3-List接口常用的实现类" class="headerlink" title="1.1.3 List接口常用的实现类"></a>1.1.3 List接口常用的实现类</h3><h4 id="1-1-1-1-ArrayList"><a href="#1-1-1-1-ArrayList" class="headerlink" title="1.1.1.1 ArrayList"></a>1.1.1.1 ArrayList</h4><p>ArrayList的特点</p><p>1.底层采用是数组的数据结构</p><p>2.数组的数据结构: 查询快,增删慢</p><p>3.查询快的原因: 有索引,元素内存连续分配</p><p>4.线程不同步,不安全,但是效率高，还有一个不常用的Vector类是线程安全但效率不高</p><h4 id="1-1-1-2-LinkedList"><a href="#1-1-1-2-LinkedList" class="headerlink" title="1.1.1.2 LinkedList"></a>1.1.1.2 LinkedList</h4><p>LinkedList特点:</p><p>1.底层采用链表数据结构</p><p>2.链表数据结构: 增删快,查询慢</p><p>3.线程不同步,不安全,但是效率高</p><p>LinkedList集合,操作头和尾节点的方法</p><ul><li>public void addFirst(E e):将指定元素插入此列表的开头。</li><li>public void addLast(E e):将指定元素添加到此列表的结尾。</li><li>public E getFirst():返回此列表的第一个元素。</li><li>public E getLast():返回此列表的最后一个元素。</li><li>public E removeFirst():移除并返回此列表的第一个元素。</li><li>public E removeLast():移除并返回此列表的最后一个元素。</li></ul><p>LinkedList集合中,具有栈结构特点(先进后出)的方法</p><ul><li><p>public E pop():从此列表所表示的堆栈处弹出一个元素。       底层原理 调用removeFirst</p></li><li><p>public void push(E e):将元素推入此列表所表示的堆栈。     底层原理 调用addFirst</p></li></ul><h2 id="2-1-set集合"><a href="#2-1-set集合" class="headerlink" title="2.1 set集合"></a>2.1 set集合</h2><h3 id="2-2-1-HashSet集合介绍"><a href="#2-2-1-HashSet集合介绍" class="headerlink" title="2.2.1 HashSet集合介绍"></a>2.2.1 HashSet集合介绍</h3><p>java.util.Set 接口和 java.util.List 接口一样，同样继承自 Collection 接口，它与 Collection 接口中的方法基本一致，并没有对 Collection 接口进行功能上的扩充，只是比 Collection 接口更加严格了。与List 接口不同的是， Set 接口中元素无序，并且都会以某种规则保证存入的元素不出现重复。Set集合有多个子类，这里我们介绍其中的 java.util.HashSet 、 java.util.LinkedHashSet 这两个集合。</p><h4 id="2-2-2-1-hashcode"><a href="#2-2-2-1-hashcode" class="headerlink" title="2.2.2.1 hashcode"></a>2.2.2.1 hashcode</h4><p>java.lang.Object类 成员方法</p><p>public int hashCode(): 返回该对象的哈希码值。就是一个int数字</p><p>Object类中的hashCode方法,根据对象的地址值,计算一个int数字,叫哈希码值(哈希地址值)所以只要使用new创建对象,地址值不相同,所以计算的哈希值也不相同</p><p>注意:<br>1.子类不重写hashCode方法,调用Object类的hashCode方法,根据对象地址值计算哈希值</p><p>2.子类根据地址值计算哈希值,没有意义,需要根据内容计算哈希值</p><p>3.所以子类一般需要覆盖重写hashCode方法,根据对象的内容计算哈希值</p><p>4.根据对String的代码测试,发现String覆盖重写了hashCode方法,重写方式: 根据String中的每个字符的ASCII码值,按照一定的算法(存在漏洞)进行相加得来</p><p>5.所以比较String的哈希值,其实就是在比较String的内容</p><p>假设: String根据内部的每个字符的ASCII码值相加计算哈希值</p><p>“abc”       哈希值: 97 + 98 + 99 = 294</p><p>“bac”       哈希值: 98 + 97 + 99 = 294</p><p>总结:</p><p>1.如果两个对象的哈希值不同,能否说明两个对象的内容一定不同?</p><p>可以: 哈希值不同,内容必然不相同</p><p>2.如果两个对象的哈希值相同,能否说明两个对象的内容一定相同?</p><p>必须要调用equals方法:</p><p>true: 相同</p><p>false: 不相同</p><p>3.加入hashCode方法后,可以减少对equals方法的调用,提高效率</p><h3 id="2-2-2-Set接口常用的实现类"><a href="#2-2-2-Set接口常用的实现类" class="headerlink" title="2.2.2 Set接口常用的实现类"></a>2.2.2 Set接口常用的实现类</h3><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p>java.util.HashSet 是 Set 接口的一个实现类，它所存储的元素是不可重复的，并且元素都是无序的(即存取顺序不能保证不一致)。 java.util.HashSet 底层的实现其实是一个 java.util.HashMap 支持，由于我们暂时还未学习，先做了解。HashSet 是根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存储和查找性能。保证元素唯一性的方式依赖于： hashCode 与 equals 方法。</p><p>特点</p><p>1.无索引</p><p>2.不可重复(唯一)</p><p>3.无序: 不保证存入和取出的顺序是一致的</p><p>底层数据结构:</p><p>1.底层数据结构: 哈希表</p><p>2.哈希表: 数组+链表/红黑树(节点数量&gt;8)</p><p>3.查询速度非常快</p><p>hashSet存储原理<br><img src="/2020/02/19/day17list-set-shu-ju-jie-gou-collections/06_HashSet%E5%AD%98%E5%82%A8%E5%85%83%E7%B4%A0%E7%9A%84%E5%8E%9F%E7%90%86.png" alt="HashSet存储元素的原理图"></p><p>案例 使用HashSet存储自定义的Student类</p><p>给HashSet中存放自定义类型元素时，需要重写对象中的hashCode和equals方法，建立自己的比较方式，才能保证HashSet集合中的对象唯一</p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> age <span class="token operator">==</span> student<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span>                Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"....equals...."</span><span class="token operator">+</span>student<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"   : "</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"计算 "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">" 的哈希值: "</span><span class="token operator">+</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> h<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03HashSetStudent</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//2.创建HashSet集合对象,泛型Student</span>        HashSet<span class="token operator">&lt;</span>Student<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.HashSet集合对象调用add方法,添加多个Student对象</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小军子"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小军子"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小文字"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小文字"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"大亮子"</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"大亮子"</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"大欢子"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"大欢子"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.遍历输出: 迭代器/增强for</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Student stu <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><p>我们知道HashSet保证元素唯一，可是元素存放进去是没有顺序的，那么我们要保证有序，怎么办呢？在HashSet下面有一个子类 java.util.LinkedHashSet ，它是链表和哈希表组合的一个数据存储结构。</p><p>特点:</p><p>1.无索引</p><p>2.不可重复(唯一)</p><p>3.有序: 保证存入和取出的顺序是一致的</p><p>底层数据结构:</p><p>1.底层数据结构: 哈希表 + 链表</p><p>2.哈希表: 保证元素唯一</p><p>3.链表: 保证元素有序</p><h2 id="3-1-数据结构"><a href="#3-1-数据结构" class="headerlink" title="3.1 数据结构"></a>3.1 数据结构</h2><h3 id="3-3-1-数据结构介绍"><a href="#3-3-1-数据结构介绍" class="headerlink" title="3.3.1 数据结构介绍"></a>3.3.1 数据结构介绍</h3><p>数据结构 : 数据用什么样的方式组合在一起。</p><h3 id="3-3-2-常见数据结构"><a href="#3-3-2-常见数据结构" class="headerlink" title="3.3.2 常见数据结构"></a>3.3.2 常见数据结构</h3><p>数据存储的常用结构有：栈、队列、数组、链表和红黑树。我们分别来了解一下：</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul><li><p>数组:Array,是有序的元素序列，数组是在内存中开辟一段连续的空间，并在此空间存放元素。就像是一排出租屋，有100个房间，从001到100每个房间都有固定编号，通过编号就可以快速找到租房子的人。<br>简单的说,采用该结构的集合，对元素的存取有如下的特点：</p></li><li><p>查找元素快：通过索引，可以快速访问指定位置的元素</p></li><li><p>增删元素慢</p></li><li><p>示例图<br><img src="/2020/02/19/day17list-set-shu-ju-jie-gou-collections/03_%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84%E7%89%B9%E7%82%B9.png" alt="数组结构特点图"></p></li></ul><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><ul><li>栈：stack,又称堆栈，它是运算受限的线性表，其限制是仅允许在标的一端进行插入和删除操作，不允许在其他任何位置进行添加、查找、删除等操作。</li></ul><p>简单的说：采用该结构的集合，对元素的存取有如下的特点：</p><ul><li><p>先进后出（即，存进去的元素，要在后它后面的元素依次取出后，才能取出该元素）。例如，子弹压进弹夹，先压进去的子弹在下面，后压进去的子弹在上面，当开枪时，先弹出上面的子弹，然后才能弹出下面的子弹。</p></li><li><p>栈的入口、出口的都是栈的顶端位置。</p></li><li><p>示例图<br><img src="/2020/02/19/day17list-set-shu-ju-jie-gou-collections/01_%E6%A0%88%E7%BB%93%E6%9E%84%E7%89%B9%E7%82%B9.png" alt="栈结构特点图"></p></li></ul><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><ul><li>队列：queue,简称队，它同堆栈一样，也是一种运算受限的线性表，其限制是仅允许在表的一端进行插入，<br>而在表的另一端进行删除。</li></ul><p>简单的说，采用该结构的集合，对元素的存取有如下的特点：</p><ul><li><p>先进先出（即，存进去的元素，要在后它前面的元素依次取出后，才能取出该元素）。例如，小火车过山洞，车头先进去，车尾后进去；车头先出来，车尾后出来。</p></li><li><p>队列的入口、出口各占一侧。例如，下图中的左侧为入口，右侧为出口。</p></li><li><p>示例图<br><img src="/2020/02/19/day17list-set-shu-ju-jie-gou-collections/02_%E9%98%9F%E5%88%97%E7%BB%93%E6%9E%84%E7%89%B9%E7%82%B9.png" alt="队列结构特点图"></p></li></ul><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><ul><li>链表:linked list,由一系列结点node（链表中每一个元素称为结点）组成，结点可以在运行时i动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。我们常说的链表结构有单向链表与双向链表，那么这里给大家介绍的是单向链表</li></ul><p>简单的说，采用该结构的集合，对元素的存取有如下的特点：</p><ul><li><p>多个结点之间，通过地址进行连接。例如，多个人手拉手，每个人使用自己的右手拉住下个人的左手，依次类推，这样多个人就连在一起了。</p></li><li><p>查找元素慢：想查找某个元素，需要通过连接的节点，依次向后查找指定元素</p></li><li><p>增删元素快：</p></li><li><p>示例图<br><img src="/2020/02/19/day17list-set-shu-ju-jie-gou-collections/04_%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84%E7%89%B9%E7%82%B9.png" alt="链表结构特点图"></p></li></ul><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><ul><li>暂不做深究</li></ul><h2 id="4-1-Collections类"><a href="#4-1-Collections类" class="headerlink" title="4.1 Collections类"></a>4.1 Collections类</h2><h3 id="4-4-1-Collections常用功能"><a href="#4-4-1-Collections常用功能" class="headerlink" title="4.4.1 Collections常用功能"></a>4.4.1 Collections常用功能</h3><p>java.utils.Collections 是集合工具类，用来对集合进行操作。常用方法如下：</p><p>public static void shuffle(List&lt;?&gt; list) :打乱集合顺序。</p><p>public static <T> void sort(List<T> list) :将集合中元素按照默认规则排序。</T></T></p><p>public static <T> void sort(List<T> list，Comparator&lt;? super T&gt; ) :将集合中元素按照指定规则排序</T></T></p><h3 id="4-4-2-Comparator比较器"><a href="#4-4-2-Comparator比较器" class="headerlink" title="4.4.2 Comparator比较器"></a>4.4.2 Comparator比较器</h3><p>public static <T> void sort(List<T> list，Comparator<T> comp):将集合中元素按照指定规则排序。<br>参数:<br>1.List<T> list: 接口,传递实现类对象 ArrayList和LinkedList</T></T></T></T></p><p>2.Comparator<T> comp: 接口,用来指定比较规则的</T></p><p>抽象方法:<br>public abstract int compare(T t1,T t2): T是引用类型,不能直接相减,必须获取到属性</p><p>第一个参数-第二个参数: 升序</p><p>第二个参数-第一个参数: 降序序</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>例如 创建一个学生类，存储到ArrayList集合中完成指定排序操作</p><h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> age <span class="token operator">==</span> student<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span>                Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"....equals...."</span><span class="token operator">+</span>student<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"   : "</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"计算 "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">" 的哈希值: "</span><span class="token operator">+</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> h<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Student o1<span class="token punctuation">,</span> Student o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//年龄升序: 第一个对象的年龄 - 第二个对象的年龄</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo07Collections</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//2.创建List集合对象,泛型Student</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.List集合对象调用add方法,添加多个Student对象</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"ww"</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"zl"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前: "</span><span class="token operator">+</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            调用sort方法,按照年龄age属性排序            sort方法,需要一个Comparator接口类型的参数,必须传递实现类对象            定义Comparator接口的实现类,指定排序规则: 年龄升序         */</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MyComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄升序排序后: "</span><span class="token operator">+</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            调用sort方法,按照年龄age属性排序            sort方法,需要一个Comparator接口类型的参数,可以传递匿名内部类对象            指定排序规则: 年龄降序         */</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Student o1<span class="token punctuation">,</span> Student o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//指定排序规则: 年龄降序</span>                <span class="token comment" spellcheck="true">//第二个参数的年龄 - 第一个参数的年龄</span>                <span class="token keyword">return</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄降序排序后: "</span><span class="token operator">+</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day16Collection、泛型</title>
      <link href="/2020/02/17/day16collection-fan-xing/"/>
      <url>/2020/02/17/day16collection-fan-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="day16Collection、泛型"><a href="#day16Collection、泛型" class="headerlink" title="day16Collection、泛型"></a>day16Collection、泛型</h1><h2 id="1-1Collection集合"><a href="#1-1Collection集合" class="headerlink" title="1.1Collection集合"></a>1.1Collection集合</h2><h3 id="1-1-1-集合概述"><a href="#1-1-1-集合概述" class="headerlink" title="1.1.1 集合概述"></a>1.1.1 集合概述</h3><ul><li>集合：集合是java中提供的一种容器，可以用来存储多个数据。</li><li>集合和数组既然都是容器，它们有什么区别呢？</li><li>集合和数组都是容器,可以存储多个数据</li><li>数组的长度是固定的。集合的长度是可变的。</li><li>数组中存储的是同一类型的元素，可以存储任意类型数据。集合存储的都是引用数据类型。如果想存储基本类型数据需要存储对应的包装类型。<a id="more"></a><h3 id="1-1-2-集合常用类的继承体系"><a href="#1-1-2-集合常用类的继承体系" class="headerlink" title="1.1.2 集合常用类的继承体系"></a>1.1.2 集合常用类的继承体系</h3>Collection：单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是java.util.List 和 java.util.Set 。其中，List的特点是元素有序、元素可重复。 Set 的特点是元素不可重复。List 接口的主要实现类有 java.util.ArrayList 和 java.util.LinkedList ，Set 接口的主要实现类有java.util.HashSet 和 java.util.LinkedHashSet。</li></ul><p>从上面的描述可以看出JDK中提供了丰富的集合类库，为了便于初学者进行系统地学习，接下来通过一张图来描述集合常用类的继承体系</p><p><img src="/2020/02/17/day16collection-fan-xing/Collection%E4%BD%93%E7%B3%BB%E5%9B%BE.png" alt="Collection体系图"></p><p>注意:这张图只是我们常用的集合有这些，不是说就只有这些集合。集合本身是一个工具，它存放在java.util包中。在 Collection 接口定义着单列集合框架中最最共性的内容。</p><h3 id="1-1-3-Collection常用功能"><a href="#1-1-3-Collection常用功能" class="headerlink" title="1.1.3 Collection常用功能"></a>1.1.3 Collection常用功能</h3><p>Collection是所有单列集合的父接口，因此在Collection中定义了单列集合(List和Set)通用的一些方法，这些方法可用于操作所有的单列集合。方法如下：</p><ul><li>public boolean add(E e) ： 把给定的对象添加到当前集合中 。</li><li>public boolean contains(Object obj) : 判断当前集合中是否包含给定的对象。</li><li>public boolean isEmpty() : 判断当前集合是否为空。</li><li>public int size() : 返回集合中元素的个数。</li><li>public boolean remove(E e) : 把给定的对象在当前集合中删除。</li><li>public Object[] toArray() : 把集合中的元素，存储到数组中</li><li>public void clear() :清空集合中所有的元素。</li></ul><p>tips: 有关Collection中的方法可不止上面这些，其他方法可以自行查看API学习。</p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Diff</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建ArrayList集合对象,存储数据类型为String</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//add:添加数据</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String str <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义int类型的数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02CollectionMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//多态的方式创建Collection集合对象,存储数据类型String</span>        Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加元素: add</span>        <span class="token comment" spellcheck="true">//coll.add("ccc");</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[aaa, bbb, ccc]</span>        <span class="token comment" spellcheck="true">//判断是否包含"bbb"</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合中是否包含 bbb ?"</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        <span class="token comment" spellcheck="true">//判断是否包含"ddd"</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合中是否包含 ddd ?"</span><span class="token operator">+</span>coll<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合是否为空? "</span><span class="token operator">+</span>coll<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合元素的数量: "</span><span class="token operator">+</span>coll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span>        <span class="token comment" spellcheck="true">//删除"ccc"</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除ccc是否成功? "</span><span class="token operator">+</span>coll<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除ccc后集合的内容: "</span><span class="token operator">+</span>coll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[aaa, bbb]</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历Collection集合</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>coll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//coll.get(i);//错误: 因为Collection中没有定义与索引相关的方法</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//public Object[] toArray(): 把集合中的元素，存储到数组中</span>        <span class="token comment" spellcheck="true">//每个元素提升为Object类型,如果使用子类特有方法,需要强制类型转换</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object obj <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串: "</span><span class="token operator">+</span>obj<span class="token operator">+</span><span class="token string">" 的长度: "</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//clear() :清空集合中所有的元素</span>        coll<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合是否为空? "</span><span class="token operator">+</span>coll<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合元素的数量: "</span><span class="token operator">+</span>coll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-1迭代器"><a href="#2-1迭代器" class="headerlink" title="2.1迭代器"></a>2.1迭代器</h2><h3 id="2-2-1-Iterator接口"><a href="#2-2-1-Iterator接口" class="headerlink" title="2.2.1 Iterator接口"></a>2.2.1 Iterator接口</h3><p>在程序开发中，经常需要遍历集合中的所有元素。针对这种需求，JDK专门提供了一个接口java.util.Iterator 。想要遍历Collection集合，那么就要获取该集合迭代器完成迭代操作，下面介绍一下获迭代器的方法：</p><ul><li>public Iterator iterator() : 获取集合对应的迭代器，用来遍历集合中的元素的。</li></ul><p>下面介绍一下迭代的概念：</p><p>迭代：即Collection集合元素的通用获取方式。在取元素之前先要判断集合中有没有元素，如果有，就把这个元素取出来，继续在判断，如果还有就再取出出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。</p><p>Iterator接口的常用方法如下：</p><ul><li><p>public E next() :返回迭代的下一个元素。</p></li><li><p>public boolean hasNext() :如果仍有元素可以迭代，则返回 true。</p></li><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03Iterator</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.创建集合对象,存储多个元素</span>      Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.集合对象调用iterator方法,获取迭代器对象</span>      Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法内部,返回的必然是Iterator接口的实现类对象</span>      <span class="token comment" spellcheck="true">//3.迭代器对象调用hasNext方法,判断是否有下一个元素</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//4.如果有下一个元素,迭代器对象调用next方法,取出下一个元素</span>          String str <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>tips:</p></li></ul><ol><li>在进行集合元素获取时，如果集合中已经没有元素了，还继续使用迭代器的next方法，将会抛出java.util.NoSuchElementException没有集合元素异常。</li><li>在进行集合元素获取时，如果添加或移除集合中的元素 , 将无法继续迭代 , 将会抛出<br>ConcurrentModificationException并发修改异常.</li></ol><h3 id="2-2-2-迭代器的实现原理"><a href="#2-2-2-迭代器的实现原理" class="headerlink" title="2.2.2 迭代器的实现原理"></a>2.2.2 迭代器的实现原理</h3><p>我们在之前案例已经完成了Iterator遍历集合的整个过程。当遍历集合时，首先通过调用t集合的iterator()方法获得迭代器对象，然后使用hashNext()方法判断集合中是否存在下一个元素，如果存在，则调用next()方法将元素取出，否则说明已到达了集合末尾，停止遍历元素。</p><p>Iterator迭代器对象在遍历集合时，内部采用指针的方式来跟踪集合中的元素，为了让初学者能更好地理解迭代器的工作原理，接下来通过一个图例来演示Iterator对象迭代元素的过程：</p><p><img src="/2020/02/17/day16collection-fan-xing/%E8%BF%AD%E4%BB%A3%E5%99%A8%E9%81%8D%E5%8E%86%E5%8E%9F%E7%90%86.png" alt="迭代器遍历原理图"></p><p>在调用Iterator的next方法之前，迭代器的索引位于第一个元素之前，不指向任何元素，当第一次调用迭代器的next方法后，迭代器的索引会向后移动一位，指向第一个元素并将该元素返回，当再次调用next方法时，迭代器的索引会指向第二个元素并将该元素返回，依此类推，直到hasNext方法返回false，表示到达了集合的末尾，终止对元素的遍历</p><p>迭代器接口和类之间的关系</p><p><img src="/2020/02/17/day16collection-fan-xing/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="迭代器原理图"></p><h3 id="2-2-3-增强for"><a href="#2-2-3-增强for" class="headerlink" title="2.2.3 增强for"></a>2.2.3 增强for</h3><p>增强for循环(也称for each循环)是JDK1.5以后出来的一个高级for循环，专门用来遍历数组和集合的。它的内部原理其实是个Iterator迭代器，所以在遍历的过程中，不能对集合中的元素进行增删操作。</p><p>格式：</p><p>for(元素的数据类型  变量 : Collection集合or数组){</p><p>}</p><p>tips:</p><p>新for循环必须有被遍历的目标，目标只能是Collection或者是数组；新式for（迭代器）仅仅作为遍历操作出现，不能对集合进行增删元素操作，否则抛ConcurrentModificationException并发修改异常</p><h2 id="3-1泛型"><a href="#3-1泛型" class="headerlink" title="3.1泛型"></a>3.1泛型</h2><h3 id="3-3-1-泛型概述"><a href="#3-3-1-泛型概述" class="headerlink" title="3.3.1 泛型概述"></a>3.3.1 泛型概述</h3><ul><li>泛型：可以在类或方法中预支地使用未知的类型。</li></ul><p>tips:<br>一般在创建对象时，将未知的类型确定具体的类型。当没有指定泛型时，默认类型为Object类型。</p><h3 id="3-3-2-使用泛型的好处"><a href="#3-3-2-使用泛型的好处" class="headerlink" title="3.3.2 使用泛型的好处"></a>3.3.2 使用泛型的好处</h3><p>1.避免强制类型转换的麻烦</p><p>2.将运行时异常,提前到了编译时期,降低了程序员的工作量</p><p>3.一旦指定泛型,数据类型将被统一</p><p>4.实现代码的模板化,把数据类型当做参数传递</p><h3 id="3-3-3-泛型的定义与使用"><a href="#3-3-3-泛型的定义与使用" class="headerlink" title="3.3.3 泛型的定义与使用"></a>3.3.3 泛型的定义与使用</h3><h4 id="泛型类-定义的类上面含有泛型"><a href="#泛型类-定义的类上面含有泛型" class="headerlink" title="泛型类(定义的类上面含有泛型)"></a>泛型类(定义的类上面含有泛型)</h4><p>1.格式:</p><p>public class 类名&lt;泛型变量&gt; {</p><p> //…</p><p>}</p><p>泛型变量: 一般用大写字母表示, E,T,K,V</p><p>2.类上定义的泛型,什么时间确定具体的类型呢?</p><p>创建对象时,&lt;&gt;中写的是什么类型,泛型就代表什么类型</p><h4 id="泛型方法-方法上定义了属于方法自己的泛型"><a href="#泛型方法-方法上定义了属于方法自己的泛型" class="headerlink" title="泛型方法(方法上定义了属于方法自己的泛型):"></a>泛型方法(方法上定义了属于方法自己的泛型):</h4><p>1.格式:</p><p>修饰符 <T> 返回值类型 方法名称(T t,参数列表…) {</T></p><p>…</p><p>}</p><p>注意:前面<T> 在定义泛型后面方法参数: T t  再使用泛型</T></p><p>2.方法上定义的泛型,什么时间确定具体的类型呢?调用方法时,()中写的是什么类型,泛型就代表什么类型</p><h4 id="泛型接口-接口上面定义了泛型"><a href="#泛型接口-接口上面定义了泛型" class="headerlink" title="泛型接口(接口上面定义了泛型)"></a>泛型接口(接口上面定义了泛型)</h4><p>1.格式:<br>public interface 接口名称<T> {</T></p><p> //…</p><p>}</p><p>2.接口上定义的泛型,什么时间确定具体的类型呢?</p><p>(1)定义实现类时,直接确定接口上泛型的具体类型</p><p>(2)定义实现类时,不确定接口上泛型的具体的类型,</p><p>那么该实现类必须定义为泛型类,</p><p>而且实现类上的泛型变量要和接口上的泛型变量名称要一致</p><p>创建实现类对象时,&lt;&gt;中写是什么类型,那么泛型就是什么类型叫做: 泛型的传递</p><h3 id="3-3-4-泛型通配符"><a href="#3-3-4-泛型通配符" class="headerlink" title="3.3.4 泛型通配符"></a>3.3.4 泛型通配符</h3><h4 id="泛型统配符"><a href="#泛型统配符" class="headerlink" title="泛型统配符: ?"></a>泛型统配符: ?</h4><p>代表任意的一种引用类型,只能用来匹配泛型,不能用来定义泛型  </p><p>注意:</p><p>1.泛型是不存在多态的,创建集合对象时,左右两边的&lt;&gt;中的内容要保持一致</p><p>2.ArrayList&lt;?&gt; list 可以接收什么?</p><p>可以接收ArrayList的任意泛型对象(只要在创建ArrayList集合对象中&lt;&gt;中写上一种引用类型,都是可以的)</p><h4 id="泛型的上下限"><a href="#泛型的上下限" class="headerlink" title="泛型的上下限"></a>泛型的上下限</h4><p>一个类的子类可以有任意多个,如何表示一个类的任意子类呢?</p><p>? extends Person: 表示Person类型或者Person类型的任意子类型</p><p>泛型的上限:</p><p>? extends E: 表示E类型或者E类型的任意子类型</p><p>一个类的父类可以有任意多个,如何表示一个类的任意父类呢?</p><p>? super Teacher: 表示Teacher类型或者Teacher类型的任意父类型</p><p>泛型的下限:<br>? super E: 表示E类型或者E类型的任意父类型</p><h2 id="4-1集合案例"><a href="#4-1集合案例" class="headerlink" title="4.1集合案例"></a>4.1集合案例</h2><h3 id="4-4-1-案例介绍"><a href="#4-4-1-案例介绍" class="headerlink" title="4.4.1 案例介绍"></a>4.4.1 案例介绍</h3><p>按照斗地主的规则，完成洗牌发牌的动作。 具体规则：使用54张牌打乱顺序,三个玩家参与游戏，三人交替摸牌，每人17张牌，最后三张留作底牌。</p><h3 id="4-4-2-案例分析"><a href="#4-4-2-案例分析" class="headerlink" title="4.4.2 案例分析"></a>4.4.2 案例分析</h3><ul><li>准备牌：</li></ul><p>牌可以设计为一个ArrayList,每个字符串为一张牌。 每张牌由花色数字两部分组成，我们可以使用花色集合与数字集合嵌套迭代完成每张牌的组装。 牌由Collections类的shuffle方法进行随机排序。</p><ul><li><p>洗牌内部实现</p></li><li><p>发牌</p></li><li><p>将每个人以及底牌设计为ArrayList,将最后3张牌直接存放于底牌，剩余牌通过对3取模依次发牌。</p></li><li><p>看牌</p></li></ul><p>直接遍历打印集合</p><ul><li><p>分析图<br><img src="/2020/02/17/day16collection-fan-xing/%E6%96%97%E5%9C%B0%E4%B8%BB%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B.png" alt="斗地主综合案例图"></p></li><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*  斗地主综合案例      一: 准备牌          1.创建ArrayList集合对象pokers,代表牌盒,存储54张牌,泛型 String          2.创建2个ArrayList集合对象colors和nums,存储花色和数字          3.向花色集合colors中存储花色          4.向数字集合nums中存储数字          5.循环嵌套遍历花色集合和数字集合          6.产生一张扑克,存储牌盒pokers中          7.添加小王和大王          8.打印      二: 洗牌(打乱54张扑克的顺序)          java.util.Collections工具类,静态方法:              public static void shuffle(List&lt;?> list) : 打乱方法参数List接口的实现类对象中的元素顺序      三: 发牌          1.创建4个ArrayList集合对象,分别用来存储3个文件的扑克和底牌的扑克          2.因为要根据每张扑克索引发牌,所以只能使用普通for+get(索引),遍历存储54张扑克的ArrayList集合对象          3.获取当前扑克          4.因为要留出3张底牌,所以判断索引是否>50: 留作底牌          5.因为要留出3张底牌,所以判断索引是否&lt;=50: 根据索引%3的结果,发给不同的玩家      四: 看牌          直接打印*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PokerGame</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//一: 准备牌</span>      <span class="token comment" spellcheck="true">//1.创建ArrayList集合对象pokers,代表牌盒,存储54张牌,泛型 String</span>      ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> pokers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.创建2个ArrayList集合对象colors和nums,存储花色和数字</span>      ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//3.向花色集合colors中存储花色</span>      colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"♥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"♠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"♣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"♦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//4.向数字集合nums中存储数字: 2-10,J,Q,K,A</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          nums<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      nums<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"J"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      nums<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Q"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      nums<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"K"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      nums<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//5.循环嵌套遍历花色集合和数字集合</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>String num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>String color <span class="token operator">:</span> colors<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//6.产生一张扑克</span>              String poker <span class="token operator">=</span> color <span class="token operator">+</span> num<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//存储牌盒pokers中</span>              pokers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>poker<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//7.添加小王和大王</span>      pokers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      pokers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"大王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//8.打印</span>      <span class="token comment" spellcheck="true">//System.out.println(pokers);</span>      <span class="token comment" spellcheck="true">/*          二: 洗牌(打乱54张扑克的顺序)          java.util.Collections工具类,静态方法:              public static void shuffle(List&lt;?> list) : 打乱方法参数List接口的实现类对象中的元素顺序       */</span>      Collections<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>pokers<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//System.out.println(pokers);</span>      <span class="token comment" spellcheck="true">//三: 发牌</span>      <span class="token comment" spellcheck="true">//1.创建4个ArrayList集合对象,分别用来存储3个文件的扑克和底牌的扑克</span>      ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> bottom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.因为要根据每张扑克索引发牌,所以只能使用普通for+get(索引),遍历存储54张扑克的ArrayList集合对象</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pokers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//3.获取当前扑克</span>          String poker <span class="token operator">=</span> pokers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//4.因为要留出3张底牌,所以判断索引是否>50: 留作底牌</span>              bottom<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>poker<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//5.因为要留出3张底牌,所以判断索引是否&lt;=50: 根据索引%3的结果,发给不同的玩家</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//发给玩家一</span>                  p1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>poker<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//发给玩家二</span>                  p2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>poker<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//发给玩家三</span>                  p3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>poker<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//看牌</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"宝强: "</span><span class="token operator">+</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"金莲: "</span><span class="token operator">+</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"门庆: "</span><span class="token operator">+</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"底牌: "</span><span class="token operator">+</span>bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day15多线程</title>
      <link href="/2020/02/14/day15-duo-xian-cheng/"/>
      <url>/2020/02/14/day15-duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="day15多线程"><a href="#day15多线程" class="headerlink" title="day15多线程"></a>day15多线程</h1><h2 id="1-1多线程概述"><a href="#1-1多线程概述" class="headerlink" title="1.1多线程概述"></a>1.1多线程概述</h2><ul><li>并发和并行</li></ul><a id="more"></a><p><img src="/2020/02/14/day15-duo-xian-cheng/01.%E5%B9%B6%E5%8F%91%E5%92%8C%E5%B9%B6%E8%A1%8C.png" alt="01.并发和并行"></p><ul><li>线程和进程以及调度</li></ul><p><img src="/2020/02/14/day15-duo-xian-cheng/02.%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B%E4%BB%A5%E5%8F%8A%E8%B0%83%E5%BA%A6.png" alt="02.线程和进程以及调度"></p><h3 id="1-1-1创建线程的2种方法"><a href="#1-1-1创建线程的2种方法" class="headerlink" title="1.1.1创建线程的2种方法"></a>1.1.1创建线程的2种方法</h3><h4 id="一、继承Thread类"><a href="#一、继承Thread类" class="headerlink" title="一、继承Thread类"></a>一、继承Thread类</h4><p>步骤：</p><p>​        1.创建子类继承Thread类</p><p>​        2.重写Thread里面的run方法</p><p>​        3.创建子类对象</p><p>​        4.用子类对象调用start方法，开启线程，执行线程任务。</p><p>思考 ：   Thread代表线程类,为什么还要创建子类对象,并开启线程呢?</p><p>​        直接创建Thread对象，开启线程是没有问题的，但是Thread类中run方法，是默认指定的线程任务（没有任何功能的代码），</p><p>​            所以要定义Thread子类，重写run方法，才能指定我们直接的线程任务。</p><h4 id="二、实现Runnable接口"><a href="#二、实现Runnable接口" class="headerlink" title="二、实现Runnable接口"></a>二、实现Runnable接口</h4><p>步骤:</p><p>1.定义Runnable接口的实现类</p><p>2.Runnable接口的实现类覆盖重写run方法,指定线程任务</p><p>3.创建Runnable接口的实现类对象</p><p>4.创建Thread类的对象,传递Runnable接口的实现类对象</p><p>5.Thread类的对象调用start方法,开启线程</p><p>思考： 实现Runnable接口的方式的好处?</p><p>1.避免了java中类的单继承的局限性</p><p>2.降低了线程任务对象和线程对象之间的耦合性(事物之间的关系)</p><p>匿名内部类方式(Runnable接口简单写法)</p><p>​        (1)作用:<br>​            创建父类的子类对象的快捷方式<br>​            创建接口的实现类对象的快捷方式</p><p>​        2.格式:<br>​            new 父类/接口(){<br>​                //覆盖重写抽象方法<br>​            };</p><h3 id="1-1-2-多线程运行的原理"><a href="#1-1-2-多线程运行的原理" class="headerlink" title="1.1.2 多线程运行的原理"></a>1.1.2 多线程运行的原理</h3><p><img src="/2020/02/14/day15-duo-xian-cheng/05_%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="03.线程执行的内存图"></p><p>​    (1)线程任务run方法,是线程对象私有的</p><p>​   (2)某一个线程出现异常,不会影响其它线程</p><ul><li><p>获取线程名称</p><p>1.Thread类的成员方法</p><p>   public String getName() : 获取线程名称    </p><p>2.Thread类的静态方法（建议使用）</p><p>  public static Thread currentThread() : 返回对当前正在执行的线程对象<br>   方法currentThread()在哪个线程中执行,获取的就是那个线程对象</p></li></ul><h2 id="2-1-线程的同步"><a href="#2-1-线程的同步" class="headerlink" title="2.1 线程的同步"></a>2.1 线程的同步</h2><h3 id="2-2-1-买票案例分析"><a href="#2-2-1-买票案例分析" class="headerlink" title="2.2.1 买票案例分析"></a>2.2.1 买票案例分析</h3><p><img src="/2020/02/14/day15-duo-xian-cheng/06_%E5%8D%96%E7%A5%A8%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="04.卖票案例分析"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04SellTickets</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//3.创建Runnable接口的实现类对象,代表线程任务</span>        MyTickets task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTickets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.创建3个线程对象,传递线程任务对象</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.这3个线程对象,分别调用start方法,开启线程</span>        t0<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTickets</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//因为100张票,被3个线程共享使用,所以定义在成员位置</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//死循环</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//(1)判断是否有票</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tickets<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//(2)有: 出一张票</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"窗口: "</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 卖出第: "</span><span class="token operator">+</span>tickets<span class="token operator">+</span><span class="token string">" 张票...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//(3)减少一张票</span>                tickets<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>出现错误数据的原因</p><p><img src="/2020/02/14/day15-duo-xian-cheng/07_%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8E%9F%E5%9B%A0.png" alt="05.出现错误数据的原因"></p><h3 id="2-2-2同步代码块"><a href="#2-2-2同步代码块" class="headerlink" title="2.2.2同步代码块:"></a>2.2.2同步代码块:</h3><p>​作用: 用来解决多线程访问共享数据的数据安全问题</p><p>​格式:</p><p>synchronized(任意对象){</p><p>}</p><p>(3)注意:</p><p>(3.1){}: 所有操作共享数据的代码,写到{}中</p><p>(3.2)任意对象: 叫做锁对象,对象锁  专业术语: 对象监视器</p><p>(3.3)任意对象: 必须要唯一,多个线程共享使用</p><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05ThreadTongBu</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//3.创建Runnable接口的实现类对象,代表线程任务</span>      MyTickets task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTickets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//4.创建3个线程对象,传递线程任务对象</span>      Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread t0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//5.这3个线程对象,分别调用start方法,开启线程</span>      t0<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTickets</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//因为100张票,被3个线程共享使用,所以定义在成员位置</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//创建Object对象,作为锁对象,因为在成员位置,所以是唯一的</span>     <span class="token keyword">private</span> Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//Object obj = new Object();//不能定义在这里</span>      <span class="token comment" spellcheck="true">//死循环</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//(1)判断是否有票</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>tickets<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  <span class="token comment" spellcheck="true">//(2)有: 出一张票</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"窗口: "</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 卖出第: "</span><span class="token operator">+</span>tickets<span class="token operator">+</span><span class="token string">" 张票...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//(3)减少一张票</span>                  tickets<span class="token operator">--</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-3-同步方法"><a href="#2-2-3-同步方法" class="headerlink" title="2.2.3 同步方法:"></a>2.2.3 同步方法:</h3></li></ul><p>​作用: 用来解决多线程访问共享数据的数据安全问题</p><p>​格式: </p><p>修饰符 synchronized 返回值类型 方法名称(参数列表….) { //…}</p><p>(3)注意:<br>(3.1){}: 所有操作共享数据的代码,写到{}中</p><p>(3.2)考虑同步方法,是否具有锁对象?必须有锁对象: this</p><h3 id="2-2-4-同步的原理分析"><a href="#2-2-4-同步的原理分析" class="headerlink" title="2.2.4 同步的原理分析"></a>2.2.4 同步的原理分析</h3><p><img src="/2020/02/14/day15-duo-xian-cheng/08_%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90.png" alt="06，同步原理分析"></p><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo06ThreadTongBu</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//3.创建Runnable接口的实现类对象,代表线程任务</span>      MyTickets task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTickets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//4.创建3个线程对象,传递线程任务对象</span>      Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread t0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//5.这3个线程对象,分别调用start方法,开启线程</span>      t0<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTickets</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//因为100张票,被3个线程共享使用,所以定义在成员位置</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//死循环</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//调用同步方法,完成卖票</span>          <span class="token comment" spellcheck="true">//sellTicketsA();</span>          <span class="token comment" spellcheck="true">//调用普通方法,里面是同步代码块</span>          <span class="token function">sellTicketsB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//定义同步方法: 锁对象是this</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sellTicketsA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//(1)判断是否有票</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>tickets<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//(2)有: 出一张票</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"窗口: "</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 卖出第: "</span><span class="token operator">+</span>tickets<span class="token operator">+</span><span class="token string">" 张票...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//(3)减少一张票</span>          tickets<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//定义普通方法,里面使用同步代码块</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellTicketsB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//(1)判断是否有票</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>tickets<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">//(2)有: 出一张票</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"窗口: "</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 卖出第: "</span><span class="token operator">+</span>tickets<span class="token operator">+</span><span class="token string">" 张票...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//(3)减少一张票</span>              tickets<span class="token operator">--</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="2-2-5-使用Lock接口"><a href="#2-2-5-使用Lock接口" class="headerlink" title="2.2.5 使用Lock接口"></a>2.2.5 使用Lock接口</h3><p>java.util.concurrent.locks.Lock接口</p><p>抽象方法:<br>             public abstract void lock() : 获取锁。<br>             public abstract void unlock() : 释放锁。</p><p>实现类:java.util.concurrent.locks.ReentrantLock类空参构造:public ReentrantLock()</p><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo07ThreadTongBu</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//3.创建Runnable接口的实现类对象,代表线程任务</span>      MyTickets task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTickets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//4.创建3个线程对象,传递线程任务对象</span>      Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread t0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//5.这3个线程对象,分别调用start方法,开启线程</span>      t0<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTickets</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//因为100张票,被3个线程共享使用,所以定义在成员位置</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建Lock接口的实现类对象,作为锁对象,因为定义在成员位置,所以是唯一的</span>  Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//多态</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//死循环</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//上锁</span>          lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//执行操作共享数据的多条代码</span>          <span class="token comment" spellcheck="true">//(1)判断是否有票</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>tickets<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//(2)有: 出一张票</span>                      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"窗口: "</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 卖出第: "</span><span class="token operator">+</span>tickets<span class="token operator">+</span><span class="token string">" 张票...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//(3)减少一张票</span>                      tickets<span class="token operator">--</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//释放锁的动作,必须要被执行</span>                  lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="3-1线程的状态"><a href="#3-1线程的状态" class="headerlink" title="3.1线程的状态"></a>3.1线程的状态</h2><p><img src="/2020/02/14/day15-duo-xian-cheng/09_%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%9B%BE.png" alt="07.线程状态图"></p><h3 id="3-3-1wait和notify"><a href="#3-3-1wait和notify" class="headerlink" title="3.3.1wait和notify"></a>3.3.1wait和notify</h3><p>问题1:</p><p>1.sleep方法可以在同步中使用</p><p>2.sleep方法可以在非同步中使用</p><p>3.sleep方法与锁对象无关(不会释放锁)</p><p>问题2:</p><p>1.Object类定义wait和notify方法</p><p>2.任意对象都可以调用wait和notify方法</p><p>3.锁对象可以是任意对象</p><p>4.但是锁对象必须使用在同步中,所以wait和notify方法,必须在同步中使用</p><p>java.lang.Object类,方法</p><p>public void wait(): 释放锁对象,进入无限等待</p><p>在其他线程调用此对象的 notify() 方法前，导致当前线程等待</p><p>public void notify(): 唤醒在此对象监视器(锁对象)上等待的单个线程。</p><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02WaitNotify</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//创建锁对象</span>      Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"只听了3分钟,这哥们睡着了...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                      obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无限等待,释放锁对象,必须由其它线程,通过obj锁,调用notify方法,才能唤醒它</span>                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"听响哥的课,还敢睡觉,拍你一砖头,继续护着头听课....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你小子,不想混了,这个课多重要,不能睡觉,给你一砖头..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  obj<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>案例分析图<br><img src="/2020/02/14/day15-duo-xian-cheng/10_wait%E5%92%8Cnotify%E6%96%B9%E6%B3%95%E7%9A%84%E7%AE%80%E5%8D%95%E6%BC%94%E7%A4%BA.png" alt="08.wait和notify方法的简单演示"></p></li></ul><h3 id="3-3-2案例分析"><a href="#3-3-2案例分析" class="headerlink" title="3.3.2案例分析"></a>3.3.2案例分析</h3><p><img src="/2020/02/14/day15-duo-xian-cheng/11%E5%8C%85%E5%AD%90%E9%93%BA%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="09.包子铺案例分析"></p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo10BaoZiPuChiHuo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建List集合对象,在包子铺和吃货线程之间传递数据</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.创建BaoZiPuThread类的对象和ChiHuoThread类的对象</span>        BaoZiPuThread baoZiPuThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaoZiPuThread</span><span class="token punctuation">(</span><span class="token string">"庆丰包子铺"</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置线程名称</span>        <span class="token comment" spellcheck="true">//baoZiPuThread.setName("庆丰包子铺");</span>        ChiHuoThread chiHuoThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChiHuoThread</span><span class="token punctuation">(</span><span class="token string">"赵丽颖"</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//chiHuoThread.setName("赵丽颖");</span>        <span class="token comment" spellcheck="true">//4.分别调用start方法,开启线程</span>        baoZiPuThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chiHuoThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaoZiPuThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义成员变量,通过构造方法赋值</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BaoZiPuThread</span><span class="token punctuation">(</span>String threadName<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>threadName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//验证存和取的包子是否一致,给包子编号</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//1.判断是否有包子</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//2.有: 等待</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        list<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//3.没有:</span>                <span class="token comment" spellcheck="true">//3.1 包一个包子,存入集合中</span>                String bz <span class="token operator">=</span> <span class="token string">"薄皮的韭菜鸡蛋的大包子....."</span><span class="token operator">+</span>count<span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"包子铺: "</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 又包了一个: "</span><span class="token operator">+</span>bz<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//放到集合里</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bz<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//3.2 唤醒吃货吃包子</span>                list<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChiHuoThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义成员变量,通过构造方法赋值</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ChiHuoThread</span><span class="token punctuation">(</span>String threadName<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>threadName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//1.判断是否有包子</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//2.没有: 等待</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        list<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//3.有: 吃一个包子</span>            String bz <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃货: "</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 又吃了一个: "</span><span class="token operator">+</span>bz<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 唤醒包子铺,包包子</span>            list<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day14异常机制</title>
      <link href="/2020/02/13/day14-yi-chang-ji-zhi/"/>
      <url>/2020/02/13/day14-yi-chang-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="day14异常机制"><a href="#day14异常机制" class="headerlink" title="day14异常机制"></a>day14异常机制</h1><h2 id="1-1-异常概述"><a href="#1-1-异常概述" class="headerlink" title="1.1 异常概述"></a>1.1 异常概述</h2><ul><li>什么是异常</li></ul><p>异常指程序运行过程中出现的非正常现象，例如用户输入错误、除数为零、需要处理的文件不存在、数组下标越界等。</p><h2 id="1-2-异常分类"><a href="#1-2-异常分类" class="headerlink" title="1.2 异常分类"></a>1.2 异常分类</h2><p>Error:错误  是程序无法处理的错误，表示运行应用程序中较严重问题。</p><a id="more"></a><p>Exception:人得了感冒了,可以治疗  可以通过异常的处理代码处理这个异常</p><p>Exception:</p><ol><li><p>RuntimeException 运行时异常：</p><p>示例代码:</p><pre><code>   String s = null;   System.out.println(s.length());</code></pre></li></ol><ol start="2"><li><p>CheckedException 已检查异常</p><p>示例代码:</p><pre><code>   int a = 8.0;</code></pre></li></ol><ul><li>异常出现的过程</li></ul><p><img src="/2020/02/13/day14-yi-chang-ji-zhi/01.%E5%BC%82%E5%B8%B8%E5%87%BA%E7%8E%B0%E7%9A%84%E8%BF%87%E7%A8%8B.png" alt="包装类"></p><p>throw  –&gt;创建异常对象 ：  throw new ArrayIndexOutOfBoundsException(“大哥,越界了!”);  不由JVM创建，手动创建</p><h2 id="1-3-异常处理的方式"><a href="#1-3-异常处理的方式" class="headerlink" title="1.3 异常处理的方式"></a>1.3 异常处理的方式</h2><p>方式1 ：throws –&gt;异常(手动抛出异常)</p><ul><li>方式2 ：</li></ul><p>thr {</p><p>可能出现的异常</p><p>}catch（异常对象 对象名）{</p><p>处理异常</p><p>}finally{</p><p>一定会执行(一般用于关闭资源)</p><p>}；</p><p>快捷键：（选中目标后,idea根据你手动抛出的异常来进行智能的生成try，catch）Ctrl + Alt + T  </p><p>多Catch:</p><pre><code>try{ 可能出现的异常对象}catch(异常对象1 对象名){  处理异常}catch(异常对象2 对象名){  处理异常}</code></pre><p> 注意:</p><p>1.如果我们嫌弃多个catch麻烦,那么我们就直接一个catch Exception</p><p>2.我们在使用多catch的情况下,要求先抓子类的,再抓父类,但是没必要,我们直接catch一个父类异常</p><ul><li>两种异常处理方式的区别</li></ul><p><img src="/2020/02/13/day14-yi-chang-ji-zhi/02.%E4%B8%A4%E7%A7%8D%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="02.两种异常处理的区别"></p><p>throws:直接往上抛出,自己不做具体处理,抛给调用者(不要一味的往上抛)</p><p>try..catch:不交给jvm了,我们自己处理(一般try..catch都是统一处理)</p><ul><li>编译时期异常和运行时期异常的处理时机</li></ul><p>运行时期异常:不用代码处理   ,证明你的代码写的有问题,自己改去吧</p><p>编译时期异常:一般我们直接throws或者try..catch</p><ul><li><p>获取异常信息的三种方式</p><ul><li>public String getMessage():获取异常的描述信息,原因(提示给用户的时候,就提示错误原因。</li><li>public String toString():获取异常的类型和异常描述信息(不用)。</li><li>public void printStackTrace():打印异常的跟踪栈信息并输出到控制台。–&gt;常用</li></ul></li><li><p>异常在子父类继承关系的情况下的注意事项(方法重写方面)</p></li></ul><p>   1.父类中的方法,抛了异常,那么子类重写之后用抛异常吗？</p><pre><code>可抛可不抛   但是如果抛了,要是父类方法抛的异常的子类或者同类</code></pre><p>   2.如果父类中的方法,没有抛异常,子类重写之后用抛吗?</p><pre><code> 不用抛</code></pre><h2 id="1-4-自定义异常"><a href="#1-4-自定义异常" class="headerlink" title="1.4 自定义异常"></a>1.4 自定义异常</h2><p>  1.在程序中，可能会遇到JDK提供的任何标准异常类都无法充分描述清楚我们想要表达的问题，这种情况下可以创建自己的异常类，即自定义异常类。</p><p>  2.自定义异常类只需从Exception类或者它的子类派生一个子类即可。</p><p>  3.自定义异常类如果继承Exception类，则为受检查异常，必须对其进行处理;如果不想处理，可以让自定义异常类继承运行时异常RuntimeException类。</p><p>  4.习惯上，自定义异常类应该包含2个构造器：一个是默认的构造器，另一个是带有详细信息的构造器。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day13常用类</title>
      <link href="/2020/02/12/day13-chang-yong-lei/"/>
      <url>/2020/02/12/day13-chang-yong-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="day13常用类"><a href="#day13常用类" class="headerlink" title="day13常用类"></a>day13常用类</h1><h2 id="1-1-Object类"><a href="#1-1-Object类" class="headerlink" title="1.1 Object类"></a>1.1 Object类</h2><p>概述：顶级父类。</p><h3 id="toString方法："><a href="#toString方法：" class="headerlink" title="toString方法："></a>toString方法：</h3><p>如果一个类没有重写Object类中的toString方法，那么直接输出对象的时候是，是一个地址值（因为默认调用了Object类中toString方法）因为Object类中的toString就是返回了一个地址值</p><p>如果一个类重写了Object类中的toString方法，就直接调用重写后的toString方法。<br>Alt+Lnsert–&gt;toString（自动生成）</p><a id="more"></a><h3 id="equals方法："><a href="#equals方法：" class="headerlink" title="equals方法："></a>equals方法：</h3><p>==</p><p>针对基本数据类型比较：值</p><p>针对引用数据类型：地址值</p><p>1.不重写Object类中的equals方法，调用equals方法的时候，默认走Object类中的，比较地址值<br>2.重写了equals方法之后，我们应该比较的是属性值，我们就调用重写的equals方法。</p><p>Alt+Lnsert–&gt;equals…</p><h3 id="在自己的类中重写equals方法的注意事项"><a href="#在自己的类中重写equals方法的注意事项" class="headerlink" title="在自己的类中重写equals方法的注意事项"></a>在自己的类中重写equals方法的注意事项</h3><pre><code>    问题1:传递的实参是p1,Object参数接收的就是Person类型        我们应该调用Person中的name和age去比较值是否相等        那么Object obj = p2,无法调用Person中特有的name,age    解决:向下转型    问题2:如果我们传递的不是Person类型,那么向下转型的时候,会因为类型不一致而报错         ClassCastException    解决:利用instanceof去判断，还可以使用getClass()。    问题3:如果传递的是null,那么我们还得去判断一下,效率较低    解决:我从上面做非空判断    问题4:如果传递的是自己呢?就不要获取自己的name age了    解决:直接比较自己的地址值,提高判断效率</code></pre><ul><li>示例代码</li></ul><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Person person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> age <span class="token operator">==</span> person<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span>                Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="1-2-Date类"><a href="#1-2-Date类" class="headerlink" title="1.2 Date类"></a>1.2 Date类</h2><p>概述：类 Date 代表日期，精确到毫秒。</p><p>瞬间：一刹那</p><p>毫秒：时间单位    1秒=1000毫秒</p><p>作用：表示时间   测试代码的运行效率</p><p>获取毫秒：  System.currentTimeMillis（）；</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>  Date（）;  –&gt;直接获取当前时间</p><p>  Daet（long date）; –&gt; 根据毫秒获取时间</p><h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><p>  Ctrl+Alt+M（方法快速生成）</p><p> public long getTime（）把日期对象转换成时间毫秒值</p><p> public void setTime（long time） 把方法参数给定的毫秒值设置给日期对象</p><h2 id="1-3-DeteFormat类"><a href="#1-3-DeteFormat类" class="headerlink" title="1.3 DeteFormat类"></a>1.3 DeteFormat类</h2><p> 1.概述：是一个日期格式化的类，是一个抽象类</p><p> 2.使用的时候创建子类对象  SimpleDateFormat</p><p> 3.new SimpleDateFormat（需要给一个格式）</p><p> 注意：大小写不能写错，中间连接符随便写</p><p> 例：  yyyy-MM-dd-HH-mm-ss</p><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><p> public string format（Date date）</p><p> Date对象格式化成字符串</p><p> public Date parse（string suorce）</p><p> 字符串解析为Date对象</p><h2 id="1-4-Calendar类"><a href="#1-4-Calendar类" class="headerlink" title="1.4 Calendar类"></a>1.4 Calendar类</h2><p>概述：可以为在某一特定时刻和一组之间的转换的方法calendar fields如YEAR ， MONTH ， DAY_OF_MONTH ， HOUR ，等等，以及用于操纵该日历字段，如获取的日期下个星期。 时间上的瞬间可以表示为毫秒值，该值与1970年1月1日00：00：00.000 GMT（格里高利）的Epoch偏移。  </p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>Calendar rightNow = Calendar.getInstance();</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>public int get(int field)：返回给定日历字段的值。</p><p>public void set(int field, int value)：将给定的日历字段设置为给定值。</p><p>public abstract void add(int field, int amount)：根据日历的规则，为给定的日历字段添加或减去指定的时间量。</p><p>public Date getTime()：返回一个表示此Calendar时间值（从历元到现在的毫秒偏移量）的Date对象。</p><h2 id="1-5-Math-数学类"><a href="#1-5-Math-数学类" class="headerlink" title="1.5 Math 数学类"></a>1.5 Math 数学类</h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><p> 所有方法都是静态的</p><p> 类名直接调用</p><p> min 返回最小</p><p> max 返回最大</p><p> abs 返回绝对值</p><p> ceil  返回大于等于参数最小值，等于一个整数</p><p> floor  返回小于等于参数最小值，等于一个整数</p><p> round 四舍五入</p><h2 id="1-6-System类"><a href="#1-6-System类" class="headerlink" title="1.6 System类"></a>1.6 System类</h2><p> out–&gt;是system里的成员变量，被static final修饰</p><p>方法:</p><pre><code>  public   static void exit(int status)终止当前运行的   Java   虚拟机，非零表示异常终止  public   static long currentTimeMillis()返回当前时间(以毫秒为单位)--&gt;测试效率  public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)  复制数组元素:      src:原数组      srcPos:从原数组的第几个索引开始复制      dest:目的数组      destPos:从目的数组的那个所以开始粘贴      length:复制多长</code></pre><h2 id="1-7-包装类"><a href="#1-7-包装类" class="headerlink" title="1.7 包装类"></a>1.7 包装类</h2><p> 概述： 基本数据类型所对应的引用数据类型</p><h3 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h3><p> 概述：包装一个对象的原始类型int类</p><p> <img src="/2020/02/12/day13-chang-yong-lei/%E5%8C%85%E8%A3%85%E7%B1%BB.png" alt="包装类"></p><p>用法：</p><p> public Integer（int value）</p><p>public Integer（stringvalue） 将字符串转成包装类，只能写数字</p><p>基本数据类型和字符串进行转换</p><p>  基本–&gt;字符串:拼接””<br>                String类静态方法valueOf()</p><p>  字符串–&gt;基本数据类型<br>            parsexxx()</p><h3 id="拆箱和装箱"><a href="#拆箱和装箱" class="headerlink" title="拆箱和装箱"></a>拆箱和装箱</h3><p>装箱：Valueof–&gt;将基本数据类型转换成剧本数据类型</p><p>拆箱：intValue –&gt;把包装类转成对应的基本数据类型</p><h3 id="自动拆箱和装箱"><a href="#自动拆箱和装箱" class="headerlink" title="自动拆箱和装箱"></a>自动拆箱和装箱</h3><p>自动装箱：</p><p>基本类型的数据处于需要对象的环境中时，会自动转为“对象”。</p><pre><code> 如 Integer i = 5</code></pre><p>自动拆箱：<br>  每当需要一个值时，对象会自动转成基本数据类型，没必要再去显式调用intValue()、doubleValue()等转型方法。</p><pre><code>  如 Integer i = 5;int j = i; 这样的过程就是自动拆箱。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day12static和final和内部类</title>
      <link href="/2020/02/11/day12static-he-final-he-nei-bu-lei/"/>
      <url>/2020/02/11/day12static-he-final-he-nei-bu-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="day12static和final和内部类"><a href="#day12static和final和内部类" class="headerlink" title="day12static和final和内部类"></a>day12static和final和内部类</h1><h2 id="1-1-final-关键字"><a href="#1-1-final-关键字" class="headerlink" title="1.1 final 关键字"></a>1.1 final 关键字</h2><h3 id="1-1-1-final关键字使用"><a href="#1-1-1-final关键字使用" class="headerlink" title="1.1.1 final关键字使用"></a>1.1.1 final关键字使用</h3><p>可以修饰：</p><ul><li>类： </li></ul><p>格式:  public final class 类名</p><a id="more"></a><p>特点:  被final修饰的类不能被继承</p><ul><li>方法：</li></ul><p>格式:<br>            修饰符 final 返回值类型 方法名(参数){<br>             方法体<br>             返回值<br>         }</p><p>特点:被final修饰的方法不能被重写</p><ul><li>局部变量：  </li></ul><p>格式:<br>        final 数据类型 变量名 = 值</p><p>特点:<br>        被final修饰的局部变量一旦被初始化,那么不能被二次赋值</p><p>注意： 对象也属于局部变量：</p><p>格式:<br>        final 类名 对象名 = new 类名();</p><p>特点:<br>        被final修饰的对象名,地址值不能改变,但是对象中的属性可以改变</p><ul><li>成员变量：</li></ul><p>格式:<br>        final 数据类型 变量名</p><p>特点:<br>        被final修饰的成员变量不能被二次赋值</p><p>注意:<br>        1.要不就手动赋值<br>        2.要不就利用所有的构造初始化</p><ul><li>对象</li></ul><p>格式:<br>       final 类名 对象名 = new 类名();</p><p>特点:<br>       被final修饰的对象名,地址值不能改变,但是对象中的属性可以改变</p><h3 id="总结：就是不可修改"><a href="#总结：就是不可修改" class="headerlink" title="总结：就是不可修改"></a>总结：就是不可修改</h3><h2 id="1-2-static"><a href="#1-2-static" class="headerlink" title="1.2 static"></a>1.2 static</h2><h3 id="1-2-1-static关键字使用"><a href="#1-2-1-static关键字使用" class="headerlink" title="1.2.1 static关键字使用"></a>1.2.1 static关键字使用</h3><ul><li>Static的介绍<br><img src="/2020/02/11/day12static-he-final-he-nei-bu-lei/01.static%E7%9A%84%E4%BB%8B%E7%BB%8D.png" alt="01.static的介绍"></li></ul><p>可以修饰：</p><ul><li>类:</li></ul><p>java里面static一般用来修饰成员变量或函数。但有一种特殊用法是用static修饰内部类，普通类是不允许声明为静态的，只有内部类才可以。下面看看如何使用。</p><ul><li>方法： </li></ul><p>可以直接通过类名来进行调用。</p><ul><li>变量：</li></ul><p>被static修饰的成员变量叫做静态变量，也叫做类变量，说明这个变量是属于这个类的，而不是属于是对象，没有被static修饰的成员变量叫做实例变量，说明这个变量是属于某个具体的对象的。</p><ul><li>代码块：</li></ul><p>注意:<br>     1.优先于构造方法执行<br>     2.只执行一次</p><p>使用场景:<br>       当我们初始化变量的时候,只要求我们初始化一次,可用供后面的使用</p><h3 id="1-2-2-静态方法的访问特点"><a href="#1-2-2-静态方法的访问特点" class="headerlink" title="1.2.2 静态方法的访问特点"></a>1.2.2 静态方法的访问特点</h3><pre><code>  1.静态的不能直接访问非静态的    静态的属于类,非静态的属于对象,类一旦加载,那么静态的就会跟着类直接进内存,是优先于对象存在的    使用:创建对象,再调用非静态的方法  2.静态的能直接访问静态     同类:        直接调用        创建对象调用        类名直接调用     不同类:        创建对象调用        类名直接调用   3.非静态的能直接访问静态的      同类:         直接调用         创建对象调用         类名直接调用      不同类:          创建对象调用          类名直接调用</code></pre><ul><li>Static内存图<br><img src="/2020/02/11/day12static-he-final-he-nei-bu-lei/02.static%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE(%E7%9F%A5%E9%81%93%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E8%BF%9B%E7%9A%84%E5%86%85%E5%AD%98).png" alt="02.static的内存图"></li></ul><h3 id="总结-：方便在没有创建对象的情况下进行调用-方法-变量-。"><a href="#总结-：方便在没有创建对象的情况下进行调用-方法-变量-。" class="headerlink" title="总结 ：方便在没有创建对象的情况下进行调用(方法/变量)。"></a>总结 ：方便在没有创建对象的情况下进行调用(方法/变量)。</h3><h2 id="1-3-权限修饰符"><a href="#1-3-权限修饰符" class="headerlink" title="1.3 权限修饰符"></a>1.3 权限修饰符</h2><p><img src="/2020/02/11/day12static-he-final-he-nei-bu-lei/03%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6.png" alt="03权限修饰符"></p><h2 id="1-4-内部类"><a href="#1-4-内部类" class="headerlink" title="1.4 内部类"></a>1.4 内部类</h2><h3 id="1-4-1-内部类的定义"><a href="#1-4-1-内部类的定义" class="headerlink" title="1.4.1 内部类的定义"></a>1.4.1 内部类的定义</h3><p>所谓内部类就是在一个类内部进行其他类结构的嵌套操作。</p><h3 id="1-4-2-内部类的分类"><a href="#1-4-2-内部类的分类" class="headerlink" title="1.4.2 内部类的分类"></a>1.4.2 内部类的分类</h3><ul><li>成员内部类</li></ul><p>定义和使用：</p><p><img src="/2020/02/11/day12static-he-final-he-nei-bu-lei/%E6%88%90%E5%91%98%E5%86%85%E9%83%A8%E7%B1%BB.png" alt="成员内部类"></p><p>需要注意的是， 当成员内部类拥有和外部类同名的成员变量或这方法时， 默认情况下访问的是内部类的成员， 如要访问外部类的同名成员， 需要使用以下形式：</p><p>外部类.this.成员变量</p><p>外部类.this.成员方法 </p><p>内部类对象创方式：外部类.内部类 对象名 = new 外部类().new 内部类()</p><p>注意:<br>    内部类可以直接使用外部类的成员 外部类不能直接使用内部类的成员</p><ul><li>静态内部类</li></ul><p>定义和使用：<br><img src="/2020/02/11/day12static-he-final-he-nei-bu-lei/%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB.png" alt="静态内部类"></p><p>内部类对象创方式： 外部类.内部类 内部类对象 = new 外部类.内部类();</p><p>静态内部类也是定义在另一个类里面的类，只不过在类前加上了static。静态内部类是不需要依赖于外部类的，与静态成员变量类似。</p><ul><li>方法内部类</li></ul><p>定义和使用：<br><img src="/2020/02/11/day12static-he-final-he-nei-bu-lei/%E5%B1%80%E9%83%A8%E5%86%85%E9%83%A8%E7%B1%BB.png" alt="方法局部内部类"></p><p>方法内部类不允许使用访问权限修饰符（public、private、protected）均不允许。</p><p>局部内部类是定义在一个方法或作用域中的类，它的访问权限仅限于方法内或作用域内。</p><ul><li>匿名内部类</li></ul><p>定义和使用：<br><img src="/2020/02/11/day12static-he-final-he-nei-bu-lei/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB.png" alt="匿名内部类"></p><p>匿名内部类就是一个没有名字的方法内部类，因此特点和方法与方法内部类完全一致，除此之外，还有自己的特点：</p><p>1.匿名内部类必须继承一个抽象类或者实现一个接口。</p><p>2.匿名内部类没有类名，因此没有构造方法。</p><h3 id="总结-以后再深追细节吧。。。。"><a href="#总结-以后再深追细节吧。。。。" class="headerlink" title="总结: 以后再深追细节吧。。。。"></a>总结: 以后再深追细节吧。。。。</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day11接口与多态</title>
      <link href="/2020/02/10/day11-jie-kou-yu-duo-tai/"/>
      <url>/2020/02/10/day11-jie-kou-yu-duo-tai/</url>
      
        <content type="html"><![CDATA[<h1 id="day11接口与多态"><a href="#day11接口与多态" class="headerlink" title="day11接口与多态"></a>day11接口与多态</h1><h2 id="1-1-接口"><a href="#1-1-接口" class="headerlink" title="1.1 接口"></a>1.1 接口</h2><h3 id="1-1-1-接口的概述"><a href="#1-1-1-接口的概述" class="headerlink" title="1.1.1 接口的概述"></a>1.1.1 接口的概述</h3><ul><li><p>什么是接口</p><p>接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。</p></li><li><p>接口中有的东西</p></li></ul><a id="more"></a><ul><li>jdk7:<ul><li>被static final修饰的变量–&gt;常量   int i = 10</li><li>被abstract修饰的抽象方法–&gt;不写abstract,也有</li></ul></li><li>jdk8:<br> 默认方法<br> 静态方法</li><li>jdk9:<br> 私有方法</li></ul><ul><li><p>接口的定义和使用</p><ul><li><p>定义:修饰符 abstract 返回值类型 方法名(参数); 即使不写abstract,默认也有。</p></li><li><p>使用:</p><ol><li>创建一个实现类,实现这个接口   –&gt;implements</li><li>重写接口中的抽象方法,去实现这个方法</li><li>创建实现类对象(接口不能创建对象)</li><li>调用重写的方法</li></ol></li></ul></li></ul><ul><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterfaceDemo01</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新功能被实现了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p>public class InterfaceDemo01Impl implements InterfaceDemo01{<br>    @Override<br>    public void method() {<br>        System.out.println(“我是method方法”);<br>    }</p><pre><code>@Overridepublic void method01() {    System.out.println(&quot;我是method01方法&quot;);}</code></pre><p>}</p><p>public class Test {<br>    public static void main(String[] args) {<br>        //创建实现类的对象<br>        InterfaceDemo01Impl interfaceDemo01 = new InterfaceDemo01Impl();<br>        interfaceDemo01.method();<br>        interfaceDemo01.method01();<br>    }<br>}</p><pre><code>### 1.1.2 接口中不常见的几个用法接口中的默认方法的用法及注意事项定义:* 修饰符 default 返回值类型 方法名(参数){             方法体             返回值}使用：1.创建实现类,实现接口2.不用重写默认方法3.创建实现类对象,调用接口中的默认方法注意:* 接口中的默认方法可以重写(当实现类觉得接口中的默认方法功能不强大的时候),调用的是重写后的方法使用场景: 添加新功能*  示例代码```javapublic interface InterfaceDemo01 {    public default void method01(){        System.out.println(&quot;涛哥最帅!&quot;);    }}public class InterfaceDemo01Impl implements InterfaceDemo01{    @Override    public void method01(){        System.out.println(&quot;涛哥最帅,哇咔咔!&quot;);    }}public class Test {    public static void main(String[] args) {        InterfaceDemo01Impl interfaceDemo01 = new InterfaceDemo01Impl();        interfaceDemo01.method01();    }}</code></pre><p>接口中的静态方法</p><p>定义: </p><ul><li>public static 返回值类型 方法名(参数){<pre><code>方法体   返回值</code></pre>}</li></ul><p>使用:   接口名直接调用</p><ul><li>示例代码<pre class=" language-java"><code class="language-java"></code></pre></li></ul><p>public interface InterfaceDemo01 {<br>    public static void method01(){<br>        System.out.println(“我是接口中的静态方法”);<br>    }<br>}</p><p>public class Test {<br>    public static void main(String[] args) {<br>        InterfaceDemo01.method01();<br>    }<br>}</p><pre><code>接口中的常量定义格式:  * 修饰符 static final 数据类型 变量名 = 值--&gt;常量注意:* 不写static final 默认也有使用:接口名直接调用*  示例代码```javapublic interface InterfaceDemo01 {    public static final int NUM = 10;    //num = 20;    int i = 10;}public class Test {    public static void main(String[] args) {        System.out.println(InterfaceDemo01.NUM);    }}</code></pre><h3 id="1-1-3-接口中的多实现"><a href="#1-1-3-接口中的多实现" class="headerlink" title="1.1.3 接口中的多实现"></a>1.1.3 接口中的多实现</h3><p>类不能多继承,只支持单继承</p><p>接口可以多实现–&gt;一个实现类可以同时实现多个接口</p><p>继承一个类的同时实现多个接口–&gt;子类 extends 父类  implements 接口1,接口2</p><p>注意事项:</p><ol><li>一个类继承一个父类的同时实现一个或者多个接口,要重写所有的抽象方法</li><li>如果两个接口中有重名的抽象方法,那么我们就必须重写一个</li><li>如果两个接口中有重名的默认方法,那么我们必须重写一个</li><li>如果接口中有和父类的方法一样的默认方法,那么我们先执行父类的</li></ol><ul><li>示例代码<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fu</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodFu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是父类的methodFu方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p>public interface InterfaceA {<br>    void method();<br>    public abstract void methodA();<br>    public default void methodDef(){<br>        System.out.println(“我是接口A中的默认方法”);<br>    }<br>}</p><p>public interface InterfaceB {<br>    void method();<br>    public abstract void methodB();<br>    public default void methodDef(){<br>        System.out.println(“我是接口B中的默认方法”);<br>    }<br>}</p><p>public interface InterfaceC {<br>    public default void methodFu(){<br>        System.out.println(“我是接口中的methodFu方法”);<br>    }<br>}</p><p>public class InterfaceImpl implements InterfaceA,InterfaceB{<br>    @Override<br>    public void method() {<br>        System.out.println(“我是重写的接口A,接口B中的重名的抽象方法”);<br>    }</p><pre><code>@Overridepublic void methodA() {    System.out.println(&quot;我是重写的接口A中的抽象方法&quot;);}@Overridepublic void methodDef() {    System.out.println(&quot;我是重写的接口A,B中的重名的默认方法&quot;);}@Overridepublic void methodB() {    System.out.println(&quot;我是重写的接口B中的抽象方法&quot;);}</code></pre><p>}</p><p>public class InterfaceImpl02/* extends Fu*/ implements InterfaceA,InterfaceB{<br>    @Override<br>    public void method() {</p><pre><code>}@Overridepublic void methodA() {}@Overridepublic void methodDef() {}@Overridepublic void methodB() {}</code></pre><p>}</p><p>public class InterfaceImpl03 extends Fu implements InterfaceC{<br>}</p><p>public class Test {<br>    public static void main(String[] args) {<br>       /* InterfaceImpl anInterface = new InterfaceImpl();<br>        anInterface.methodDef();*/</p><pre><code>    InterfaceImpl03 interfaceImpl03 = new InterfaceImpl03();    interfaceImpl03.methodFu();}</code></pre><p>}</p><pre><code>### 1.1.4 接口中的多继承接口不仅能多实现还可以多继承  但是类不能多继承注意事项:父接口中如果有重名的默认方法,那么子接口中要重写一次*  示例代码```javapublic interface InterfaceA {    public default void method(){    }}public interface InterfaceB {    public default void method(){    }}public interface InterfaceSon extends InterfaceA,InterfaceB{    @Override    default void method() {        System.out.println(&quot;我是重写默认方法&quot;);    }}</code></pre><h3 id="1-5-接口与抽象类的区别"><a href="#1-5-接口与抽象类的区别" class="headerlink" title="1.5 接口与抽象类的区别"></a>1.5 接口与抽象类的区别</h3><pre><code> 1. 接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方 2. 抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 public static final 类型的。 3. 接口中不能含有静态代码块，而抽象类是可以有静态代码块和静态方法。 4. 一个类只能继承一个抽象类，而一个类却可以实现多个接口。</code></pre><ul><li>接口和抽象类的区别以及一般的使用场景<br><img src="/2020/02/10/day11-jie-kou-yu-duo-tai/01%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB%E4%BB%A5%E5%8F%8A%E4%B8%80%E8%88%AC%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF.png" alt="01接口和抽象类的区别以及一般的使用场景图"></li></ul><h2 id="1-2-多态"><a href="#1-2-多态" class="headerlink" title="1.2 多态"></a>1.2 多态</h2><h3 id="1-2-1-多态的概述"><a href="#1-2-1-多态的概述" class="headerlink" title="1.2.1 多态的概述"></a>1.2.1 多态的概述</h3><p>什么是多态</p><ul><li>多态指的是同一个方法调用，由于对象不同可能会有不同的行为</li></ul><p>多态的定义和使用</p><ol><li>定义父类</li><li>定义子类继承父类,重写父类的方法</li><li>父类引用指向子类对象–&gt;父类类名 对象名 = new 子类(),调用重写的方法</li></ol><p>多态的注意事项</p><ol><li>必须有子父类继承关系(实现共同的接口,实现类的关系)</li><li>必须有方法的重写</li><li>父类引用指向子类对象–&gt;父类类名 对象名 = new 子类(),调用重写的方法</li><li>不能调用子类特有的,只能调用重写的</li></ol><ul><li>示例代码<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物要吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p>public class Dog extends Animal{<br>    public void eat(){<br>        System.out.println(“狗啃骨头”);<br>    }</p><pre><code>public void lookDoor(){    System.out.println(&quot;狗会看门&quot;);}</code></pre><p>}</p><p>public class Test {<br>    public static void main(String[] args) {<br>        Animal animal = new Dog();<br>        animal.eat();<br>        //animal.lookDoor();<br>    }<br>}</p><pre><code>### 1.2.2 多态中成员变量和成员方法的访问特点多态中成员变量的访问--&gt;看等号左边是谁,就调用谁中的变量多态中成员方法的访问特点:看new的是谁,先调用谁的方法,子类没有,找父类### 1.2.3 多态的优缺点优点更多的体现在当参数传递,调用重写方法多态和普通new的优点和缺点普通:* 优点:既能调用重写的,还能调用自己特有的* 缺点:扩展性差多态:* 优点:扩展性强* 缺点:不能调用子类特有的* 示例代码```javapublic class Animal {    public void eat(){        System.out.println(&quot;动物吃饭&quot;);    }}public class Cat extends Animal{    public void eat(){        System.out.println(&quot;猫吃鱼&quot;);    }    public void catchMouse(){        System.out.println(&quot;猫抓老鼠&quot;);    }}public class Dog extends Animal{    public void eat(){        System.out.println(&quot;狗吃屎&quot;);    }    public void lookDoor(){        System.out.println(&quot;狗会看门&quot;);    }}public class Test {    public static void main(String[] args) {        Dog dog = new Dog();        //method01(dog);        method(dog);        Cat cat = new Cat();       // method02(cat);        method(cat);    }public static void method(Animal animal){//Animal animal = cat       animal.eat();       Dog dog = (Dog) animal;       dog.lookDoor();   }}</code></pre><h3 id="1-2-4-对象的转型"><a href="#1-2-4-对象的转型" class="headerlink" title="1.2.4 对象的转型"></a>1.2.4 对象的转型</h3><p>向上转型:父类引用指向子类对象  (默认)</p><p>弊端:不能调用子类特有的</p><p>向下转型(可以调用子类特有的)</p><p>Animal animal = new Dog()</p><p>Dog dog = (Dog) animal</p><p>Cat cat = (Cat)animal—&gt;将代表狗的animal转成了cat–&gt;ClassCastException(类型转换异常)</p><p>关键字:instanceof</p><p>用于判断对象名 instanceof 对象–&gt;前面的是否属于后面的对象</p><ul><li>示例代码<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物要吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p>public class Cat extends Animal{<br>    public void eat(){<br>        System.out.println(“猫吃鱼”);<br>    }</p><pre><code>public void catchMouse(){    System.out.println(&quot;猫捉老鼠&quot;);}</code></pre><p>}</p><p>public class Dog extends Animal{<br>    public void eat(){<br>        System.out.println(“狗吃骨头”);<br>    }</p><pre><code>public void lookDoor(){    System.out.println(&quot;狗会看门&quot;);}</code></pre><p>}</p><p>public class Test {<br>    public static void main(String[] args) {</p><pre><code>   /* Animal animal = new Dog();    animal.eat();    //向下转型    Dog dog = (Dog)animal;    dog.lookDoor();    Cat cat = (Cat)animal;    cat.catchMouse();*/    Dog dog = new Dog();    method(dog);   /* Cat cat = new Cat();    method(cat);*/}public static void method(Animal animal){    if (animal instanceof Dog){        animal.eat();        Dog dog = (Dog)animal;        dog.lookDoor();    }    if (animal instanceof Cat){        animal.eat();        Cat cat = (Cat)animal;        cat.catchMouse();    }}</code></pre><p>}</p><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day10继承与抽象类</title>
      <link href="/2020/02/10/day10-ji-cheng-yu-chou-xiang-lei/"/>
      <url>/2020/02/10/day10-ji-cheng-yu-chou-xiang-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="day10继承与抽象类"><a href="#day10继承与抽象类" class="headerlink" title="day10继承与抽象类"></a>day10继承与抽象类</h1><h2 id="1-1-继承"><a href="#1-1-继承" class="headerlink" title="1.1 继承"></a>1.1 继承</h2><h3 id="1-1-1-继承概述【理解】"><a href="#1-1-1-继承概述【理解】" class="headerlink" title="1.1.1 继承概述【理解】"></a>1.1.1 继承概述【理解】</h3><ul><li><p>什么是继承</p><p>​继承就是子类继承父类的特征和和行为，使得子类对象（实例）具有父类的实例域和方法，还可以以此基础添加新方法和域来满足需求。</p></li></ul><a id="more"></a><ul><li>继承的介绍以及注意事项<br><img src="/2020/02/10/day10-ji-cheng-yu-chou-xiang-lei/01.%E7%BB%A7%E6%89%BF%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.png" alt="继承的介绍以及注意事项图"></li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//员工类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YuanGong</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">YuanGong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">YuanGong</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//讲师类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">YuanGong</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//讲课功能</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"东哥讲Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//助教类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhuJiao</span> <span class="token keyword">extends</span> <span class="token class-name">YuanGong</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//辅导功能</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fuDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"助教要辅导"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-1-2-继承中成员变量和成员方法的访问特点"><a href="#1-1-2-继承中成员变量和成员方法的访问特点" class="headerlink" title="1.1.2 继承中成员变量和成员方法的访问特点"></a>1.1.2 继承中成员变量和成员方法的访问特点</h3><ol><li><p>子类和父类中定义出来的变量不重名</p><p>  当我new父类对象时,只能调用自己的成员,不能调用子类的成员</p><p>  当我们new子类对象时,既能调用继承父类的,也能调用自己特有的</p></li><li><p>重名</p><p>   等号左边是谁,优先调用谁的成员变量,如果子类中没有,找父类</p></li><li><p>总结</p><p>   子债父偿,成员方法同理</p></li></ol><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fu</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Zi</span> <span class="token keyword">extends</span> <span class="token class-name">Fu</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//int i = 30;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建父类对象</span>        Fu fu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fu<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println(fu.j);</span>        <span class="token comment" spellcheck="true">//创建子类对象</span>        Zi zi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zi<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zi<span class="token punctuation">.</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-1-3-方法的重写"><a href="#1-1-3-方法的重写" class="headerlink" title="1.1.3 方法的重写"></a>1.1.3 方法的重写</h3><ol><li>概述:子类有一个和父类一样的方法</li><li>访问特点:看new的是谁,先调用谁,子类没有找父类</li><li>注解:@Override–&gt;可以检测此方法是不是重写方法</li><li>前提:子父类继承关系</li><li>注意事项:<ul><li>子类方法覆盖父类方法，必须要保证权限大于等于父类权限。</li><li>public   protected   默认(default)  private</li><li>子类方法覆盖父类方法，返回值类型、函数名和参数列表都要一模一样。</li><li>私有方法不能被重写(父类私有成员子类是不能继承的)</li><li>子类方法重写父类方法时,子类的方法返回值要是父类方法返回值的子类或者一样</li></ul></li><li>总结：方法的重写写成与父类一样的方法就行</li></ol><h4 id="1-3-1-方法重写的使用场景"><a href="#1-3-1-方法重写的使用场景" class="headerlink" title="1.3.1 方法重写的使用场景"></a>1.3.1 方法重写的使用场景</h4><p><img src="/2020/02/10/day10-ji-cheng-yu-chou-xiang-lei/02.%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF.png" alt="02.方法重写的使用场景"></p><h4 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OldPhone</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示手机号!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewPhone</span> <span class="token keyword">extends</span> <span class="token class-name">OldPhone</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//重写来电显示的功能</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//父类的show方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示归属地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示头像"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        NewPhone newPhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newPhone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newPhone<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newPhone<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-4-1-继承中this和super的使用"><a href="#1-4-1-继承中this和super的使用" class="headerlink" title="1.4.1 继承中this和super的使用"></a>1.4.1 继承中this和super的使用</h3><ul><li><p>super–&gt;代表的是父类对象</p><ul><li>注意:构造方法中,第一行默认会有一个super()</li><li>super()代表的是父类的空参构造,即使没有手写上,默认也有</li><li>子类中如果写了有参构造,默认第一行会调用父类的有参构造,如果子类的有参构造中将super(参数),去掉,就会去找父类的无参构造</li></ul></li><li><p>特点:可以调用父类的构造方法(只能在子类的构造方法中),普通方法,成员变量</p><ul><li>访问父类的空参构造–&gt;在子类的构造方法中第一行:super()</li><li>访问父类的成员变量–&gt;在子类的方法中:super.成员变量名</li><li>访问父类的方法–&gt;在子类的方法中:super.方法名(参数)</li></ul></li><li><p>this–&gt;代表的是当前对象</p><ul><li>作用:区分成员变量和局部变量重名的问题</li><li>使用本类的成员变量–&gt;在本类中:this.成员变量名</li><li>调用本类的方法–&gt;在本类中:this.方法名(参数)</li><li>调用本类的构造方法–&gt;在本类的构造方法中:this(参数)</li></ul></li><li><p>注意:</p><ul><li>1.使用this调用本类的其他构造方法时,也要写在构造方法的第一行,但是this(参数),不会自动提供的,想使用,自己手写</li><li>2.this和super在构造方法中不能同时出现–&gt;一山不容二虎</li><li>3.在本类中有参和空参不能相互调用</li></ul></li><li><p>总结:</p><ul><li>super多用在子类中,调用父类的成员，this多用在本类中,调用自己的成员</li></ul></li></ul><h4 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//this(10);</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是空参构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是有参构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//20</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人要吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">methodPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-5-1-继承的特点"><a href="#1-5-1-继承的特点" class="headerlink" title="1.5.1 继承的特点"></a>1.5.1 继承的特点</h3><ol><li><p>父类也称作超类、基类、子类也被称作派生类等。</p></li><li><p>Java中只有单继承，没有像C++那样的多继承。多继承会引起混乱，使得继承链过于复杂，系统难于维护。</p></li><li><p>Java中类没有多继承，接口有多继承。</p></li><li><p>子类继承父类，可以得到父类的全部属性和方法 (除了父类的构造方法)，但不见得可以直接访问(比如，父类私有的属性和方法)。</p></li><li><p>如果定义一个类时，没有调用extends，则它的父类是：java.lang.Object。</p></li><li><p>一个父类可以有多个子类</p></li><li><p>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。</p></li><li><p>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。子类可以用自己的方式实现父类的方法。</p></li></ol><h2 id="1-2-抽象类"><a href="#1-2-抽象类" class="headerlink" title="1.2 抽象类"></a>1.2 抽象类</h2><h3 id="抽象类的概述-1-2-1"><a href="#抽象类的概述-1-2-1" class="headerlink" title="抽象类的概述 1.2.1"></a>抽象类的概述 1.2.1</h3><ul><li><p>什么是抽象类和抽象方法</p><p> 抽象类：包含抽象方法的类就是抽象类。 </p><p> 抽象方法：使用abstract修饰的方法，没有方法体，只有声明。定义的是一种“规范”，就是告诉子类必须要给抽象方法提供具体的实现。</p></li><li><p>抽象类的介绍<br><img src="/2020/02/10/day10-ji-cheng-yu-chou-xiang-lei/03.%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E4%BB%8B%E7%BB%8D.png" alt="03.抽象类的介绍"></p></li></ul><h4 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*   抽象类的定义  abstract class 类名   抽象方法的定义:修饰符  abstract 返回值类型 方法名(参数);   使用:       1.定义子类,继承抽象类       2.重写父类中的抽象方法(要重写掉父类中所有的抽象方法)       3.创建子类对象,调用重写的方法(抽象类不能new对象)    注意:       1.抽象方法所在类一定是抽象类       2.抽象类中不一定非得有抽象方法       3.抽象类中除了有抽象方法,还可以有其他普通类的成员 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">drink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗吃屎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗喝水"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dog dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">drink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-2-抽象类的注意事项"><a href="#1-2-2-抽象类的注意事项" class="headerlink" title="1.2.2 抽象类的注意事项"></a>1.2.2 抽象类的注意事项</h3><ol><li><p>有抽象方法的类只能定义成抽象类</p></li><li><p>抽象类不能实例化，即不能用new来实例化抽象类，只能创建非抽象的子类的对象。</p><ul><li>理解：假设创建了抽象类的对象，抽象方法也没有实现，所以是无意义的</li></ul></li><li><p>抽象类可以包含属性、方法、构造方法。但是构造方法不能用来new实例，只能用来被子类调用，用来初始化父类的成员变量</p><ul><li>理解：子类的构造方法有默认的super(),需要方法父类的构造方法</li></ul></li><li><p>抽象类只能用来被继承。</p></li><li><p>所有的抽象方法都必须被子类实现，否则会报错，除非该子类也是抽象类</p><ul><li>理解：与继承的特性冲突，调用无实现的方法无意义</li></ul></li><li><p>抽象类不一定包含抽象方法，有抽象方法的必定是抽象类</p><ul><li>理解： 抽象方法定义在抽象类里被子类继承实现才有意义</li></ul></li></ol><h4 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//public abstract void drink();</span><span class="token punctuation">}</span><span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">XiaoMing</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">XiaoMing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">XiaoMing</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小明要吃炒面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        XiaoMing xiaoMing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoMing</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> xiaoMing<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-3-匿名对象"><a href="#1-3-匿名对象" class="headerlink" title="1.3 匿名对象"></a>1.3 匿名对象</h2><p>概述: 没有名字的对象</p><p>使用: new 类名().成员</p><p>注意:</p><ol><li>如果使用匿名对象的话,需要在方法只调用一次的时候</li><li>如果使用匿名对象为属性赋值,再用匿名对象去取值,是不可以的(因为你会3.3. new很多次,会产生多个对象)</li></ol><p>使用场景:一般用于单纯的调方法</p><p>匿名对象作为方法的参数以及返回值：传递以及返回的是地址值         </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day09-ArrayList集合&amp;学生管理系统</title>
      <link href="/2020/02/08/day09-arraylist-ji-he-xue-sheng-guan-li-xi-tong/"/>
      <url>/2020/02/08/day09-arraylist-ji-he-xue-sheng-guan-li-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="day09-ArrayList集合-amp-学生管理系统"><a href="#day09-ArrayList集合-amp-学生管理系统" class="headerlink" title="day09-ArrayList集合&amp;学生管理系统"></a>day09-ArrayList集合&amp;学生管理系统</h1><h2 id="1-ArrayList"><a href="#1-ArrayList" class="headerlink" title="1.ArrayList"></a>1.ArrayList</h2><h3 id="1-1ArrayList类概述【理解】"><a href="#1-1ArrayList类概述【理解】" class="headerlink" title="1.1ArrayList类概述【理解】"></a>1.1ArrayList类概述【理解】</h3><ul><li><p>什么是集合</p><p>​    提供一种存储空间可变的存储模型，存储的数据容量可以发生改变</p></li><li><p>ArrayList集合的特点</p></li></ul><a id="more"></a><p>  ​    底层是数组实现的，长度可以变化</p><ul><li><p>泛型的使用</p><p>​    用于约束集合中存储元素的数据类型</p></li></ul><h3 id="1-2ArrayList类常用方法【应用】"><a href="#1-2ArrayList类常用方法【应用】" class="headerlink" title="1.2ArrayList类常用方法【应用】"></a>1.2ArrayList类常用方法【应用】</h3><h4 id="1-2-1构造方法"><a href="#1-2-1构造方法" class="headerlink" title="1.2.1构造方法"></a>1.2.1构造方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public ArrayList()</td><td>创建一个空的集合对象</td></tr></tbody></table><h4 id="1-2-2成员方法"><a href="#1-2-2成员方法" class="headerlink" title="1.2.2成员方法"></a>1.2.2成员方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean   remove(Object o)</td><td>删除指定的元素，返回删除是否成功</td></tr><tr><td>public E   remove(int   index)</td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>public E   set(int index,E   element)</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>public E   get(int   index)</td><td>返回指定索引处的元素</td></tr><tr><td>public int   size()</td><td>返回集合中的元素的个数</td></tr><tr><td>public boolean   add(E e)</td><td>将指定的元素追加到此集合的末尾</td></tr><tr><td>public void   add(int index,E   element)</td><td>在此集合中的指定位置插入指定的元素</td></tr></tbody></table><h4 id="1-2-3示例代码"><a href="#1-2-3示例代码" class="headerlink" title="1.2.3示例代码"></a>1.2.3示例代码</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListDemo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建集合</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加元素</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public boolean remove(Object o)：删除指定的元素，返回删除是否成功</span><span class="token comment" spellcheck="true">//        System.out.println(array.remove("world"));</span><span class="token comment" spellcheck="true">//        System.out.println(array.remove("javaee"));</span>        <span class="token comment" spellcheck="true">//public E remove(int index)：删除指定索引处的元素，返回被删除的元素</span><span class="token comment" spellcheck="true">//        System.out.println(array.remove(1));</span>        <span class="token comment" spellcheck="true">//IndexOutOfBoundsException</span><span class="token comment" spellcheck="true">//        System.out.println(array.remove(3));</span>        <span class="token comment" spellcheck="true">//public E set(int index,E element)：修改指定索引处的元素，返回被修改的元素</span><span class="token comment" spellcheck="true">//        System.out.println(array.set(1,"javaee"));</span>        <span class="token comment" spellcheck="true">//IndexOutOfBoundsException</span><span class="token comment" spellcheck="true">//        System.out.println(array.set(3,"javaee"));</span>        <span class="token comment" spellcheck="true">//public E get(int index)：返回指定索引处的元素</span><span class="token comment" spellcheck="true">//        System.out.println(array.get(0));</span><span class="token comment" spellcheck="true">//        System.out.println(array.get(1));</span><span class="token comment" spellcheck="true">//        System.out.println(array.get(2));</span>        <span class="token comment" spellcheck="true">//System.out.println(array.get(3)); //？？？？？？ 自己测试</span>        <span class="token comment" spellcheck="true">//public int size()：返回集合中的元素的个数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出集合</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"array:"</span> <span class="token operator">+</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-3ArrayList存储字符串并遍历【应用】"><a href="#1-3ArrayList存储字符串并遍历【应用】" class="headerlink" title="1.3ArrayList存储字符串并遍历【应用】"></a>1.3ArrayList存储字符串并遍历【应用】</h3><h4 id="1-3-1案例需求"><a href="#1-3-1案例需求" class="headerlink" title="1.3.1案例需求"></a>1.3.1案例需求</h4><p>​    创建一个存储字符串的集合，存储3个字符串元素，使用程序实现在控制台遍历该集合</p><h4 id="1-3-2代码实现"><a href="#1-3-2代码实现" class="headerlink" title="1.3.2代码实现"></a>1.3.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:创建集合对象        2:往集合中添加字符串对象        3:遍历集合，首先要能够获取到集合中的每一个元素，这个通过get(int index)方法实现        4:遍历集合，其次要能够获取到集合的长度，这个通过size()方法实现        5:遍历集合的通用格式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建集合对象</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//往集合中添加字符串对象</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"刘正风"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"左冷禅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"风清扬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历集合，其次要能够获取到集合的长度，这个通过size()方法实现</span><span class="token comment" spellcheck="true">//        System.out.println(array.size());</span>        <span class="token comment" spellcheck="true">//遍历集合的通用格式</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String s <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-4ArrayList存储学生对象并遍历【应用】"><a href="#1-4ArrayList存储学生对象并遍历【应用】" class="headerlink" title="1.4ArrayList存储学生对象并遍历【应用】"></a>1.4ArrayList存储学生对象并遍历【应用】</h3><h4 id="1-4-1案例需求"><a href="#1-4-1案例需求" class="headerlink" title="1.4.1案例需求"></a>1.4.1案例需求</h4><p>​    创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p><h4 id="1-4-2代码实现"><a href="#1-4-2代码实现" class="headerlink" title="1.4.2代码实现"></a>1.4.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:定义学生类        2:创建集合对象        3:创建学生对象        4:添加学生对象到集合中        5:遍历集合，采用通用遍历格式实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建集合对象</span>        ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建学生对象</span>        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"林青霞"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"风清扬"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张曼玉"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加学生对象到集合中</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历集合，采用通用遍历格式实现</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Student s <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-5ArrayList存储学生对象并遍历升级版【应用】"><a href="#1-5ArrayList存储学生对象并遍历升级版【应用】" class="headerlink" title="1.5ArrayList存储学生对象并遍历升级版【应用】"></a>1.5ArrayList存储学生对象并遍历升级版【应用】</h3><h4 id="1-5-1案例需求"><a href="#1-5-1案例需求" class="headerlink" title="1.5.1案例需求"></a>1.5.1案例需求</h4><p>​    创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p><p>​        学生的姓名和年龄来自于键盘录入</p><h4 id="1-5-2代码实现"><a href="#1-5-2代码实现" class="headerlink" title="1.5.2代码实现"></a>1.5.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:定义学生类，为了键盘录入数据方便，把学生类中的成员变量都定义为String类型        2:创建集合对象        3:键盘录入学生对象所需要的数据        4:创建学生对象，把键盘录入的数据赋值给学生对象的成员变量        5:往集合中添加学生对象        6:遍历集合，采用通用遍历格式实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建集合对象</span>        ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//为了提高代码的复用性，我们用方法来改进程序</span>        <span class="token function">addStudent</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addStudent</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addStudent</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历集合，采用通用遍历格式实现</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Student s <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        两个明确：            返回值类型：void            参数：ArrayList&lt;Student> array     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addStudent</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//键盘录入学生对象所需要的数据</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生姓名:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生年龄:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建学生对象，把键盘录入的数据赋值给学生对象的成员变量</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//往集合中添加学生对象</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-学生管理系统"><a href="#2-学生管理系统" class="headerlink" title="2.学生管理系统"></a>2.学生管理系统</h2><h3 id="2-1学生管理系统实现步骤【理解】"><a href="#2-1学生管理系统实现步骤【理解】" class="headerlink" title="2.1学生管理系统实现步骤【理解】"></a>2.1学生管理系统实现步骤【理解】</h3><ul><li><p>案例需求</p><p>​    针对目前我们的所学内容，完成一个综合案例：学生管理系统！该系统主要功能如下：</p><p>​    添加学生：通过键盘录入学生信息，添加到集合中</p><p>​    删除学生：通过键盘录入要删除学生的学号，将该学生对象从集合中删除</p><p>​    修改学生：通过键盘录入要修改学生的学号，将该学生对象其他信息进行修改</p><p>​    查看学生：将集合中的学生对象信息进行展示</p><p>​    退出系统：结束程序</p></li><li><p>实现步骤</p><ol><li><p>定义学生类，包含以下成员变量</p><p>​       private String sid            // 学生id</p><p>​       private String name       // 学生姓名</p><p>​       private String age          // 学生年龄</p><p>​       private String address   // 学生所在地</p></li><li><p>学生管理系统主界面的搭建步骤</p><p>2.1 用输出语句完成主界面的编写<br>2.2 用Scanner实现键盘输入<br>2.3 用switch语句完成选择的功能<br>2.4 用循环完成功能结束后再次回到主界面</p></li><li><p>学生管理系统的添加学生功能实现步骤</p><p>3.1 定义一个方法，接收ArrayList<Student>集合<br>3.2 方法内完成添加学生的功能<br>​         ①键盘录入学生信息<br>​         ②根据录入的信息创建学生对象<br>​         ③将学生对象添加到集合中<br>​         ④提示添加成功信息<br>3.3 在添加学生的选项里调用添加学生的方法</Student></p></li><li><p>学生管理系统的查看学生功能实现步骤</p><p>4.1 定义一个方法，接收ArrayList<Student>集合<br>4.2 方法内遍历集合，将学生信息进行输出<br>4.3 在查看所有学生选项里调用查看学生方法</Student></p></li><li><p>学生管理系统的删除学生功能实现步骤</p><p>5.1 定义一个方法，接收ArrayList<Student>集合<br>5.2 方法中接收要删除学生的学号<br>5.3 遍历集合，获取每个学生对象<br>5.4 使用学生对象的学号和录入的要删除的学号进行比较,如果相同，则将当前学生对象从集合中删除<br>5.5 在删除学生选项里调用删除学生的方法</Student></p></li><li><p>学生管理系统的修改学生功能实现步骤</p><p>6.1 定义一个方法，接收ArrayList<Student>集合<br>6.2 方法中接收要修改学生的学号<br>6.3 通过键盘录入学生对象所需的信息，并创建对象<br>6.4 遍历集合，获取每一个学生对象。并和录入的修改学生学号进行比较.如果相同，则使用新学生对象替换当前学生对象<br>6.5 在修改学生选项里调用修改学生的方法</Student></p></li><li><p>退出系统</p><p>使用System.exit(0);退出JVM</p></li></ol></li></ul><h3 id="2-2学生类的定义【应用】"><a href="#2-2学生类的定义【应用】" class="headerlink" title="2.2学生类的定义【应用】"></a>2.2学生类的定义【应用】</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//学号</span>    <span class="token keyword">private</span> String sid<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//年龄</span>    <span class="token keyword">private</span> String age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//居住地</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String sid<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> String age<span class="token punctuation">,</span> String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSid</span><span class="token punctuation">(</span>String sid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>String age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3测试类的定义【应用】"><a href="#2-3测试类的定义【应用】" class="headerlink" title="2.3测试类的定义【应用】"></a>2.3测试类的定义【应用】</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentManager</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        1:用输出语句完成主界面的编写        2:用Scanner实现键盘录入数据        3:用switch语句完成操作的选择        4:用循环完成再次回到主界面    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建集合对象，用于保存学生数据信息</span>        ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用循环完成再次回到主界面</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//用输出语句完成主界面的编写</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------欢迎来到学生管理系统--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 添加学生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2 删除学生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3 修改学生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4 查看所有学生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5 退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入你的选择："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//用Scanner实现键盘录入数据</span>            Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            String line <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//用switch语句完成操作的选择</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"1"</span><span class="token operator">:</span>                    <span class="token function">addStudent</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"2"</span><span class="token operator">:</span>                    <span class="token function">deleteStudent</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"3"</span><span class="token operator">:</span>                    <span class="token function">updateStudent</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"4"</span><span class="token operator">:</span>                    <span class="token function">findAllStudent</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"5"</span><span class="token operator">:</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"谢谢使用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//JVM退出</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义一个方法，用于添加学生信息</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addStudent</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//键盘录入学生对象所需要的数据,显示提示信息，提示要输入何种信息</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        String sid<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生学号："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sid <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token function">isUsed</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> sid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的学号已经被占用，请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生姓名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生年龄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生居住地："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String address <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建学生对象，把键盘录入的数据赋值给学生对象的成员变量</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setSid</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将学生对象添加到集合中</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给出添加成功提示</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加学生成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义一个方法，判断学号是否被使用</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isUsed</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> array<span class="token punctuation">,</span> String sid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果与集合中的某一个学生学号相同，返回true;如果都不相同，返回false</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Student s <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getSid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义一个方法，用于查看学生信息</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">findAllStudent</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断集合中是否有数据，如果没有显示提示信息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无信息，请先添加信息再查询"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//为了让程序不再往下执行，我们在这里写上return;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//显示表头信息</span>        <span class="token comment" spellcheck="true">//\t其实是一个tab键的位置</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学号\t\t\t姓名\t\t年龄\t\t居住地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将集合中数据取出按照对应格式显示学生信息，年龄显示补充“岁”</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Student s <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getSid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"岁\t\t"</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义一个方法，用于删除学生信息</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deleteStudent</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//键盘录入要删除的学生学号,显示提示信息</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入你要删除的学生的学号："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sid <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在删除/修改学生操作前，对学号是否存在进行判断</span>        <span class="token comment" spellcheck="true">//如果不存在，显示提示信息</span>        <span class="token comment" spellcheck="true">//如果存在，执行删除/修改操作</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Student s <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getSid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                index <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该信息不存在，请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            array<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//给出删除成功提示</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除学生成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义一个方法，用于修改学生信息</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">updateStudent</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//键盘录入要修改的学生学号，显示提示信息</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入你要修改的学生的学号："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sid <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//键盘录入要修改的学生信息</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生新姓名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生新年龄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生新居住地："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String address <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建学生对象</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setSid</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历集合修改对应的学生信息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Student student <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getSid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                array<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//给出修改成功提示</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改学生成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day08-常用API</title>
      <link href="/2020/02/07/day08-chang-yong-api/"/>
      <url>/2020/02/07/day08-chang-yong-api/</url>
      
        <content type="html"><![CDATA[<h1 id="day08-常用API"><a href="#day08-常用API" class="headerlink" title="day08-常用API"></a>day08-常用API</h1><h2 id="1-API"><a href="#1-API" class="headerlink" title="1.API"></a>1.API</h2><h3 id="1-1API概述【理解】"><a href="#1-1API概述【理解】" class="headerlink" title="1.1API概述【理解】"></a>1.1API概述【理解】</h3><ul><li><p>什么是API</p><p>​    API (Application Programming Interface) ：应用程序编程接口</p></li><li><p>java中的API</p></li></ul><a id="more"></a><p>  ​    指的就是 JDK 中提供的各种功能的 Java类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可，我们可以通过帮助文档来学习这些API如何使用。</p><h3 id="1-2如何使用API帮助文档【应用】"><a href="#1-2如何使用API帮助文档【应用】" class="headerlink" title="1.2如何使用API帮助文档【应用】"></a>1.2如何使用API帮助文档【应用】</h3><ul><li>打开帮助文档</li></ul><p><img src="/2020/02/07/day08-chang-yong-api/01.png" alt="01"></p><ul><li>找到索引选项卡中的输入框</li></ul><p><img src="/2020/02/07/day08-chang-yong-api/02.png" alt="02"></p><ul><li>在输入框中输入Random</li></ul><p><img src="/2020/02/07/day08-chang-yong-api/03.png" alt="03"></p><ul><li>看类在哪个包下</li></ul><p><img src="/2020/02/07/day08-chang-yong-api/04.png" alt="04"></p><ul><li>看类的描述</li></ul><p><img src="/2020/02/07/day08-chang-yong-api/05.png" alt="05"></p><ul><li>看构造方法</li></ul><p><img src="/2020/02/07/day08-chang-yong-api/06.png" alt="06"></p><ul><li>看成员方法</li></ul><p><img src="/2020/02/07/day08-chang-yong-api/07.png" alt="07"></p><h2 id="2-String类"><a href="#2-String类" class="headerlink" title="2.String类"></a>2.String类</h2><h3 id="2-1String类概述【理解】"><a href="#2-1String类概述【理解】" class="headerlink" title="2.1String类概述【理解】"></a>2.1String类概述【理解】</h3><p>​    String 类代表字符串，Java 程序中的所有字符串文字（例如“abc”）都被实现为此类的实例。也就是说，Java 程序中所有的双引号字符串，都是 String 类的对象。String 类在 java.lang 包下，所以使用的时候不需要导包！</p><h3 id="2-2String类的特点【理解】"><a href="#2-2String类的特点【理解】" class="headerlink" title="2.2String类的特点【理解】"></a>2.2String类的特点【理解】</h3><ul><li>字符串不可变，它们的值在创建后不能被更改</li><li>虽然 String 的值是不可变的，但是它们可以被共享</li><li>字符串效果上相当于字符数组( char[] )，但是底层原理是字节数组( byte[] )</li></ul><h3 id="2-3String类的构造方法【记忆】"><a href="#2-3String类的构造方法【记忆】" class="headerlink" title="2.3String类的构造方法【记忆】"></a>2.3String类的构造方法【记忆】</h3><ul><li><p>常用的构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public   String()</td><td>创建一个空白字符串对象，不含有任何内容</td></tr><tr><td>public   String(char[] chs)</td><td>根据字符数组的内容，来创建字符串对象</td></tr><tr><td>public   String(byte[] bys)</td><td>根据字节数组的内容，来创建字符串对象</td></tr><tr><td>String s =   “abc”;</td><td>直接赋值的方式创建字符串对象，内容就是abc</td></tr></tbody></table></li><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//public String()：创建一个空白字符串对象，不含有任何内容</span>        String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1:"</span> <span class="token operator">+</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public String(char[] chs)：根据字符数组的内容，来创建字符串对象</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s2:"</span> <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public String(byte[] bys)：根据字节数组的内容，来创建字符串对象</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s3:"</span> <span class="token operator">+</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//String s = “abc”;    直接赋值的方式创建字符串对象，内容就是abc</span>        String s4 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s4:"</span> <span class="token operator">+</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="2-4创建字符串对象两种方式的区别【理解】"><a href="#2-4创建字符串对象两种方式的区别【理解】" class="headerlink" title="2.4创建字符串对象两种方式的区别【理解】"></a>2.4创建字符串对象两种方式的区别【理解】</h3><ul><li><p>通过构造方法创建</p><p>​    通过 new 创建的字符串对象，每一次 new 都会申请一个内存空间，虽然内容相同，但是地址值不同</p></li><li><p>直接赋值方式创建</p><p>​    以“”方式给出的字符串，只要字符序列相同(顺序和大小写)，无论在程序代码中出现几次，JVM 都只会建立一个 String 对象，并在字符串池中维护</p></li></ul><h3 id="2-5字符串的比较【理解】"><a href="#2-5字符串的比较【理解】" class="headerlink" title="2.5字符串的比较【理解】"></a>2.5字符串的比较【理解】</h3><h4 id="2-5-1-号的作用"><a href="#2-5-1-号的作用" class="headerlink" title="2.5.1==号的作用"></a>2.5.1==号的作用</h4><ul><li>比较基本数据类型：比较的是具体的值</li><li>比较引用数据类型：比较的是对象地址值</li></ul><h4 id="2-5-2equals方法的作用"><a href="#2-5-2equals方法的作用" class="headerlink" title="2.5.2equals方法的作用"></a>2.5.2equals方法的作用</h4><ul><li><p>方法介绍</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span>     比较两个字符串内容是否相同、区分大小写</code></pre></li><li><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构造方法的方式得到对象</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//直接赋值的方式得到对象</span>        String s3 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        String s4 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//比较字符串对象地址是否相同</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//比较字符串内容是否相同</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="2-6用户登录案例【应用】"><a href="#2-6用户登录案例【应用】" class="headerlink" title="2.6用户登录案例【应用】"></a>2.6用户登录案例【应用】</h3><h4 id="2-6-1案例需求"><a href="#2-6-1案例需求" class="headerlink" title="2.6.1案例需求"></a>2.6.1案例需求</h4><p>​    已知用户名和密码，请用程序实现模拟用户登录。总共给三次机会，登录之后，给出相应的提示</p><h4 id="2-6-2代码实现"><a href="#2-6-2代码实现" class="headerlink" title="2.6.2代码实现"></a>2.6.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:已知用户名和密码，定义两个字符串表示即可        2:键盘录入要登录的用户名和密码，用 Scanner 实现        3:拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。字符串的内容比较，用equals() 方法实现        4:用循环实现多次机会，这里的次数明确，采用for循环实现，并在登录成功的时候，使用break结束循环 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//已知用户名和密码，定义两个字符串表示即可</span>        String username <span class="token operator">=</span> <span class="token string">"itheima"</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> <span class="token string">"czbk"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用循环实现多次机会，这里的次数明确，采用for循环实现，并在登录成功的时候，使用break结束循环</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//键盘录入要登录的用户名和密码，用 Scanner 实现</span>            Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入用户名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String pwd <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。字符串的内容比较，用equals() 方法实现</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pwd<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">-</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的账户被锁定，请与管理员联系"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//2,1,0</span>                    <span class="token comment" spellcheck="true">//i,0,1,2</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录失败，你还有"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"次机会"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-7遍历字符串案例【应用】"><a href="#2-7遍历字符串案例【应用】" class="headerlink" title="2.7遍历字符串案例【应用】"></a>2.7遍历字符串案例【应用】</h3><h4 id="2-7-1案例需求"><a href="#2-7-1案例需求" class="headerlink" title="2.7.1案例需求"></a>2.7.1案例需求</h4><p>​    键盘录入一个字符串，使用程序实现在控制台遍历该字符串</p><h4 id="2-7-2代码实现"><a href="#2-7-2代码实现" class="headerlink" title="2.7.2代码实现"></a>2.7.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:键盘录入一个字符串，用 Scanner 实现        2:遍历字符串，首先要能够获取到字符串中的每一个字符            public char charAt(int index)：返回指定索引处的char值，字符串的索引也是从0开始的        3:遍历字符串，其次要能够获取到字符串的长度            public int length()：返回此字符串的长度            数组的长度：数组名.length            字符串的长度：字符串对象.length()        4:遍历字符串的通用格式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//键盘录入一个字符串，用 Scanner 实现</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个字符串："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String line <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-8统计字符次数案例【应用】"><a href="#2-8统计字符次数案例【应用】" class="headerlink" title="2.8统计字符次数案例【应用】"></a>2.8统计字符次数案例【应用】</h3><h4 id="2-8-1案例需求"><a href="#2-8-1案例需求" class="headerlink" title="2.8.1案例需求"></a>2.8.1案例需求</h4><p>​    键盘录入一个字符串，统计该字符串中大写字母字符，小写字母字符，数字字符出现的次数(不考虑其他字符)</p><h4 id="2-8-2代码实现"><a href="#2-8-2代码实现" class="headerlink" title="2.8.2代码实现"></a>2.8.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*  思路：        1:键盘录入一个字符串，用 Scanner 实现        2:要统计三种类型的字符个数，需定义三个统计变量，初始值都为0        3:遍历字符串，得到每一个字符        4:判断该字符属于哪种类型，然后对应类型的统计变量+1            假如ch是一个字符，我要判断它属于大写字母，小写字母，还是数字，直接判断该字符是否在对应的范围即可            大写字母：ch>='A' &amp;&amp; ch&lt;='Z'            小写字母： ch>='a' &amp;&amp; ch&lt;='z'            数字： ch>='0' &amp;&amp; ch&lt;='9'        5:输出三种类型的字符个数 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//键盘录入一个字符串，用 Scanner 实现</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个字符串："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String line <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//要统计三种类型的字符个数，需定义三个统计变量，初始值都为0</span>        <span class="token keyword">int</span> bigCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> smallCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numberCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历字符串，得到每一个字符</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断该字符属于哪种类型，然后对应类型的统计变量+1</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> ch<span class="token operator">&lt;=</span><span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bigCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> ch<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                smallCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                numberCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//输出三种类型的字符个数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大写字母："</span> <span class="token operator">+</span> bigCount <span class="token operator">+</span> <span class="token string">"个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小写字母："</span> <span class="token operator">+</span> smallCount <span class="token operator">+</span> <span class="token string">"个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数字："</span> <span class="token operator">+</span> numberCount <span class="token operator">+</span> <span class="token string">"个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-9字符串拼接案例【应用】"><a href="#2-9字符串拼接案例【应用】" class="headerlink" title="2.9字符串拼接案例【应用】"></a>2.9字符串拼接案例【应用】</h3><h4 id="2-9-1案例需求"><a href="#2-9-1案例需求" class="headerlink" title="2.9.1案例需求"></a>2.9.1案例需求</h4><p>​    定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，</p><p>​    并在控制台输出结果。例如，数组为 int[] arr = {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3]</p><h4 id="2-9-2代码实现"><a href="#2-9-2代码实现" class="headerlink" title="2.9.2代码实现"></a>2.9.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:定义一个 int 类型的数组，用静态初始化完成数组元素的初始化        2:定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回。          返回值类型 String，参数列表 int[] arr        3:在方法中遍历数组，按照要求进行拼接        4:调用方法，用一个变量接收结果        5:输出结果 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest04</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个 int 类型的数组，用静态初始化完成数组元素的初始化</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方法，用一个变量接收结果</span>        String s <span class="token operator">=</span> <span class="token function">arrayToString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回</span>    <span class="token comment" spellcheck="true">/*        两个明确：            返回值类型：String            参数：int[] arr     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">arrayToString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在方法中遍历数组，按照要求进行拼接</span>        String s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        s <span class="token operator">+=</span> <span class="token string">"["</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                s <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                s <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                s <span class="token operator">+=</span> <span class="token string">", "</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        s <span class="token operator">+=</span> <span class="token string">"]"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-10字符串反转案例【应用】"><a href="#2-10字符串反转案例【应用】" class="headerlink" title="2.10字符串反转案例【应用】"></a>2.10字符串反转案例【应用】</h3><h4 id="2-10-1案例需求"><a href="#2-10-1案例需求" class="headerlink" title="2.10.1案例需求"></a>2.10.1案例需求</h4><p>​    定义一个方法，实现字符串反转。键盘录入一个字符串，调用该方法后，在控制台输出结果</p><p>​    例如，键盘录入 abc，输出结果 cba</p><h4 id="2-10-2代码实现"><a href="#2-10-2代码实现" class="headerlink" title="2.10.2代码实现"></a>2.10.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:键盘录入一个字符串，用 Scanner 实现        2:定义一个方法，实现字符串反转。返回值类型 String，参数 String s        3:在方法中把字符串倒着遍历，然后把每一个得到的字符拼接成一个字符串并返回        4:调用方法，用一个变量接收结果        5:输出结果 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest05</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//键盘录入一个字符串，用 Scanner 实现</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个字符串："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String line <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方法，用一个变量接收结果</span>        String s <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义一个方法，实现字符串反转</span>    <span class="token comment" spellcheck="true">/*        两个明确：            返回值类型：String            参数：String s     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">reverse</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在方法中把字符串倒着遍历，然后把每一个得到的字符拼接成一个字符串并返回</span>        String ss <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ss <span class="token operator">+=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ss<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-11帮助文档查看String常用方法【记忆】"><a href="#2-11帮助文档查看String常用方法【记忆】" class="headerlink" title="2.11帮助文档查看String常用方法【记忆】"></a>2.11帮助文档查看String常用方法【记忆】</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean   equals(Object anObject)</td><td>比较字符串的内容，严格区分大小写(用户名和密码)</td></tr><tr><td>public char charAt(int   index)</td><td>返回指定索引处的 char 值</td></tr><tr><td>public int   length()</td><td>返回此字符串的长度</td></tr></tbody></table><h2 id="3-StringBuilder类"><a href="#3-StringBuilder类" class="headerlink" title="3.StringBuilder类"></a>3.StringBuilder类</h2><h3 id="3-1StringBuilder类概述【理解】"><a href="#3-1StringBuilder类概述【理解】" class="headerlink" title="3.1StringBuilder类概述【理解】"></a>3.1StringBuilder类概述【理解】</h3><p>​    StringBuilder 是一个可变的字符串类，我们可以把它看成是一个容器，这里的可变指的是 StringBuilder 对象中的内容是可变的</p><h3 id="3-2StringBuilder类和String类的区别【理解】"><a href="#3-2StringBuilder类和String类的区别【理解】" class="headerlink" title="3.2StringBuilder类和String类的区别【理解】"></a>3.2StringBuilder类和String类的区别【理解】</h3><ul><li>String类：内容是不可变的</li><li>StringBuilder类：内容是可变的</li></ul><h3 id="3-3StringBuilder类的构造方法【记忆】"><a href="#3-3StringBuilder类的构造方法【记忆】" class="headerlink" title="3.3StringBuilder类的构造方法【记忆】"></a>3.3StringBuilder类的构造方法【记忆】</h3><ul><li><p>常用的构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder()</td><td>创建一个空白可变字符串对象，不含有任何内容</td></tr><tr><td>public StringBuilder(String   str)</td><td>根据字符串的内容，来创建可变字符串对象</td></tr></tbody></table></li><li><p>示例代码</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//public StringBuilder()：创建一个空白可变字符串对象，不含有任何内容</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb:"</span> <span class="token operator">+</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb.length():"</span> <span class="token operator">+</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public StringBuilder(String str)：根据字符串的内容，来创建可变字符串对象</span>        StringBuilder sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb2:"</span> <span class="token operator">+</span> sb2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb2.length():"</span> <span class="token operator">+</span> sb2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-4StringBuilder类添加和反转方法【记忆】"><a href="#3-4StringBuilder类添加和反转方法【记忆】" class="headerlink" title="3.4StringBuilder类添加和反转方法【记忆】"></a>3.4StringBuilder类添加和反转方法【记忆】</h3><ul><li><p>添加和反转方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder   append(任意类型)</td><td>添加数据，并返回对象本身</td></tr><tr><td>public StringBuilder   reverse()</td><td>返回相反的字符序列</td></tr></tbody></table></li><li><p>示例代码</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public StringBuilder append(任意类型)：添加数据，并返回对象本身</span><span class="token comment" spellcheck="true">//        StringBuilder sb2 = sb.append("hello");</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        System.out.println("sb:" + sb);</span><span class="token comment" spellcheck="true">//        System.out.println("sb2:" + sb2);</span><span class="token comment" spellcheck="true">//        System.out.println(sb == sb2);</span><span class="token comment" spellcheck="true">//        sb.append("hello");</span><span class="token comment" spellcheck="true">//        sb.append("world");</span><span class="token comment" spellcheck="true">//        sb.append("java");</span><span class="token comment" spellcheck="true">//        sb.append(100);</span>        <span class="token comment" spellcheck="true">//链式编程</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb:"</span> <span class="token operator">+</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public StringBuilder reverse()：返回相反的字符序列</span>        sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb:"</span> <span class="token operator">+</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-5StringBuilder和String相互转换【应用】"><a href="#3-5StringBuilder和String相互转换【应用】" class="headerlink" title="3.5StringBuilder和String相互转换【应用】"></a>3.5StringBuilder和String相互转换【应用】</h3><ul><li><p>StringBuilder转换为String</p><p>​        public String toString()：通过 toString() 就可以实现把 StringBuilder 转换为 String</p></li><li><p>String转换为StringBuilder</p><p>​        public StringBuilder(String s)：通过构造方法就可以实现把 String 转换为 StringBuilder</p></li><li><p>示例代码</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderDemo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        //StringBuilder 转换为 String        StringBuilder sb = new StringBuilder();        sb.append("hello");        //String s = sb; //这个是错误的做法        //public String toString()：通过 toString() 就可以实现把 StringBuilder 转换为 String        String s = sb.toString();        System.out.println(s);        */</span>        <span class="token comment" spellcheck="true">//String 转换为 StringBuilder</span>        String s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//StringBuilder sb = s; //这个是错误的做法</span>        <span class="token comment" spellcheck="true">//public StringBuilder(String s)：通过构造方法就可以实现把 String 转换为 StringBuilder</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-6字符串拼接升级版案例【应用】"><a href="#3-6字符串拼接升级版案例【应用】" class="headerlink" title="3.6字符串拼接升级版案例【应用】"></a>3.6字符串拼接升级版案例【应用】</h3><h4 id="3-6-1案例需求"><a href="#3-6-1案例需求" class="headerlink" title="3.6.1案例需求"></a>3.6.1案例需求</h4><p>​    定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，</p><p>​    并在控制台输出结果。例如，数组为int[] arr = {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3]</p><h4 id="3-6-2代码实现"><a href="#3-6-2代码实现" class="headerlink" title="3.6.2代码实现"></a>3.6.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:定义一个 int 类型的数组，用静态初始化完成数组元素的初始化        2:定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回。          返回值类型 String，参数列表 int[] arr        3:在方法中用 StringBuilder 按照要求进行拼接，并把结果转成 String 返回        4:调用方法，用一个变量接收结果        5:输出结果 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个 int 类型的数组，用静态初始化完成数组元素的初始化</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方法，用一个变量接收结果</span>        String s <span class="token operator">=</span> <span class="token function">arrayToString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回</span>    <span class="token comment" spellcheck="true">/*        两个明确：            返回值类型：String            参数：int[] arr     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">arrayToString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在方法中用 StringBuilder 按照要求进行拼接，并把结果转成 String 返回</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-7字符串反转升级版案例【应用】"><a href="#3-7字符串反转升级版案例【应用】" class="headerlink" title="3.7字符串反转升级版案例【应用】"></a>3.7字符串反转升级版案例【应用】</h3><h4 id="3-7-1案例需求"><a href="#3-7-1案例需求" class="headerlink" title="3.7.1案例需求"></a>3.7.1案例需求</h4><p>​    定义一个方法，实现字符串反转。键盘录入一个字符串，调用该方法后，在控制台输出结果</p><p>​    例如，键盘录入abc，输出结果 cba</p><h4 id="3-7-2代码实现"><a href="#3-7-2代码实现" class="headerlink" title="3.7.2代码实现"></a>3.7.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:键盘录入一个字符串，用 Scanner 实现        2:定义一个方法，实现字符串反转。返回值类型 String，参数 String s        3:在方法中用StringBuilder实现字符串的反转，并把结果转成String返回        4:调用方法，用一个变量接收结果        5:输出结果 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//键盘录入一个字符串，用 Scanner 实现</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个字符串："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String line <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方法，用一个变量接收结果</span>        String s <span class="token operator">=</span> <span class="token function">myReverse</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义一个方法，实现字符串反转。返回值类型 String，参数 String s</span>    <span class="token comment" spellcheck="true">/*        两个明确：            返回值类型：String            参数：String s     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">myReverse</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在方法中用StringBuilder实现字符串的反转，并把结果转成String返回</span>        <span class="token comment" spellcheck="true">//String --- StringBuilder --- reverse() --- String</span><span class="token comment" spellcheck="true">//        StringBuilder sb = new StringBuilder(s);</span><span class="token comment" spellcheck="true">//        sb.reverse();</span><span class="token comment" spellcheck="true">//        String ss = sb.toString();</span><span class="token comment" spellcheck="true">//        return ss;</span>       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-8帮助文档查看StringBuilder常用方法【记忆】"><a href="#3-8帮助文档查看StringBuilder常用方法【记忆】" class="headerlink" title="3.8帮助文档查看StringBuilder常用方法【记忆】"></a>3.8帮助文档查看StringBuilder常用方法【记忆】</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public   StringBuilder append (任意类型)</td><td>添加数据，并返回对象本身</td></tr><tr><td>public   StringBuilder reverse()</td><td>返回相反的字符序列</td></tr><tr><td>public   int   length()</td><td>返回长度，实际存储值</td></tr><tr><td>public   String toString()</td><td>通过toString()就可以实现把StringBuilder转换为String</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day07-面向对象</title>
      <link href="/2020/02/06/day07-mian-xiang-dui-xiang/"/>
      <url>/2020/02/06/day07-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="day07-面向对象"><a href="#day07-面向对象" class="headerlink" title="day07-面向对象"></a>day07-面向对象</h1><h2 id="1-类和对象"><a href="#1-类和对象" class="headerlink" title="1. 类和对象"></a>1. 类和对象</h2><h3 id="1-1-类和对象的理解【理解】"><a href="#1-1-类和对象的理解【理解】" class="headerlink" title="1.1 类和对象的理解【理解】"></a>1.1 类和对象的理解【理解】</h3><p>客观存在的事物皆为对象 ，所以我们也常常说万物皆对象。</p><ul><li>类<ul><li>类的理解<ul><li>类是对现实生活中一类具有共同属性和行为的事物的抽象</li><li>类是对象的数据类型，类是具有相同属性和行为的一组对象的集合<a id="more"></a></li><li>简单理解：类就是对现实事物的一种描述</li></ul></li><li>类的组成<ul><li>属性：指事物的特征，例如：手机事物（品牌，价格，尺寸）</li><li>行为：指事物能执行的操作，例如：手机事物（打电话，发短信）</li></ul></li></ul></li><li>类和对象的关系<ul><li>类：类是对现实生活中一类具有共同属性和行为的事物的抽象</li><li>对象：是能够看得到摸的着的真实存在的实体</li><li>简单理解：<strong>类是对事物的一种描述，对象则为具体存在的事物</strong></li></ul></li></ul><h3 id="1-2-类的定义【应用】"><a href="#1-2-类的定义【应用】" class="headerlink" title="1.2 类的定义【应用】"></a>1.2 类的定义【应用】</h3><p>类的组成是由属性和行为两部分组成</p><ul><li>属性：在类中通过成员变量来体现（类中方法外的变量）</li><li>行为：在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可）</li></ul><p>类的定义步骤：</p><p>①定义类</p><p>②编写类的成员变量</p><p>③编写类的成员方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 类名 <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 成员变量</span>    变量<span class="token number">1</span>的数据类型 变量<span class="token number">1</span>；    变量<span class="token number">2</span>的数据类型 变量<span class="token number">2</span><span class="token punctuation">;</span>    …    <span class="token comment" spellcheck="true">// 成员方法</span>    方法<span class="token number">1</span><span class="token punctuation">;</span>    方法<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    手机类：        类名：        手机(Phone)        成员变量：        品牌(brand)        价格(price)        成员方法：        打电话(call)        发短信(sendMessage) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//成员变量</span>    String brand<span class="token punctuation">;</span>    <span class="token keyword">int</span> price<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-对象的使用【应用】"><a href="#1-3-对象的使用【应用】" class="headerlink" title="1.3 对象的使用【应用】"></a>1.3 对象的使用【应用】</h3><ul><li>创建对象的格式：<ul><li>类名 对象名 = new 类名();</li></ul></li><li>调用成员的格式：<ul><li>对象名.成员变量</li><li>对象名.成员方法();</li></ul></li><li>示例代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    创建对象        格式：类名 对象名 = new 类名();        范例：Phone p = new Phone();    使用对象        1：使用成员变量            格式：对象名.变量名            范例：p.brand        2：使用成员方法            格式：对象名.方法名()            范例：p.call() */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        Phone p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用成员变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>brand <span class="token operator">=</span> <span class="token string">"小米"</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">2999</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用成员方法</span>        p<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-4-学生对象-练习【应用】"><a href="#1-4-学生对象-练习【应用】" class="headerlink" title="1.4 学生对象-练习【应用】"></a>1.4 学生对象-练习【应用】</h3><ul><li>需求：首先定义一个学生类，然后定义一个学生测试类，在学生测试类中通过对象完成成员变量和成员方法的使用</li><li>分析：<ul><li>成员变量：姓名，年龄…</li><li>成员方法：学习，做作业…</li></ul></li><li>示例代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//成员变量</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好好学习，天天向上"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"键盘敲烂，月薪过万"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    学生测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> s<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"林青霞"</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> s<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">doHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-对象内存图"><a href="#2-对象内存图" class="headerlink" title="2. 对象内存图"></a>2. 对象内存图</h2><h3 id="2-1-单个对象内存图【理解】"><a href="#2-1-单个对象内存图【理解】" class="headerlink" title="2.1 单个对象内存图【理解】"></a>2.1 单个对象内存图【理解】</h3><ul><li>成员变量使用过程</li></ul><p><img src="/2020/02/06/day07-mian-xiang-dui-xiang/1.png" alt="1"></p><ul><li>成员方法调用过程</li></ul><p><img src="/2020/02/06/day07-mian-xiang-dui-xiang/2.png" alt="2"></p><h3 id="2-2-多个对象内存图【理解】"><a href="#2-2-多个对象内存图【理解】" class="headerlink" title="2.2 多个对象内存图【理解】"></a>2.2 多个对象内存图【理解】</h3><ul><li>成员变量使用过程</li></ul><p><img src="/2020/02/06/day07-mian-xiang-dui-xiang/3.png" alt="3"></p><ul><li>成员方法调用过程</li></ul><p><img src="/2020/02/06/day07-mian-xiang-dui-xiang/5.png" alt="4"></p><ul><li><p>总结：</p><p>多个对象在堆内存中，都有不同的内存划分，成员变量存储在各自的内存区域中，成员方法多个对象共用的一份</p></li></ul><h3 id="2-3-多个对象指向相同内存图【理解】"><a href="#2-3-多个对象指向相同内存图【理解】" class="headerlink" title="2.3 多个对象指向相同内存图【理解】"></a>2.3 多个对象指向相同内存图【理解】</h3><p><img src="/2020/02/06/day07-mian-xiang-dui-xiang/4.bmp" alt="5"></p><ul><li><p>总结</p><p>当多个对象的引用指向同一个内存空间（变量所记录的地址值是一样的）</p><p>只要有任何一个对象修改了内存中的数据，随后，无论使用哪一个对象进行数据获取，都是修改后的数据。</p></li></ul><h2 id="3-成员变量和局部变量"><a href="#3-成员变量和局部变量" class="headerlink" title="3. 成员变量和局部变量"></a>3. 成员变量和局部变量</h2><h3 id="3-1-成员变量和局部变量的区别【理解】"><a href="#3-1-成员变量和局部变量的区别【理解】" class="headerlink" title="3.1 成员变量和局部变量的区别【理解】"></a>3.1 成员变量和局部变量的区别【理解】</h3><ul><li>类中位置不同：成员变量（类中方法外）局部变量（方法内部或方法声明上）</li><li>内存中位置不同：成员变量（堆内存）局部变量（栈内存）</li><li>生命周期不同：成员变量（随着对象的存在而存在，随着对象的消失而消失）局部变量（随着方法的调用而存在，醉着方法的调用完毕而消失）</li><li>初始化值不同：成员变量（有默认初始化值）局部变量（没有默认初始化值，必须先定义，赋值才能使用）</li></ul><h2 id="4-封装"><a href="#4-封装" class="headerlink" title="4. 封装"></a>4. 封装</h2><h3 id="4-1-private关键字【理解】"><a href="#4-1-private关键字【理解】" class="headerlink" title="4.1 private关键字【理解】"></a>4.1 private关键字【理解】</h3><p>private是一个修饰符，可以用来修饰成员（成员变量，成员方法）</p><ul><li><p>被private修饰的成员，只能在本类进行访问，针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作</p><ul><li>提供“get变量名()”方法，用于获取成员变量的值，方法用public修饰</li><li>提供“set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰</li></ul></li><li><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    学生类 */</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//成员变量</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//提供get/set方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> a<span class="token operator">></span><span class="token number">120</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你给的年龄有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            age <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    学生测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给成员变量赋值</span>        s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"林青霞"</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用show方法</span>        s<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="4-2-private的使用【应用】"><a href="#4-2-private的使用【应用】" class="headerlink" title="4.2 private的使用【应用】"></a>4.2 private的使用【应用】</h3><ul><li><p>需求：定义标准的学生类，要求name和age使用private修饰，并提供set和get方法以及便于显示数据的show方法，测试类中创建对象并使用，最终控制台输出  林青霞，30 </p></li><li><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    学生类 */</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//成员变量</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//get/set方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    学生测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用set方法给成员变量赋值</span>        s<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"林青霞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用get方法获取成员变量的值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="4-3-this关键字【应用】"><a href="#4-3-this关键字【应用】" class="headerlink" title="4.3 this关键字【应用】"></a>4.3 this关键字【应用】</h3><ul><li>this修饰的变量用于指代成员变量，其主要作用是（区分局部变量和成员变量的重名问题）<ul><li>方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量</li><li>方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-4-this内存原理【理解】"><a href="#4-4-this内存原理【理解】" class="headerlink" title="4.4 this内存原理【理解】"></a>4.4 this内存原理【理解】</h3><ul><li><p>this代表当前调用方法的引用，哪个对象调用的方法，this就代表哪一个对象</p></li><li><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"林青霞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张曼玉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>图解：</p><p><img src="/2020/02/06/day07-mian-xiang-dui-xiang/5.png" alt="5"></p><p><img src="/2020/02/06/day07-mian-xiang-dui-xiang/6.png" alt="6"></p></li></ul><h3 id="4-5-封装思想【理解】"><a href="#4-5-封装思想【理解】" class="headerlink" title="4.5 封装思想【理解】"></a>4.5 封装思想【理解】</h3><ol><li>封装概述<br> 是面向对象三大特征之一（封装，继承，多态）<br> 是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界是无法直接操作的</li><li>封装原则<br> 将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问<br> 成员变量private，提供对应的getXxx()/setXxx()方法</li><li>封装好处<br> 通过方法来控制成员变量的操作，提高了代码的安全性<br> 把代码用方法进行封装，提高了代码的复用性</li></ol><h2 id="5-构造方法"><a href="#5-构造方法" class="headerlink" title="5. 构造方法"></a>5. 构造方法</h2><h3 id="5-1-构造方法概述【理解】"><a href="#5-1-构造方法概述【理解】" class="headerlink" title="5.1 构造方法概述【理解】"></a>5.1 构造方法概述【理解】</h3><p>构造方法是一种特殊的方法</p><ul><li><p>作用：创建对象   Student stu = <strong>new Student();</strong></p></li><li><p>格式：</p><p>public class 类名{</p><p>​        修饰符 类名( 参数 ) {</p><p>​        }</p><p>}</p></li><li><p>功能：主要是完成对象数据的初始化</p></li><li><p>示例代码：</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造方法</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-2-构造方法的注意事项【理解】"><a href="#5-2-构造方法的注意事项【理解】" class="headerlink" title="5.2 构造方法的注意事项【理解】"></a>5.2 构造方法的注意事项【理解】</h3><ul><li>构造方法的创建</li></ul><p>如果没有定义构造方法，系统将给出一个默认的无参数构造方法<br>如果定义了构造方法，系统将不再提供默认的构造方法</p><ul><li>构造方法的重载</li></ul><p>如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法</p><ul><li>推荐的使用方式</li></ul><p>无论是否使用，都手工书写无参数构造方法</p><ul><li>重要功能！</li></ul><p>可以使用带参构造，为成员变量进行初始化</p><ul><li>示例代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    学生类 */</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public Student(String name)</span>        Student s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"林青霞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public Student(int age)</span>        Student s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s3<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public Student(String name,int age)</span>        Student s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"林青霞"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s4<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-3-标准类制作【应用】"><a href="#5-3-标准类制作【应用】" class="headerlink" title="5.3 标准类制作【应用】"></a>5.3 标准类制作【应用】</h3><ul><li>需求：定义标准学生类，要求分别使用空参和有参构造方法创建对象，空参创建的对象通过setXxx赋值，有参创建的对象直接赋值，并通过show方法展示数据。 </li><li>示例代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//成员变量</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造方法</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    创建对象并为其成员变量赋值的两种方式        1:无参构造方法创建对象后使用setXxx()赋值        2:使用带参构造方法直接创建带有属性值的对象*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//无参构造方法创建对象后使用setXxx()赋值</span>        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"林青霞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用带参构造方法直接创建带有属性值的对象</span>        Student s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"林青霞"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="6-匿名对象"><a href="#6-匿名对象" class="headerlink" title="6. 匿名对象"></a>6. 匿名对象</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>匿名对象是指创建了对象，却没有把对象地址赋值给某个变量，即没有名字</p><ul><li>示例代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*   匿名对象:      1.概述:没有名字的对象      2.使用:new 类名().成员      3.注意:         如果使用匿名对象的话,需要在方法只调用一次的时候         如果使用匿名对象为属性赋值,再用匿名对象去取值,是不可以的(因为你会new很多次,会产生多个对象)      4.使用场景:         一般用于单纯的调方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//new Person().eat();</span>        <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*   匿名对象作为方法的参数以及返回值，传递以及返回的是地址值 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用方法</span>       <span class="token comment" spellcheck="true">/* Person person = new Person();        method01(person);*/</span>       <span class="token comment" spellcheck="true">//使用匿名对象形式传递</span>        <span class="token comment" spellcheck="true">//method01(new Person());</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p <span class="token operator">=</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span><span class="token punctuation">{</span>        person<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Person <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// return new Person();</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> person<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day06-Debug&amp;基础练习</title>
      <link href="/2020/02/06/day06-debug-ji-chu-lian-xi/"/>
      <url>/2020/02/06/day06-debug-ji-chu-lian-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="day06-Debug-amp-基础练习"><a href="#day06-Debug-amp-基础练习" class="headerlink" title="day06-Debug&amp;基础练习"></a>day06-Debug&amp;基础练习</h1><h2 id="1-Debug模式"><a href="#1-Debug模式" class="headerlink" title="1.Debug模式"></a>1.Debug模式</h2><h3 id="1-1什么是Debug模式【理解】"><a href="#1-1什么是Debug模式【理解】" class="headerlink" title="1.1什么是Debug模式【理解】"></a>1.1什么是Debug模式【理解】</h3><p>是供程序员使用的程序调试工具，它可以用于查看程序的执行流程，也可以用于追踪程序执行过程来调试程序。</p><h3 id="1-2Debug模式操作流程【应用】"><a href="#1-2Debug模式操作流程【应用】" class="headerlink" title="1.2Debug模式操作流程【应用】"></a>1.2Debug模式操作流程【应用】</h3><ul><li>如何加断点</li></ul><a id="more"></a><ul><li><p>选择要设置断点的代码行，在行号的区域后面单击鼠标左键即可</p><p><img src="/2020/02/06/day06-debug-ji-chu-lian-xi/01.png" alt="01"></p></li></ul><ul><li><p>如何运行加了断点的程序</p><ul><li>在代码区域右键Debug执行</li></ul><p><img src="/2020/02/06/day06-debug-ji-chu-lian-xi/02.png" alt="02"></p></li><li><p>看哪里</p><ul><li>看Debugger窗口</li></ul><p><img src="/2020/02/06/day06-debug-ji-chu-lian-xi/03.png" alt="03"></p><ul><li>看Console窗口</li></ul><p><img src="/2020/02/06/day06-debug-ji-chu-lian-xi/04.png" alt="04"></p></li><li><p>点哪里</p><ul><li>点Step Into (F7)这个箭头，也可以直接按F7</li></ul><p><img src="/2020/02/06/day06-debug-ji-chu-lian-xi/05.png" alt="05"></p></li><li><p>如何删除断点</p><ul><li>选择要删除的断点，单击鼠标左键即可</li></ul><p><img src="/2020/02/06/day06-debug-ji-chu-lian-xi/06.png" alt="06"></p><ul><li>如果是多个断点，可以每一个再点击一次。也可以一次性全部删除</li></ul><p><img src="/2020/02/06/day06-debug-ji-chu-lian-xi/07.png" alt="07"></p></li></ul><h2 id="2-基础练习"><a href="#2-基础练习" class="headerlink" title="2.基础练习"></a>2.基础练习</h2><h3 id="2-1减肥计划if版本【应用】"><a href="#2-1减肥计划if版本【应用】" class="headerlink" title="2.1减肥计划if版本【应用】"></a>2.1减肥计划if版本【应用】</h3><h4 id="2-1-1案例需求"><a href="#2-1-1案例需求" class="headerlink" title="2.1.1案例需求"></a>2.1.1案例需求</h4><p>​    输入星期数，显示今天的减肥活动<br>​          周一：跑步<br>​          周二：游泳<br>​          周三：慢走<br>​          周四：动感单车<br>​          周五：拳击<br>​          周六：爬山<br>​          周日：好好吃一顿</p><h4 id="2-1-2代码实现"><a href="#2-1-2代码实现" class="headerlink" title="2.1.2代码实现"></a>2.1.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:键盘录入一个星期数，用一个变量接收        2:对星期数进行判断，这里用 if 语句实现        3:在对应的语句控制中输出对应的减肥活动 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//键盘录入一个星期数，用一个变量接收</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个星期数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> week <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对星期数进行判断，这里用 if 语句实现</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>week <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> week <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的星期数有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>week <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"跑步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>week <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"游泳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>week <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"慢走"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>week <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动感单车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>week <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拳击"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>week <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"爬山"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好好吃一顿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-2减肥计划switch版本【应用】"><a href="#2-2减肥计划switch版本【应用】" class="headerlink" title="2.2减肥计划switch版本【应用】"></a>2.2减肥计划switch版本【应用】</h3><h4 id="2-2-1案例需求"><a href="#2-2-1案例需求" class="headerlink" title="2.2.1案例需求"></a>2.2.1案例需求</h4><p>​    输入星期数，显示今天的减肥活动<br>​          周一：跑步<br>​          周二：游泳<br>​          周三：慢走<br>​          周四：动感单车<br>​          周五：拳击<br>​          周六：爬山<br>​          周日：好好吃一顿</p><h4 id="2-2-2代码实现"><a href="#2-2-2代码实现" class="headerlink" title="2.2.2代码实现"></a>2.2.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:键盘录入一个星期数，用一个变量接收        2:对星期数进行判断，这里用 switch 语句实现        3:在对应的语句控制中输出对应的减肥活动    导包：        1:手动导包  import java.util.Scanner;        2:快捷键导包 Alt+Enter        3:自动导包 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//键盘录入一个星期数，用一个变量接收</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个星期数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> week <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对星期数进行判断，这里用 switch 语句实现</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>week<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"跑步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"游泳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"慢走"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动感单车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拳击"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"爬山"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好好吃一顿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的星期数有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3逢七跳过【应用】"><a href="#2-3逢七跳过【应用】" class="headerlink" title="2.3逢七跳过【应用】"></a>2.3逢七跳过【应用】</h3><h4 id="2-3-1案例需求"><a href="#2-3-1案例需求" class="headerlink" title="2.3.1案例需求"></a>2.3.1案例需求</h4><p>​    朋友聚会的时候可能会玩一个游戏：逢七过。<br>​        规则是：从任意一个数字开始报数，当你要报的数字包含7或者是7的倍数时都要说：过。<br>​        为了帮助大家更好的玩这个游戏，这里我们直接在控制台打印出1-100之间的满足逢七必过规则的数据。<br>​        这样，大家将来在玩游戏的时候，就知道哪些数据要说：过。    </p><h4 id="2-3-2代码实现"><a href="#2-3-2代码实现" class="headerlink" title="2.3.2代码实现"></a>2.3.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:数据在1-100之间，用for循环实现数据的获取        2:根据规则，用if语句实现数据的判断：要么个位是7，要么十位是7，要么能够被7整除        3:在控制台输出满足规则的数据 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//数据在1-100之间，用for循环实现数据的获取</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> x<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//根据规则，用if语句实现数据的判断：要么个位是7，要么十位是7，要么能够被7整除</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span><span class="token number">7</span> <span class="token operator">||</span> x<span class="token operator">/</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span><span class="token number">7</span> <span class="token operator">||</span> x<span class="token operator">%</span><span class="token number">7</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//在控制台输出满足规则的数据</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-4不死神兔【应用】"><a href="#2-4不死神兔【应用】" class="headerlink" title="2.4不死神兔【应用】"></a>2.4不死神兔【应用】</h3><h4 id="2-4-1案例需求"><a href="#2-4-1案例需求" class="headerlink" title="2.4.1案例需求"></a>2.4.1案例需求</h4><p>​    有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，<br>​        假如兔子都不死，问第二十个月的兔子对数为多少？    </p><h4 id="2-4-2代码实现"><a href="#2-4-2代码实现" class="headerlink" title="2.4.2代码实现"></a>2.4.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*   思路：        1:为了存储多个月的兔子对数，定义一个数组，用动态初始化完成数组元素的初始化，长度为20        2:因为第1个月，第2个月兔子的对数是已知的，都是1，所以数组的第1个元素，第2个元素值也都是1        3:用循环实现计算每个月的兔子对数        4:输出数组中最后一个元素的值，就是第20个月的兔子对数 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test04</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为了存储多个月的兔子对数，定义一个数组，用动态初始化完成数组元素的初始化，长度为20</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//因为第1个月，第2个月兔子的对数是已知的，都是1，所以数组的第1个元素，第2个元素值也都是1</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用循环实现计算每个月的兔子对数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> x<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//输出数组中最后一个元素的值，就是第20个月的兔子对数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二十个月兔子的对数是："</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-5百钱白鸡【应用】"><a href="#2-5百钱白鸡【应用】" class="headerlink" title="2.5百钱白鸡【应用】"></a>2.5百钱白鸡【应用】</h3><h4 id="2-5-1案例需求"><a href="#2-5-1案例需求" class="headerlink" title="2.5.1案例需求"></a>2.5.1案例需求</h4><p>​    我国古代数学家张丘建在《算经》一书中提出的数学问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。<br>​        百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？</p><h4 id="2-5-2代码实现"><a href="#2-5-2代码实现" class="headerlink" title="2.5.2代码实现"></a>2.5.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:第1层循环，用于表示鸡翁的范围，初始化表达式的变量定义为 x=0，判断条件是x&lt;=20        2:第2层循环，用于表示鸡母的范围，初始化表达式的变量定义为 y=0，判断条件是y&lt;=33        3:这个时候，用于表示鸡雏的变量 z = 100 – x – y        4:判断表达式 z%3==0 和表达式 5*x + 3*y + z/3 = 100 是否同时成立，如果成立，输出对应的 x，y，z 的值，就是对应的鸡翁，鸡母，鸡雏的值 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test05</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//第1层循环，用于表示鸡翁的范围，初始化表达式的变量定义为 x=0，判断条件是x&lt;=20</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> x<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//第2层循环，用于表示鸡母的范围，初始化表达式的变量定义为 y=0，判断条件是y&lt;=33</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> y<span class="token operator">&lt;=</span><span class="token number">33</span><span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//这个时候，用于表示鸡雏的变量 z = 100 – x – y</span>                <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">-</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//判断表达式 z%3==0 和表达式 5*x + 3*y + z/3 = 100 是否同时成立</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>z<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">5</span><span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span>y<span class="token operator">+</span>z<span class="token operator">/</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>y<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-6数组元素求和【应用】"><a href="#2-6数组元素求和【应用】" class="headerlink" title="2.6数组元素求和【应用】"></a>2.6数组元素求和【应用】</h3><h4 id="2-6-1案例需求"><a href="#2-6-1案例需求" class="headerlink" title="2.6.1案例需求"></a>2.6.1案例需求</h4><p>​    有这样的一个数组，元素是{68,27,95,88,171,996,51,210}。求出该数组中满足要求的元素和，<br>​        要求是：求和的元素个位和十位都不能是7，并且只能是偶数</p><h4 id="2-6-2代码实现"><a href="#2-6-2代码实现" class="headerlink" title="2.6.2代码实现"></a>2.6.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*   思路：        1:定义一个数组，用静态初始化完成数组元素的初始化        2:定义一个求和变量，初始值是0        3:遍历数组，获取到数组中的每一个元素        4:判断该元素是否满足条件，如果满足条件就累加        5:输出求和变量的值 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test06</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个数组，用静态初始化完成数组元素的初始化</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">996</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义一个求和变量，初始值是0</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历数组，获取到数组中的每一个元素</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> x<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断该元素是否满足条件，如果满足条件就累加</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">!=</span><span class="token number">7</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">!=</span><span class="token number">7</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//输出求和变量的值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum:"</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-7判断两个数组是否相同【应用】"><a href="#2-7判断两个数组是否相同【应用】" class="headerlink" title="2.7判断两个数组是否相同【应用】"></a>2.7判断两个数组是否相同【应用】</h3><h4 id="2-7-1案例需求"><a href="#2-7-1案例需求" class="headerlink" title="2.7.1案例需求"></a>2.7.1案例需求</h4><p>​    定义一个方法，用于比较两个数组的内容是否相同</p><h4 id="2-7-2代码实现"><a href="#2-7-2代码实现" class="headerlink" title="2.7.2代码实现"></a>2.7.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:定义两个数组，分别使用静态初始化完成数组元素的初始化        2:定义一个方法，用于比较两个数组的内容是否相同        3:比较两个数组的内容是否相同，按照下面的步骤实现就可以了            首先比较数组长度，如果长度不相同，数组内容肯定不相同，返回false            其次遍历，比较两个数组中的每一个元素，只要有元素不相同，返回false            最后循环遍历结束后，返回true        4:调用方法，用变量接收        5:输出结果 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test07</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义两个数组，分别使用静态初始化完成数组元素的初始化</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//int[] arr2 = {11, 22, 33, 44, 55};</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方法，用变量接收</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token function">compare</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义一个方法，用于比较两个数组的内容是否相同</span>    <span class="token comment" spellcheck="true">/*        两个明确：            返回值类型：boolean            参数：int[] arr, int[] arr2     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//首先比较数组长度，如果长度不相同，数组内容肯定不相同，返回false</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">!=</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//其次遍历，比较两个数组中的每一个元素，只要有元素不相同，返回false</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> x<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> arr2<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//最后循环遍历结束后，返回true</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-8查找元素在数组中出现的索引位置【应用】"><a href="#2-8查找元素在数组中出现的索引位置【应用】" class="headerlink" title="2.8查找元素在数组中出现的索引位置【应用】"></a>2.8查找元素在数组中出现的索引位置【应用】</h3><h4 id="2-8-1案例需求"><a href="#2-8-1案例需求" class="headerlink" title="2.8.1案例需求"></a>2.8.1案例需求</h4><p>​    已知一个数组 arr = {19, 28, 37, 46, 50}; 键盘录入一个数据，查找该数据在数组中的索引。</p><p>​    并在控制台输出找到的索引值。如果没有查找到，则输出-1</p><h4 id="2-8-2代码实现"><a href="#2-8-2代码实现" class="headerlink" title="2.8.2代码实现"></a>2.8.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:定义一个数组，用静态初始化完成数组元素的初始化        2:键盘录入要查找的数据，用一个变量接收        3:定义一个索引变量，初始值为-1        4:遍历数组，获取到数组中的每一个元素        5:拿键盘录入的数据和数组中的每一个元素进行比较，如果值相同，就把该值对应的索引赋值给索引变量,并结束循环        6:输出索引变量 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test08</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个数组，用静态初始化完成数组元素的初始化</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//键盘录入要查找的数据，用一个变量接收</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入要查找的数据："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方法</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出索引变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"index: "</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//查找指定的数据在数组中的索引</span>    <span class="token comment" spellcheck="true">/*        两个明确：            返回值类型：int            参数：int[] arr, int number     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个索引变量，初始值为-1</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历数组，获取到数组中的每一个元素</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> x<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//拿键盘录入的数据和数组中的每一个元素进行比较，如果值相同，就把该值对应的索引赋值给索引变量,并结束循环</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>                index <span class="token operator">=</span> x<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回索引</span>        <span class="token keyword">return</span> index<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-9数组元素反转【应用】"><a href="#2-9数组元素反转【应用】" class="headerlink" title="2.9数组元素反转【应用】"></a>2.9数组元素反转【应用】</h3><h4 id="2-9-1案例需求"><a href="#2-9-1案例需求" class="headerlink" title="2.9.1案例需求"></a>2.9.1案例需求</h4><p>​    已知一个数组 arr = {19, 28, 37, 46, 50}; 用程序实现把数组中的元素值交换，<br>​        交换后的数组 arr = {50, 46, 37, 28, 19}; 并在控制台输出交换后的数组元素。</p><h4 id="2-9-2代码实现"><a href="#2-9-2代码实现" class="headerlink" title="2.9.2代码实现"></a>2.9.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:定义一个数组，用静态初始化完成数组元素的初始化        2:循环遍历数组，这一次初始化语句定义两个索引变量，判断条件是开始索引小于等于结束索引        3:变量交换        4:遍历数组 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test09</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个数组，用静态初始化完成数组元素的初始化</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用反转的方法</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历数组</span>        <span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        两个明确：            返回值类型：void            参数：int[] arr     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//循环遍历数组，这一次初始化语句定义两个索引变量，判断条件是开始索引小于等于结束索引</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> start <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> start<span class="token operator">++</span><span class="token punctuation">,</span> end<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//变量交换</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        两个明确：            返回值类型：void            参数：int[] arr     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-10评委打分【应用】"><a href="#2-10评委打分【应用】" class="headerlink" title="2.10评委打分【应用】"></a>2.10评委打分【应用】</h3><h4 id="2-10-1案例需求"><a href="#2-10-1案例需求" class="headerlink" title="2.10.1案例需求"></a>2.10.1案例需求</h4><p>​    在编程竞赛中，有6个评委为参赛的选手打分，分数为0-100的整数分。<br>​        选手的最后得分为：去掉一个最高分和一个最低分后 的4个评委平均值 (不考虑小数部分)。</p><h4 id="2-10-2代码实现"><a href="#2-10-2代码实现" class="headerlink" title="2.10.2代码实现"></a>2.10.2代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:定义一个数组，用动态初始化完成数组元素的初始化，长度为6        2:键盘录入评委分数        3:由于是6个评委打分，所以，接收评委分数的操作，用循环改进        4:定义方法实现获取数组中的最高分(数组最大值)，调用方法        5:定义方法实现获取数组中的最低分(数组最小值) ，调用方法        6:定义方法实现获取数组中的所有元素的和(数组元素求和) ，调用方法        7:按照计算规则进行计算得到平均分        8:输出平均分 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test10</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个数组，用动态初始化完成数组元素的初始化，长度为6</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//键盘录入评委分数</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//由于是6个评委打分，所以，接收评委分数的操作，用循环改进</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> x<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个评委的打分："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//printArray(arr);</span>        <span class="token comment" spellcheck="true">//定义方法实现获取数组中的最高分(数组最大值)，调用方法</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义方法实现获取数组中的最低分(数组最小值) ，调用方法</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token function">getMin</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义方法实现获取数组中的所有元素的和(数组元素求和) ，调用方法</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">getSum</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//按照计算规则进行计算得到平均分</span>        <span class="token keyword">int</span> avg <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">-</span> max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出平均分</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选手的最终得分是："</span> <span class="token operator">+</span> avg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        两个明确：            返回值类型：int            参数：int[] arr     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> x<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        两个明确：            返回值类型：int            参数：int[] arr     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> x<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> min<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        两个明确：            返回值类型：int            参数：int[] arr     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> x<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//遍历数组</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day05-方法</title>
      <link href="/2020/02/05/day05-fang-fa/"/>
      <url>/2020/02/05/day05-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="day05-方法"><a href="#day05-方法" class="headerlink" title="day05-方法"></a>day05-方法</h1><h2 id="1-方法概述"><a href="#1-方法概述" class="headerlink" title="1. 方法概述"></a>1. 方法概述</h2><h3 id="1-1-方法的概念（理解）"><a href="#1-1-方法的概念（理解）" class="headerlink" title="1.1 方法的概念（理解）"></a>1.1 方法的概念（理解）</h3><p>​    方法（method）是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集</p><ul><li>注意：<ul><li>方法必须先创建才可以使用，该过程成为方法定义</li><li>方法创建后并不是直接可以运行的，需要手动使用后，才执行，该过程成为方法调用</li></ul></li></ul><h2 id="2-方法的定义和调用"><a href="#2-方法的定义和调用" class="headerlink" title="2. 方法的定义和调用"></a>2. 方法的定义和调用</h2><a id="more"></a><h3 id="2-1-无参数方法定义和调用（掌握）"><a href="#2-1-无参数方法定义和调用（掌握）" class="headerlink" title="2.1 无参数方法定义和调用（掌握）"></a>2.1 无参数方法定义和调用（掌握）</h3><ul><li><p>定义格式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> 方法名 <span class="token punctuation">(</span>   <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法体;</span><span class="token punctuation">}</span></code></pre></li><li><p>范例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span> <span class="token punctuation">(</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法体;</span><span class="token punctuation">}</span></code></pre></li><li><p>调用格式：</p><pre class=" language-java"><code class="language-java">方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>范例：</p><pre class=" language-java"><code class="language-java"><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>注意：</p><p>​    方法必须先定义，后调用，否则程序将报错</p></li></ul><h3 id="2-2-方法调用过程图解（理解）"><a href="#2-2-方法调用过程图解（理解）" class="headerlink" title="2.2 方法调用过程图解（理解）"></a>2.2 方法调用过程图解（理解）</h3><p><img src="/2020/02/05/day05-fang-fa/p3.png" alt="无参数方法调用图解"></p><ul><li>总结：每个方法在被调用执行的时候，都会进入栈内存，并且拥有自己独立的内存空间，方法内部代码调用完毕之后，会从栈内存中弹栈消失。</li></ul><h3 id="2-3-无参数方法的练习（应用）"><a href="#2-3-无参数方法的练习（应用）" class="headerlink" title="2.3 无参数方法的练习（应用）"></a>2.3 无参数方法的练习（应用）</h3><ul><li>需求：设计一个方法用于打印两个数中的较大数 </li><li>思路：<ul><li>①定义一个方法，用于打印两个数字中的较大数，例如getMax() </li><li>②方法中定义两个变量，用于保存两个数字 </li><li>③使用分支语句分两种情况对两个数字的大小关系进行处理 </li><li>④在main()方法中调用定义好的方法 </li></ul></li><li>代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在main()方法中调用定义好的方法</span>        <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义一个方法，用于打印两个数字中的较大数，例如getMax()</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法中定义两个变量，用于保存两个数字</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用分支语句分两种情况对两个数字的大小关系进行处理</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-带参数方法定义和调用"><a href="#3-带参数方法定义和调用" class="headerlink" title="3. 带参数方法定义和调用"></a>3. 带参数方法定义和调用</h2><h3 id="3-1-带参数方法定义和调用（掌握）"><a href="#3-1-带参数方法定义和调用（掌握）" class="headerlink" title="3.1 带参数方法定义和调用（掌握）"></a>3.1 带参数方法定义和调用（掌握）</h3><ul><li><p>定义格式：</p><p>参数：由数据类型和变量名组成 -  数据类型 变量名</p><p>参数范例：int a</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> 方法名 <span class="token punctuation">(</span>参数<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    方法体<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> 方法名 <span class="token punctuation">(</span>参数<span class="token number">1</span><span class="token punctuation">,</span> 参数<span class="token number">2</span><span class="token punctuation">,</span> 参数<span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    方法体<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>范例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">isEvenNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><ul><li><p>注意：</p><pre><code>  方法定义时，参数中的数据类型与变量名都不能缺少，缺少任意一个程序将报错  方法定义时，多个参数之间使用逗号( ，)分隔</code></pre></li></ul></li><li><p>调用格式：</p><pre class=" language-java"><code class="language-java">方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span>；方法名<span class="token punctuation">(</span>参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>范例：</p><pre class=" language-java"><code class="language-java"><span class="token function">isEvenNumber</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>方法调用时，参数的数量与类型必须与方法定义中的设置相匹配，否则程序将报错 </li></ul></li></ul><h3 id="3-2-形参和实参（理解）"><a href="#3-2-形参和实参（理解）" class="headerlink" title="3.2 形参和实参（理解）"></a>3.2 形参和实参（理解）</h3><ol><li>形参：方法定义中的参数</li></ol><p>​          等同于变量定义格式，例如：int number</p><ol start="2"><li>实参：方法调用中的参数</li></ol><p>​          等同于使用变量或常量，例如： 10  number</p><h3 id="3-3-带参数方法练习（应用）"><a href="#3-3-带参数方法练习（应用）" class="headerlink" title="3.3 带参数方法练习（应用）"></a>3.3 带参数方法练习（应用）</h3><ul><li>需求：设计一个方法用于打印两个数中的较大数，数据来自于方法参数 }</li><li>思路：<ul><li>①定义一个方法，用于打印两个数字中的较大数，例如getMax() </li><li>②为方法定义两个参数，用于接收两个数字 </li><li>③使用分支语句分两种情况对两个数字的大小关系进行处理 </li><li>④在main()方法中调用定义好的方法（使用常量）</li><li>⑤在main()方法中调用定义好的方法（使用变量） </li></ul></li><li>代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在main()方法中调用定义好的方法（使用常量）</span>        <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方法的时候，人家要几个，你就给几个，人家要什么类型的，你就给什么类型的</span>        <span class="token comment" spellcheck="true">//getMax(30);</span>        <span class="token comment" spellcheck="true">//getMax(10.0,20.0);</span>        <span class="token comment" spellcheck="true">//在main()方法中调用定义好的方法（使用变量）</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token function">getMax</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义一个方法，用于打印两个数字中的较大数，例如getMax()</span>    <span class="token comment" spellcheck="true">//为方法定义两个参数，用于接收两个数字</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用分支语句分两种情况对两个数字的大小关系进行处理</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-带返回值方法的定义和调用"><a href="#4-带返回值方法的定义和调用" class="headerlink" title="4. 带返回值方法的定义和调用"></a>4. 带返回值方法的定义和调用</h2><h3 id="4-1-带返回值方法定义和调用（掌握）"><a href="#4-1-带返回值方法定义和调用（掌握）" class="headerlink" title="4.1 带返回值方法定义和调用（掌握）"></a>4.1 带返回值方法定义和调用（掌握）</h3><ul><li><p>定义格式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> 数据类型 方法名 <span class="token punctuation">(</span> 参数 <span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> 数据 <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>范例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEvenNumber</span><span class="token punctuation">(</span> <span class="token keyword">int</span> number <span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token number">100</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>注意：<ul><li>方法定义时return后面的返回值与方法定义上的数据类型要匹配，否则程序将报错</li></ul></li></ul></li><li><p>调用格式</p><pre class=" language-java"><code class="language-java">方法名 <span class="token punctuation">(</span> 参数 <span class="token punctuation">)</span> <span class="token punctuation">;</span>数据类型 变量名 <span class="token operator">=</span> 方法名 <span class="token punctuation">(</span> 参数 <span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre></li><li><p>范例</p><pre class=" language-java"><code class="language-java"><span class="token function">isEvenNumber</span> <span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">boolean</span>  flag <span class="token operator">=</span>  <span class="token function">isEvenNumber</span> <span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><ul><li>注意：<ul><li>方法的返回值通常会使用变量接收，否则该返回值将无意义</li></ul></li></ul></li></ul><h3 id="4-2-带返回值方法练习（应用）"><a href="#4-2-带返回值方法练习（应用）" class="headerlink" title="4.2 带返回值方法练习（应用）"></a>4.2 带返回值方法练习（应用）</h3><ul><li><p>需求：设计一个方法可以获取两个数的较大值，数据来自于参数</p></li><li><p>思路：</p><ul><li>①定义一个方法，用于获取两个数字中的较大数 </li><li>②使用分支语句分两种情况对两个数字的大小关系进行处理 </li><li>③根据题设分别设置两种情况下对应的返回结果 </li><li>④在main()方法中调用定义好的方法并使用变量保存 </li><li>⑤在main()方法中调用定义好的方法并直接打印结果 </li></ul></li><li><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在main()方法中调用定义好的方法并使用变量保存</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在main()方法中调用定义好的方法并直接打印结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义一个方法，用于获取两个数字中的较大数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用分支语句分两种情况对两个数字的大小关系进行处理</span>        <span class="token comment" spellcheck="true">//根据题设分别设置两种情况下对应的返回结果</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="5-方法的注意事项"><a href="#5-方法的注意事项" class="headerlink" title="5. 方法的注意事项"></a>5. 方法的注意事项</h2><h3 id="5-1-方法的注意事项（掌握）"><a href="#5-1-方法的注意事项（掌握）" class="headerlink" title="5.1 方法的注意事项（掌握）"></a>5.1 方法的注意事项（掌握）</h3><ul><li><p>方法不能嵌套定义</p><ul><li><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">methodOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">methodTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 这里会引发编译错误!!!</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据</p><ul><li><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">methodTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//return 100; 编译错误，因为没有具体返回值类型</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//System.out.println(100); return语句后面不能跟数据或代码</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h3 id="5-2-方法的通用格式（掌握）"><a href="#5-2-方法的通用格式（掌握）" class="headerlink" title="5.2 方法的通用格式（掌握）"></a>5.2 方法的通用格式（掌握）</h3><ul><li><p>格式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> 返回值类型 方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span> <span class="token punctuation">{</span>   方法体<span class="token punctuation">;</span>    <span class="token keyword">return</span> 数据 <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>解释：</p><ul><li><p>public static     修饰符，目前先记住这个格式</p><p>   返回值类型    方法操作完毕之后返回的数据的数据类型</p><p>​            如果方法操作完毕，没有数据返回，这里写void，而且方法体中一般不写return</p><p>   方法名        调用方法时候使用的标识</p><p>   参数        由数据类型和变量名组成，多个参数之间用逗号隔开</p><p>   方法体        完成功能的代码块</p><p>   return        如果方法操作完毕，有数据返回，用于把数据返回给调用者</p></li></ul></li><li><p>定义方法时，要做到两个明确</p><ul><li>明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型</li><li>明确参数：主要是明确参数的类型和数量</li></ul></li><li><p>调用方法时的注意：</p><ul><li>void类型的方法，直接调用即可</li><li>非void类型的方法，推荐用变量接收调用</li></ul></li></ul><h2 id="6-方法重载"><a href="#6-方法重载" class="headerlink" title="6. 方法重载"></a>6. 方法重载</h2><h3 id="6-1-方法重载（理解）"><a href="#6-1-方法重载（理解）" class="headerlink" title="6.1 方法重载（理解）"></a>6.1 方法重载（理解）</h3><ul><li><p>方法重载概念</p><p>方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载</p><ul><li>多个方法在同一个类中</li><li>多个方法具有相同的方法名</li><li>多个方法的参数不相同，类型不同或者数量不同</li></ul></li><li><p>注意：</p><ul><li>重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式</li><li>重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载</li></ul></li><li><p>正确范例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法体</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法体</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法体</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法体</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>错误范例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法体</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/*错误原因：重载与返回值无关*/</span>        <span class="token comment" spellcheck="true">//方法体</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法体</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*错误原因：这是两个类的两个fn方法*/</span>        <span class="token comment" spellcheck="true">//方法体</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="6-2-方法重载练习（掌握）"><a href="#6-2-方法重载练习（掌握）" class="headerlink" title="6.2 方法重载练习（掌握）"></a>6.2 方法重载练习（掌握）</h3><ul><li><p>需求：使用方法重载的思想，设计比较两个整数是否相同的方法，兼容全整数类型（byte,short,int,long） </p></li><li><p>思路：</p><ul><li>①定义比较两个数字的是否相同的方法compare()方法，参数选择两个int型参数</li><li>②定义对应的重载方法，变更对应的参数类型，参数变更为两个long型参数</li><li>③定义所有的重载方法，两个byte类型与两个short类型参数 </li><li>④完成方法的调用，测试运行结果 </li></ul></li><li><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>10L<span class="token punctuation">,</span> 20L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//int</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//byte</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">byte</span> a<span class="token punctuation">,</span> <span class="token keyword">byte</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byte"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//short</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">short</span> a<span class="token punctuation">,</span> <span class="token keyword">short</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"short"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//long</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="7-方法的参数传递"><a href="#7-方法的参数传递" class="headerlink" title="7. 方法的参数传递"></a>7. 方法的参数传递</h2><h3 id="7-1-方法参数传递基本类型（理解）"><a href="#7-1-方法参数传递基本类型（理解）" class="headerlink" title="7.1 方法参数传递基本类型（理解）"></a>7.1 方法参数传递基本类型（理解）</h3><ul><li><p>测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArgsDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用change方法前："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">change</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用change方法后："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        number <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>结论：</p><ul><li>基本数据类型的参数，形式参数的改变，不影响实际参数 </li></ul></li><li><p>结论依据：</p><ul><li><p>每个方法在栈内存中，都会有独立的栈空间，方法运行结束后就会弹栈消失</p><p><img src="/2020/02/05/day05-fang-fa/p1.png" alt="方法传参-基本数据类型"></p></li></ul></li></ul><h3 id="7-2-方法参数传递引用类型（理解）"><a href="#7-2-方法参数传递引用类型（理解）" class="headerlink" title="7.2 方法参数传递引用类型（理解）"></a>7.2 方法参数传递引用类型（理解）</h3><ul><li><p>测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArgsDemo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用change方法前："</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">change</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用change方法后："</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>结论：</p><ul><li>对于引用类型的参数，形式参数的改变，影响实际参数的值 </li></ul></li><li><p>结论依据：</p><ul><li><p>引用数据类型的传参，传入的是地址值，内存中会造成两个引用指向同一个内存的效果，所以即使方法弹栈，堆内存中的数据也已经是改变后的结果 </p><p>  <img src="/2020/02/05/day05-fang-fa/p2.png" alt="方法传参-引用数据类型"></p></li></ul></li></ul><h3 id="7-3-数组遍历（应用）"><a href="#7-3-数组遍历（应用）" class="headerlink" title="7.3 数组遍历（应用）"></a>7.3 数组遍历（应用）</h3><ul><li><p>需求：设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55] </p></li><li><p>思路：</p><ul><li><p>①因为要求结果在一行上输出，所以这里需要在学习一个新的输出语句System.out.print(“内容”);</p><p>System.out.println(“内容”); 输出内容并换行</p><p>System.out.print(“内容”); 输出内容不换行</p><p>System.out.println(); 起到换行的作用</p></li><li><p>②定义一个数组，用静态初始化完成数组元素初始化</p></li><li><p>③定义一个方法，用数组遍历通用格式对数组进行遍历</p></li><li><p>④用新的输出语句修改遍历操作</p></li><li><p>⑤调用遍历方法</p></li></ul></li><li><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个数组，用静态初始化完成数组元素初始化</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方法</span>        <span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义一个方法，用数组遍历通用格式对数组进行遍历</span>    <span class="token comment" spellcheck="true">/*        两个明确：            返回值类型：void            参数：int[] arr     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> x<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="7-4-数组最大值（应用）"><a href="#7-4-数组最大值（应用）" class="headerlink" title="7.4 数组最大值（应用）"></a>7.4 数组最大值（应用）</h3><ul><li><p>需求：设计一个方法用于获取数组中元素的最大值 </p></li><li><p>思路：</p><ul><li>①定义一个数组，用静态初始化完成数组元素初始化</li><li>②定义一个方法，用来获取数组中的最大值，最值的认知和讲解我们在数组中已经讲解过了</li><li>③调用获取最大值方法，用变量接收返回结果</li><li>④把结果输出在控制台</li></ul></li><li><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个数组，用静态初始化完成数组元素初始化</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用获取最大值方法，用变量接收返回结果</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把结果输出在控制台</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"number:"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义一个方法，用来获取数组中的最大值</span>    <span class="token comment" spellcheck="true">/*        两个明确：            返回值类型：int            参数：int[] arr     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> x<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day04-IDEA工具&amp;数组</title>
      <link href="/2020/02/05/day04-idea-gong-ju-shu-zu/"/>
      <url>/2020/02/05/day04-idea-gong-ju-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="day04-IDEA工具-amp-数组"><a href="#day04-IDEA工具-amp-数组" class="headerlink" title="day04-IDEA工具&amp;数组"></a>day04-IDEA工具&amp;数组</h1><h2 id="0-IDEA开发工具"><a href="#0-IDEA开发工具" class="headerlink" title="0.IDEA开发工具"></a>0.IDEA开发工具</h2><p>​    参见：IDEA工具安装详解.pdf</p><h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h2><h3 id="1-1什么是数组【理解】"><a href="#1-1什么是数组【理解】" class="headerlink" title="1.1什么是数组【理解】"></a>1.1什么是数组【理解】</h3><p>​    数组就是存储数据长度固定的容器，存储多个数据的数据类型要一致。 </p><a id="more"></a><h3 id="1-2数组定义格式【记忆】"><a href="#1-2数组定义格式【记忆】" class="headerlink" title="1.2数组定义格式【记忆】"></a>1.2数组定义格式【记忆】</h3><h4 id="1-2-1第一种"><a href="#1-2-1第一种" class="headerlink" title="1.2.1第一种"></a>1.2.1第一种</h4><p>​    数据类型[] 数组名</p><p>​    示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>      <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span></code></pre><h4 id="1-2-2第二种"><a href="#1-2-2第二种" class="headerlink" title="1.2.2第二种"></a>1.2.2第二种</h4><p>​    数据类型 数组名[]</p><p>​    示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="1-3数组动态初始化【应用】"><a href="#1-3数组动态初始化【应用】" class="headerlink" title="1.3数组动态初始化【应用】"></a>1.3数组动态初始化【应用】</h3><h4 id="1-3-1什么是动态初始化"><a href="#1-3-1什么是动态初始化" class="headerlink" title="1.3.1什么是动态初始化"></a>1.3.1什么是动态初始化</h4><p>​    数组动态初始化就是只给定数组的长度，由系统给出默认初始化值</p><h4 id="1-3-2动态初始化格式"><a href="#1-3-2动态初始化格式" class="headerlink" title="1.3.2动态初始化格式"></a>1.3.2动态初始化格式</h4><pre class=" language-java"><code class="language-java">数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>数组长度<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h4 id="1-3-3动态初始化格式详解"><a href="#1-3-3动态初始化格式详解" class="headerlink" title="1.3.3动态初始化格式详解"></a>1.3.3动态初始化格式详解</h4><ul><li><p>等号左边：</p><ul><li><p>int:数组的数据类型</p></li><li><p>[]:代表这是一个数组</p></li><li><p>arr:代表数组的名称</p></li></ul></li><li><p>等号右边：</p><ul><li><p>new:为数组开辟内存空间</p></li><li><p>int:数组的数据类型</p></li><li><p>[]:代表这是一个数组</p></li><li><p>5:代表数组的长度</p></li></ul></li></ul><h3 id="1-4数组元素访问【应用】"><a href="#1-4数组元素访问【应用】" class="headerlink" title="1.4数组元素访问【应用】"></a>1.4数组元素访问【应用】</h3><h4 id="1-4-1什么是索引"><a href="#1-4-1什么是索引" class="headerlink" title="1.4.1什么是索引"></a>1.4.1什么是索引</h4><p>​    每一个存储到数组的元素，都会自动的拥有一个编号，从0开始。</p><p>​    这个自动编号称为数组索引(index)，可以通过数组的索引访问到数组中的元素。     </p><h4 id="1-4-2访问数组元素格式"><a href="#1-4-2访问数组元素格式" class="headerlink" title="1.4.2访问数组元素格式"></a>1.4.2访问数组元素格式</h4><pre class=" language-java"><code class="language-java">数组名<span class="token punctuation">[</span>索引<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h4 id="1-4-3示例代码"><a href="#1-4-3示例代码" class="headerlink" title="1.4.3示例代码"></a>1.4.3示例代码</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出数组名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[I@880ec60</span>        <span class="token comment" spellcheck="true">//输出数组中的元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-5内存分配【理解】"><a href="#1-5内存分配【理解】" class="headerlink" title="1.5内存分配【理解】"></a>1.5内存分配【理解】</h3><h4 id="1-5-1内存概述"><a href="#1-5-1内存概述" class="headerlink" title="1.5.1内存概述"></a>1.5.1内存概述</h4><p>​    内存是计算机中的重要原件，临时存储区域，作用是运行程序。</p><p>​    我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的。</p><p>​    必须放进内存中才能运行，运行完毕后会清空内存。 </p><p>​    Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。 </p><h4 id="1-5-2java中的内存分配"><a href="#1-5-2java中的内存分配" class="headerlink" title="1.5.2java中的内存分配"></a>1.5.2java中的内存分配</h4><ul><li>目前我们只需要记住两个内存，分别是：栈内存和堆内存</li></ul><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td>寄存器</td><td>给CPU使用，和我们开发无关。</td></tr><tr><td>本地方法栈</td><td>JVM在使用操作系统功能的时候使用，和我们开发无关。</td></tr><tr><td>方法区</td><td>存储可以运行的class文件。</td></tr><tr><td>堆内存</td><td>存储对象或者数组，new来创建的，都存储在堆内存。</td></tr><tr><td>方法栈</td><td>方法运行时使用的内存，比如main方法运行，进入方法栈中执行。</td></tr></tbody></table><h3 id="1-6单个数组的内存图【理解】"><a href="#1-6单个数组的内存图【理解】" class="headerlink" title="1.6单个数组的内存图【理解】"></a>1.6单个数组的内存图【理解】</h3><h3 id="1-7多个数组的内存图【理解】"><a href="#1-7多个数组的内存图【理解】" class="headerlink" title="1.7多个数组的内存图【理解】"></a>1.7多个数组的内存图【理解】</h3><h3 id="1-8多个数组指向相同内存图【理解】"><a href="#1-8多个数组指向相同内存图【理解】" class="headerlink" title="1.8多个数组指向相同内存图【理解】"></a>1.8多个数组指向相同内存图【理解】</h3><h3 id="1-9数组静态初始化【应用】"><a href="#1-9数组静态初始化【应用】" class="headerlink" title="1.9数组静态初始化【应用】"></a>1.9数组静态初始化【应用】</h3><h4 id="1-9-1什么是静态初始化"><a href="#1-9-1什么是静态初始化" class="headerlink" title="1.9.1什么是静态初始化"></a>1.9.1什么是静态初始化</h4><p>​    在创建数组时，直接将元素确定    </p><h4 id="1-9-2静态初始化格式"><a href="#1-9-2静态初始化格式" class="headerlink" title="1.9.2静态初始化格式"></a>1.9.2静态初始化格式</h4><ul><li><p>完整版格式</p><pre class=" language-java"><code class="language-java">数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>元素<span class="token number">1</span><span class="token punctuation">,</span>元素<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li><p>简化版格式</p><pre class=" language-java"><code class="language-java">数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名 <span class="token operator">=</span> <span class="token punctuation">{</span>元素<span class="token number">1</span><span class="token punctuation">,</span>元素<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="1-9-3示例代码"><a href="#1-9-3示例代码" class="headerlink" title="1.9.3示例代码"></a>1.9.3示例代码</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出数组名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出数组中的元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-10数组操作的两个常见小问题【应用】"><a href="#1-10数组操作的两个常见小问题【应用】" class="headerlink" title="1.10数组操作的两个常见小问题【应用】"></a>1.10数组操作的两个常见小问题【应用】</h3><h4 id="1-10-1索引越界异常"><a href="#1-10-1索引越界异常" class="headerlink" title="1.10.1索引越界异常"></a>1.10.1索引越界异常</h4><ul><li><p>出现原因</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>数组长度为3，索引范围是0~2，但是我们却访问了一个3的索引。</p><p>程序运行后，将会抛出ArrayIndexOutOfBoundsException 数组越界异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。 </p></li><li><p>解决方案</p><p>将错误的索引修改为正确的索引范围即可！</p></li></ul><h4 id="1-10-2空指针异常"><a href="#1-10-2空指针异常" class="headerlink" title="1.10.2空指针异常"></a>1.10.2空指针异常</h4><ul><li><p>出现原因</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把null赋值给数组</span>        arr <span class="token operator">=</span> null<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>arr = null 这行代码，意味着变量arr将不会在保存数组的内存地址，也就不允许再操作数组了，因此运行的时候会抛出 NullPointerException 空指针异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。</p></li><li><p>解决方案</p><p>给数组一个真正的堆内存空间引用即可！</p></li></ul><h3 id="1-11数组遍历【应用】"><a href="#1-11数组遍历【应用】" class="headerlink" title="1.11数组遍历【应用】"></a>1.11数组遍历【应用】</h3><ul><li><p>数组遍历：就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> 以上代码是可以将数组中每个元素全部遍历出来，但是如果数组元素非常多，这种写法肯定不行，因此我们需要改造成循环的写法。数组的索引是 0 到 lenght-1 ，可以作为循环的条件出现。 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用通用的遍历格式</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> x<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="1-12数组最值【应用】"><a href="#1-12数组最值【应用】" class="headerlink" title="1.12数组最值【应用】"></a>1.12数组最值【应用】</h3><ul><li><p>最大值获取：从数组的所有元素中找出最大值。</p></li><li><p>实现思路：</p><ul><li>定义变量，保存数组0索引上的元素</li><li>遍历数组，获取出数组中的每个元素</li><li>将遍历到的元素和保存数组0索引上值的变量进行比较</li><li>如果数组元素的值大于了变量的值，变量记录住新的值</li><li>数组循环遍历结束，变量保存的就是数组中的最大值 </li></ul></li><li><p>代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义一个变量，用于保存最大值</span>        <span class="token comment" spellcheck="true">//取数组中第一个数据作为变量的初始值</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//与数组中剩余的数据逐个比对，每次比对将最大值保存到变量中</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> x<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//循环结束后打印变量的值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max:"</span> <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day03-switch</title>
      <link href="/2020/02/04/day03-switch/"/>
      <url>/2020/02/04/day03-switch/</url>
      
        <content type="html"><![CDATA[<h1 id="day03-控制语句"><a href="#day03-控制语句" class="headerlink" title="day03 - 控制语句"></a>day03 - 控制语句</h1><h2 id="1-switch语句"><a href="#1-switch语句" class="headerlink" title="1. switch语句"></a>1. switch语句</h2><h3 id="1-1-switch语句结构（掌握）"><a href="#1-1-switch语句结构（掌握）" class="headerlink" title="1.1 switch语句结构（掌握）"></a>1.1 switch语句结构（掌握）</h3><ul><li><p>格式</p><a id="more"></a><pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        语句体<span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>        语句体<span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">default</span><span class="token operator">:</span>        语句体n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>执行流程：</p><ul><li>首先计算出表达式的值 </li><li>其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结 束。 </li><li>最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。 </li></ul></li></ul><h3 id="1-2-switch语句练习-春夏秋冬（应用）"><a href="#1-2-switch语句练习-春夏秋冬（应用）" class="headerlink" title="1.2 switch语句练习-春夏秋冬（应用）"></a>1.2 switch语句练习-春夏秋冬（应用）</h3><ul><li>需求：一年有12个月，分属于春夏秋冬4个季节，键盘录入一个月份，请用程序实现判断该月份属于哪个季节，并输出。 </li><li>运行结果：</li></ul><pre><code>春：3、4、5夏：6、7、8秋：9、10、11冬：1、2、12</code></pre><ul><li>示例代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//键盘录入月份数据，使用变量接收</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个月份："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> month <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//case穿透</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"冬季"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"春季"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"夏季"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秋季"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的月份有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>注意：如果switch中得case，没有对应break的话，则会出现case穿透的现象。</li></ul><h2 id="2-for循环"><a href="#2-for循环" class="headerlink" title="2. for循环"></a>2. for循环</h2><h3 id="2-1-for循环结构（掌握）"><a href="#2-1-for循环结构（掌握）" class="headerlink" title="2.1 for循环结构（掌握）"></a>2.1 for循环结构（掌握）</h3><ul><li><p>循环：</p><p>循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复 执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形 成死循环。 </p></li><li><p>for循环格式：</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始化语句<span class="token punctuation">;</span>条件判断语句<span class="token punctuation">;</span>条件控制语句<span class="token punctuation">)</span> <span class="token punctuation">{</span>    循环体语句<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>格式解释：</p><ul><li>初始化语句：  用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样</li><li>条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去</li><li>循环体语句：  用于表示循环反复执行的内容，简单说就是循环反复执行的事情</li><li>条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去</li></ul></li><li><p>执行流程：</p><p>①执行初始化语句</p><p>②执行条件判断语句，看其结果是true还是false</p><p>​             如果是false，循环结束</p><p>​             如果是true，继续执行</p><p>③执行循环体语句</p><p>④执行条件控制语句</p><p>⑤回到②继续</p></li></ul><h3 id="2-2-for循环练习-输出数据（应用）"><a href="#2-2-for循环练习-输出数据（应用）" class="headerlink" title="2.2 for循环练习-输出数据（应用）"></a>2.2 for循环练习-输出数据（应用）</h3><ul><li>需求：在控制台输出1-5和5-1的数据 </li><li>示例代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//需求：输出数据1-5</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需求：输出数据5-1</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-for循环练习-求和（应用）"><a href="#2-3-for循环练习-求和（应用）" class="headerlink" title="2.3 for循环练习-求和（应用）"></a>2.3 for循环练习-求和（应用）</h3><ul><li>需求：求1-5之间的数据和，并把求和结果在控制台输出 </li><li>示例代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从1开始到5结束的数据，使用循环结构完成</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将反复进行的事情写入循环结构内部</span>             <span class="token comment" spellcheck="true">// 此处反复进行的事情是将数据 i 加到用于保存最终求和的变量 sum 中</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*                sum += i;    sum = sum + i;                第一次：sum = sum + i = 0 + 1 = 1;                第二次：sum = sum + i = 1 + 2 = 3;                第三次：sum = sum + i = 3 + 3 = 6;                第四次：sum = sum + i = 6 + 4 = 10;                第五次：sum = sum + i = 10 + 5 = 15;            */</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//当循环执行完毕时，将最终数据打印出来</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1-5之间的数据和是："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>本题要点：<ul><li>今后遇到的需求中，如果带有求和二字，请立即联想到求和变量</li><li>求和变量的定义位置，必须在循环外部，如果在循环内部则计算出的数据将是错误的</li></ul></li></ul><h3 id="2-4-for循环练习-求偶数和（应用）"><a href="#2-4-for循环练习-求偶数和（应用）" class="headerlink" title="2.4 for循环练习-求偶数和（应用）"></a>2.4 for循环练习-求偶数和（应用）</h3><ul><li>需求：求1-100之间的偶数和，并把求和结果在控制台输出 }</li><li>示例代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForTest03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对1-100的数据求和与1-5的数据求和几乎完全一样，仅仅是结束条件不同</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//对1-100的偶数求和，需要对求和操作添加限制条件，判断是否是偶数</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//当循环执行完毕时，将最终数据打印出来</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1-100之间的偶数和是："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-5-for循环练习-水仙花（应用）"><a href="#2-5-for循环练习-水仙花（应用）" class="headerlink" title="2.5 for循环练习-水仙花（应用）"></a>2.5 for循环练习-水仙花（应用）</h3><ul><li>需求：在控制台输出所有的“水仙花数” </li><li>解释：什么是水仙花数？<ul><li>水仙花数，指的是一个三位数，个位、十位、百位的数字立方和等于原数<ul><li>例如<code>153  3*3*3 + 5*5*5 + 1*1*1 = 153</code></li></ul></li></ul></li><li>思路：<ol><li>获取所有的三位数，准备进行筛选，最小的三位数为100，最大的三位数为999，使用for循环获取</li><li>获取每一个三位数的个位，十位，百位，做if语句判断是否是水仙花数</li></ol></li><li>示例代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForTest04</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//输出所有的水仙花数必然要使用到循环，遍历所有的三位数，三位数从100开始，到999结束</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//在计算之前获取三位数中每个位上的值</span>            <span class="token keyword">int</span> ge <span class="token operator">=</span> i<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> shi <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> bai <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判定条件是将三位数中的每个数值取出来，计算立方和后与原始数字比较是否相等</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ge<span class="token operator">*</span>ge<span class="token operator">*</span>ge <span class="token operator">+</span> shi<span class="token operator">*</span>shi<span class="token operator">*</span>shi <span class="token operator">+</span> bai<span class="token operator">*</span>bai<span class="token operator">*</span>bai <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//输出满足条件的数字就是水仙花数</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-6-for循环练习-统计水仙花数个数（应用）"><a href="#2-6-for循环练习-统计水仙花数个数（应用）" class="headerlink" title="2.6 for循环练习-统计水仙花数个数（应用）"></a>2.6 for循环练习-统计水仙花数个数（应用）</h3><ul><li>需求：统计“水仙花数”一共有多少个，并在控制台输出个数 </li><li>示例代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForTest05</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义变量count，用于保存“水仙花数”的数量，初始值为0</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出所有的水仙花数必然要使用到循环，遍历所有的三位数，三位数从100开始，到999结束</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//在计算之前获取三位数中每个位上的值</span>            <span class="token keyword">int</span> ge <span class="token operator">=</span> i<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> shi <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> bai <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//在判定水仙花数的过程中，满足条件不再输出，更改为修改count的值，使count+1</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ge<span class="token operator">*</span>ge<span class="token operator">*</span>ge <span class="token operator">+</span> shi<span class="token operator">*</span>shi<span class="token operator">*</span>shi <span class="token operator">+</span> bai<span class="token operator">*</span>bai<span class="token operator">*</span>bai <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//打印输出最终结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"水仙花共有："</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>本题要点：<ul><li>今后如果需求带有统计xxx，请先想到计数器变量</li><li>计数器变量定义的位置，必须在循环外部</li></ul></li></ul><h2 id="3-while循环"><a href="#3-while循环" class="headerlink" title="3. while循环"></a>3. while循环</h2><h3 id="3-1-while结构（掌握）"><a href="#3-1-while结构（掌握）" class="headerlink" title="3.1 while结构（掌握）"></a>3.1 while结构（掌握）</h3><ul><li><p>while循环完整格式：</p><pre class=" language-java"><code class="language-java">初始化语句<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>条件判断语句<span class="token punctuation">)</span> <span class="token punctuation">{</span>    循环体语句<span class="token punctuation">;</span>    条件控制语句<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>while循环执行流程：</p><p>①执行初始化语句</p><p>②执行条件判断语句，看其结果是true还是false</p><p>​             如果是false，循环结束</p><p>​             如果是true，继续执行</p><p>③执行循环体语句</p><p>④执行条件控制语句</p><p>⑤回到②继续</p></li><li><p>示例代码：</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WhileDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//需求：在控制台输出5次"HelloWorld"</span>        <span class="token comment" spellcheck="true">//for循环实现</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//while循环实现</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-while循环练习-珠穆朗玛峰（应用）"><a href="#3-2-while循环练习-珠穆朗玛峰（应用）" class="headerlink" title="3.2 while循环练习-珠穆朗玛峰（应用）"></a>3.2 while循环练习-珠穆朗玛峰（应用）</h3><ul><li>需求：世界最高山峰是珠穆朗玛峰(8844.43米=8844430毫米)，假如我有一张足够大的纸，它的厚度是0.1毫米。请问，我折叠多少次，可以折成珠穆朗玛峰的高度?</li><li>示例代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WhileTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个计数器，初始值为0</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义纸张厚度</span>        <span class="token keyword">double</span> paper <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义珠穆朗玛峰的高度</span>        <span class="token keyword">int</span> zf <span class="token operator">=</span> <span class="token number">8844430</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//因为要反复折叠，所以要使用循环，但是不知道折叠多少次，这种情况下更适合使用while循环</span>        <span class="token comment" spellcheck="true">//折叠的过程中当纸张厚度大于珠峰就停止了，因此继续执行的要求是纸张厚度小于珠峰高度</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>paper <span class="token operator">&lt;=</span> zf<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//循环的执行过程中每次纸张折叠，纸张的厚度要加倍</span>            paper <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//在循环中执行累加，对应折叠了多少次</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//打印计数器的值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"需要折叠："</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-循环细节"><a href="#4-循环细节" class="headerlink" title="4. 循环细节"></a>4. 循环细节</h2><h3 id="4-1-do…while循环结构（掌握）"><a href="#4-1-do…while循环结构（掌握）" class="headerlink" title="4.1 do…while循环结构（掌握）"></a>4.1 do…while循环结构（掌握）</h3><ul><li><p>完整格式：</p><pre class=" language-java"><code class="language-java">初始化语句<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    循环体语句<span class="token punctuation">;</span>    条件控制语句<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件判断语句<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>执行流程：</p><p>① 执行初始化语句</p><p>② 执行循环体语句</p><p>③ 执行条件控制语句</p><p>④ 执行条件判断语句，看其结果是true还是false</p><p>如果是false，循环结束</p><p>如果是true，继续执行</p><p>⑤ 回到②继续</p></li><li><p>示例代码：</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoWhileDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//需求：在控制台输出5次"HelloWorld"</span>        <span class="token comment" spellcheck="true">//for循环实现</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//do...while循环实现</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-2-三种循环的区别（理解）"><a href="#4-2-三种循环的区别（理解）" class="headerlink" title="4.2 三种循环的区别（理解）"></a>4.2 三种循环的区别（理解）</h3><ul><li>三种循环的区别<ul><li>for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行）</li><li>do…while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断）</li></ul></li><li>for循环和while的区别<ul><li>条件控制语句所控制的自增变量，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了</li><li>条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用</li></ul></li><li>死循环（无限循环）的三种格式<ol><li>for(;;){}</li><li>while(true){}</li><li>do {} while(true);</li></ol></li></ul><h3 id="4-3-跳转控制语句（掌握）"><a href="#4-3-跳转控制语句（掌握）" class="headerlink" title="4.3 跳转控制语句（掌握）"></a>4.3 跳转控制语句（掌握）</h3><ul><li>跳转控制语句（break）<ul><li>跳出循环，结束循环</li></ul></li><li>跳转控制语句（continue）<ul><li>跳过本次循环，继续下次循环</li></ul></li><li>注意： continue只能在循环中进行使用！</li></ul><h3 id="4-4-循环嵌套（理解）"><a href="#4-4-循环嵌套（理解）" class="headerlink" title="4.4 循环嵌套（理解）"></a>4.4 循环嵌套（理解）</h3><ul><li><p>循环嵌套概述：在循环中，继续定义循环</p></li><li><p>示例代码：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//外循环控制小时的范围，内循环控制分钟的范围</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> hour <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> hour <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span> hour<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> minute <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> minute <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">;</span> minute<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hour <span class="token operator">+</span> <span class="token string">"时"</span> <span class="token operator">+</span> minute <span class="token operator">+</span> <span class="token string">"分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li><li><p>理解：</p><ul><li>请反复理解这句话（整个内循环，就是外循环的一个循环体，内部循环体没有执行完毕，外循环是不会继续向下执行的）</li></ul></li><li><p>结论：</p><ul><li>外循环执行一次，内循环执行一圈</li></ul></li></ul><h2 id="5-Random"><a href="#5-Random" class="headerlink" title="5. Random"></a>5. Random</h2><h3 id="5-1-Random产生随机数（掌握）"><a href="#5-1-Random产生随机数（掌握）" class="headerlink" title="5.1 Random产生随机数（掌握）"></a>5.1 Random产生随机数（掌握）</h3><ul><li><p>概述：</p><ul><li>Random类似Scanner，也是Java提供好的API，内部提供了产生随机数的功能<ul><li>API后续课程详细讲解，现在可以简单理解为Java已经写好的代码</li></ul></li></ul></li><li><p>使用步骤：</p><ol><li><p>导入包</p><p>import java.util.Random;</p></li><li><p>创建对象</p><p>Random r = new Random();</p></li><li><p>产生随机数</p><p>int num = r.nextInt(10);</p><p>解释： 10代表的是一个范围，如果括号写10，产生的随机数就是0-9，括号写20，参数的随机数则是0-19</p></li></ol></li><li><p>示例代码：</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用循环获取10个随机数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取随机数</span>            <span class="token keyword">int</span> number <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"number:"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//需求：获取一个1-100之间的随机数</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-3-Random练习-猜数字（应用）"><a href="#5-3-Random练习-猜数字（应用）" class="headerlink" title="5.3 Random练习-猜数字（应用）"></a>5.3 Random练习-猜数字（应用）</h3><ul><li><p>需求：</p><p>程序自动生成一个1-100之间的数字，使用程序实现猜出这个数字是多少？</p><p>当猜错的时候根据不同情况给出相应的提示</p><p>A. 如果猜的数字比真实数字大，提示你猜的数据大了</p><p>B. 如果猜的数字比真实数字小，提示你猜的数据小了</p><p>C. 如果猜的数字与真实数字相等，提示恭喜你猜中了</p></li><li><p>示例代码：</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//要完成猜数字的游戏，首先需要有一个要猜的数字，使用随机数生成该数字，范围1到100</span>        Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使用程序实现猜数字，每次均要输入猜测的数字值，需要使用键盘录入实现</span>            Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入你要猜的数字："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> guessNumber <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//比较输入的数字和系统产生的数据，需要使用分支语句。</span>             <span class="token comment" spellcheck="true">//这里使用if..else..if..格式，根据不同情况进行猜测结果显示</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>guessNumber <span class="token operator">></span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你猜的数字"</span> <span class="token operator">+</span> guessNumber <span class="token operator">+</span> <span class="token string">"大了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>guessNumber <span class="token operator">&lt;</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你猜的数字"</span> <span class="token operator">+</span> guessNumber <span class="token operator">+</span> <span class="token string">"小了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恭喜你猜中了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day02-Java基础语法</title>
      <link href="/2020/02/04/day02-java/"/>
      <url>/2020/02/04/day02-java/</url>
      
        <content type="html"><![CDATA[<h2 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1. 运算符"></a>1. 运算符</h2><h3 id="1-1-算术运算符（理解）"><a href="#1-1-算术运算符（理解）" class="headerlink" title="1.1 算术运算符（理解）"></a>1.1 算术运算符（理解）</h3><h4 id="1-1-1-运算符和表达式"><a href="#1-1-1-运算符和表达式" class="headerlink" title="1.1.1 运算符和表达式"></a>1.1.1 运算符和表达式</h4><a id="more"></a><p>运算符：对常量或者变量进行操作的符号</p><p>表达式：用运算符把常量或者变量连接起来符合java语法的式子就可以称为表达式。</p><p>​                    不同运算符连接的表达式体现的是不同类型的表达式。</p><p>举例说明：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></code></pre><p>  +：是运算符，并且是算术运算符。</p><p>  a + b：是表达式，由于+是算术运算符，所以这个表达式叫算术表达式。</p><h4 id="1-1-2-算术运算符"><a href="#1-1-2-算术运算符" class="headerlink" title="1.1.2 算术运算符"></a>1.1.2 算术运算符</h4><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>参看小学一年级</td></tr><tr><td>-</td><td>减</td><td>参看小学一年级</td></tr><tr><td>*</td><td>乘</td><td>参看小学二年级，与“×”相同</td></tr><tr><td>/</td><td>除</td><td>参看小学二年级，与“÷”相同</td></tr><tr><td>%</td><td>取余</td><td>获取的是两个数据做除法的余数</td></tr></tbody></table><p>注意：</p><p>/和%的区别：两个数据做除法，/取结果的商，%取结果的余数。</p><p>整数操作只能得到整数，要想得到小数，必须有浮点数参与运算。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出结果3</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出结果1</span></code></pre><h4 id="1-1-3-字符的“-”操作"><a href="#1-1-3-字符的“-”操作" class="headerlink" title="1.1.3 字符的“+”操作"></a>1.1.3 字符的“+”操作</h4><p>char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值：</p><p>‘a’  –  97        a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加</p><p>‘A’  –  65        A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加</p><p>‘0’  –  48        0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 可以通过使用字符与整数做算术运算，得出字符对应的数值是多少</span><span class="token keyword">char</span> ch1 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ch1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出98，97 + 1 = 98</span><span class="token keyword">char</span> ch2 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ch2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出66，65 + 1 = 66</span><span class="token keyword">char</span> ch3 <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ch3 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出49，48 + 1 = 49</span></code></pre><p>算术表达式中包含不同的基本数据类型的值的时候，整个算术表达式的类型会自动进行提升。</p><p>提升规则：</p><p>byte类型，short类型和char类型将被提升到int类型，不管是否有其他类型参与运算。</p><p>整个表达式的类型自动提升到与表达式中最高等级的操作数相同的类型</p><p>​       等级顺序：byte,short,char –&gt; int –&gt; long –&gt; float –&gt; double</p><p>例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// byte b3 = b1 + b2; // 该行报错，因为byte类型参与算术运算会自动提示为int，int赋值给byte可能损失精度</span><span class="token keyword">int</span> i3 <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 应该使用int接收</span><span class="token keyword">byte</span> b3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b1 <span class="token operator">+</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 或者将结果强制转换为byte类型</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">double</span> num2 <span class="token operator">=</span> <span class="token number">20.0</span><span class="token punctuation">;</span><span class="token keyword">double</span> num3 <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用double接收，因为num1会自动提升为double类型</span></code></pre><p>tips：正是由于上述原因，所以在程序开发中我们很少使用byte或者short类型定义整数。也很少会使用char类型定义字符，而使用字符串类型，更不会使用char类型做算术运算。</p><h4 id="1-1-4-字符串的“-”操作"><a href="#1-1-4-字符串的“-”操作" class="headerlink" title="1.1.4 字符串的“+”操作"></a>1.1.4 字符串的“+”操作</h4><p>当“+”操作中出现字符串时，这个”+”是字符串连接符，而不是算术运算。</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"itheima"</span><span class="token operator">+</span> <span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：itheima666</span></code></pre><p>在”+”操作中，如果出现了字符串，就是连接运算符，否则就是算术运算。当连续进行“+”操作时，从左到右逐个执行。</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">99</span> <span class="token operator">+</span> <span class="token string">"年黑马"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：100年黑马</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"itheima"</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：3itheima34</span><span class="token comment" spellcheck="true">// 可以使用小括号改变运算的优先级 </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"itheima"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：3itheima7</span></code></pre><h3 id="1-2-赋值运算符（应用）"><a href="#1-2-赋值运算符（应用）" class="headerlink" title="1.2 赋值运算符（应用）"></a>1.2 赋值运算符（应用）</h3><p>赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量。</p><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=10，将10赋值给变量a</td></tr><tr><td>+=</td><td>加后赋值</td><td>a+=b，将a+b的值给a</td></tr><tr><td>-=</td><td>减后赋值</td><td>a-=b，将a-b的值给a</td></tr><tr><td>*=</td><td>乘后赋值</td><td>a*=b，将a×b的值给a</td></tr><tr><td>/=</td><td>除后赋值</td><td>a/=b，将a÷b的商给a</td></tr><tr><td>%=</td><td>取余后赋值</td><td>a%=b，将a÷b的余数给a</td></tr></tbody></table><p>注意：</p><p>扩展的赋值运算符隐含了强制类型转换。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>s <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此行代码报出，因为运算中s提升为int类型，运算结果int赋值给short可能损失精度</span>s <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此行代码没有问题，隐含了强制类型转换，相当于 s = (short) (s + 10);</span></code></pre><h3 id="1-3-自增自减运算符（理解）"><a href="#1-3-自增自减运算符（理解）" class="headerlink" title="1.3 自增自减运算符（理解）"></a>1.3 自增自减运算符（理解）</h3><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>++</td><td>自增</td><td>变量的值加1</td></tr><tr><td>–</td><td>自减</td><td>变量的值减1</td></tr></tbody></table><p>注意事项：</p><p>​    ++和– 既可以放在变量的后边，也可以放在变量的前边。</p><p>​    单独使用的时候， ++和– 无论是放在变量的前边还是后边，结果是一样的。</p><p>​    参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–。</p><p>​    参与操作的时候，如果放在变量的前边，先拿变量做++或者–，后拿变量参与操作。</p><p>​    最常见的用法：单独使用。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 单独使用</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// i:11</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 单独使用</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"j:"</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// j:11</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 赋值运算，++在后边，所以是使用x原来的值赋值给y，x本身自增1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x:"</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">", y:"</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// x:11，y:10</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token operator">++</span>m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 赋值运算，++在前边，所以是使用m自增后的值赋值给n，m本身自增1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m:"</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">", m:"</span> <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// m:11，m:11</span></code></pre><p>练习：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token operator">++</span> <span class="token operator">+</span> x<span class="token operator">++</span> <span class="token operator">+</span> x<span class="token operator">++</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// y的值是多少？</span><span class="token comment" spellcheck="true">/*解析，三个表达式都是++在后，所以每次使用的都是自增前的值，但程序自左至右执行，所以第一次自增时，使用的是10进行计算，但第二次自增时，x的值已经自增到11了，所以第二次使用的是11，然后再次自增。。。所以整个式子应该是：int y = 10 + 11 + 12;输出结果为33。*/</span>注意：通过此练习深刻理解自增和自减的规律，但实际开发中强烈建议不要写这样的代码！小心挨打！</code></pre><h3 id="1-4-关系运算符（应用）"><a href="#1-4-关系运算符（应用）" class="headerlink" title="1.4 关系运算符（应用）"></a>1.4 关系运算符（应用）</h3><p>关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于。</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>==</td><td>a==b，判断a和b的值是否相等，成立为true，不成立为false</td></tr><tr><td>!=</td><td>a!=b，判断a和b的值是否不相等，成立为true，不成立为false</td></tr><tr><td>&gt;</td><td>a&gt;b，判断a是否大于b，成立为true，不成立为false</td></tr><tr><td>&gt;=</td><td>a&gt;=b，判断a是否大于等于b，成立为true，不成立为false</td></tr><tr><td>&lt;</td><td>a&lt;b，判断a是否小于b，成立为true，不成立为false</td></tr><tr><td>&lt;=</td><td>a&lt;=b，判断a是否小于等于b，成立为true，不成立为false</td></tr></tbody></table><p>注意事项：</p><p>​    关系运算符的结果都是boolean类型，要么是true，要么是false。</p><p>​    千万不要把“==”误写成“=”，”==”是判断是否相等的关系，”=”是赋值。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 关系运算的结果肯定是boolean类型，所以也可以将运算结果赋值给boolean类型的变量</span><span class="token keyword">boolean</span> flag <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出false</span></code></pre><h3 id="1-5-逻辑运算符（应用）"><a href="#1-5-逻辑运算符（应用）" class="headerlink" title="1.5 逻辑运算符（应用）"></a>1.5 逻辑运算符（应用）</h3><p>逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false。</p><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;</td><td>逻辑与</td><td>a&amp;b，a和b都是true，结果为true，否则为false</td></tr><tr><td>|</td><td>逻辑或</td><td>a|b，a和b都是false，结果为false，否则为true</td></tr><tr><td>^</td><td>逻辑异或</td><td>a^b，a和b结果不同为true，相同为false</td></tr><tr><td>!</td><td>逻辑非</td><td>!a，结果和a的结果正好相反</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义变量</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp; “与”，并且的关系，只要表达式中有一个值为false，结果即为false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false &amp; false,输出false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true &amp; false,输出false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false &amp; true,输出false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true &amp; true,输出true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//| “或”，或者的关系，只要表达式中有一个值为true，结果即为true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>i <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false | false,输出false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>i <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true | false,输出true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false | true,输出true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true | true,输出true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//^ “异或”，相同为false，不同为true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>i <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false ^ false,输出false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>i <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true ^ false,输出true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false ^ true,输出true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true ^ true,输出false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//! “非”，取反</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//!false，,输出true</span></code></pre><h4 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h4><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>短路与</td><td>作用和&amp;相同，但是有短路效果</td></tr><tr><td>||</td><td>短路或</td><td>作用和|相同，但是有短路效果</td></tr></tbody></table><p>在逻辑与运算中，只要有一个表达式的值为false，那么结果就可以判定为false了，没有必要将所有表达式的值都计算出来，短路与操作就有这样的效果，可以提高效率。同理在逻辑或运算中，一旦发现值为true，右边的表达式将不再参与运算。</p><ul><li><p>逻辑与&amp;，无论左边真假，右边都要执行。</p></li><li><p>短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行。</p></li><li><p>逻辑或|，无论左边真假，右边都要执行。</p></li><li><p>短路或||，如果左边为假，右边执行；如果左边为真，右边不执行。</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>y<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 两个表达都会运算</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>y<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 左边已经可以确定结果为false，右边不参与运算</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span></code></pre><h3 id="1-6-三元运算符（理解）"><a href="#1-6-三元运算符（理解）" class="headerlink" title="1.6 三元运算符（理解）"></a>1.6 三元运算符（理解）</h3><p>三元运算符语法格式：</p><pre class=" language-java"><code class="language-java">关系表达式 <span class="token operator">?</span> 表达式<span class="token number">1</span> <span class="token operator">:</span> 表达式<span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>解释：问号前面的位置是判断的条件，判断结果为boolean型，为true时调用表达式1，为false时调用表达式2。其逻辑为：如果条件表达式成立或者满足则执行表达式1，否则执行第二个。</p><p>举例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断 a>b 是否为真，如果为真取a的值，如果为假，取b的值</span></code></pre><p>三元运算符案例：</p><p>1、需求：动物园里有两只老虎，已知两只老虎的体重分别为180kg、200kg，请用程序实现判断两只老虎的体重是否相同。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperatorTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1：定义两个变量用于保存老虎的体重，单位为kg，这里仅仅体现数值即可。</span>        <span class="token keyword">int</span> weight1 <span class="token operator">=</span> <span class="token number">180</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> weight2 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2：用三元运算符实现老虎体重的判断，体重相同，返回true，否则，返回false。</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> weight1 <span class="token operator">==</span> weight2 <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3：输出结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b:"</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2、需求：一座寺庙里住着三个和尚，已知他们的身高分别为150cm、210cm、165cm，请用程序实现获取这三个和尚的最高身高。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperatorTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1：定义三个变量用于保存和尚的身高，单位为cm，这里仅仅体现数值即可。</span>        <span class="token keyword">int</span> height1 <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height2 <span class="token operator">=</span> <span class="token number">210</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height3 <span class="token operator">=</span> <span class="token number">165</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2：用三元运算符获取前两个和尚的较高身高值，并用临时身高变量保存起来。</span>        <span class="token keyword">int</span> tempHeight <span class="token operator">=</span> height1 <span class="token operator">></span> height2 <span class="token operator">?</span> height1 <span class="token operator">:</span> height2<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//3：用三元运算符获取临时身高值和第三个和尚身高较高值，并用最大身高变量保存。</span>        <span class="token keyword">int</span> maxHeight <span class="token operator">=</span> tempHeight <span class="token operator">></span> height3 <span class="token operator">?</span> tempHeight <span class="token operator">:</span> height3<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4：输出结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"maxHeight:"</span> <span class="token operator">+</span> maxHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-数据输入（应用）"><a href="#2-数据输入（应用）" class="headerlink" title="2. 数据输入（应用）"></a>2. 数据输入（应用）</h2><p>我们可以通过 Scanner 类来获取用户的输入。使用步骤如下：</p><p>1、导包。Scanner 类在java.util包下，所以需要将该类导入。导包的语句需要定义在类的上面。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> </code></pre><p>2、创建Scanner对象。</p><pre class=" language-java"><code class="language-java">Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建Scanner对象，sc表示变量名，其他均不可变</span></code></pre><p>3、接收数据</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表示将键盘录入的值作为int数返回。</span></code></pre><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//接收数据</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出数据</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x:"</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>改写三个和尚案例，数据使用键盘录入。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//身高未知，采用键盘录入实现。首先导包，然后创建对象。</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//键盘录入三个身高分别赋值给三个变量。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第一个和尚的身高："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height1 <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第二个和尚的身高："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height2 <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第三个和尚的身高："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height3 <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用三元运算符获取前两个和尚的较高身高值，并用临时身高变量保存起来。</span>        <span class="token keyword">int</span> tempHeight <span class="token operator">=</span> height1 <span class="token operator">></span> height2 <span class="token operator">?</span> height1 <span class="token operator">:</span> height2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用三元运算符获取临时身高值和第三个和尚身高较高值，并用最大身高变量保存。</span>        <span class="token keyword">int</span> maxHeight <span class="token operator">=</span> tempHeight <span class="token operator">></span> height3 <span class="token operator">?</span> tempHeight <span class="token operator">:</span> height3<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出结果。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这三个和尚中身高最高的是："</span> <span class="token operator">+</span> maxHeight <span class="token operator">+</span><span class="token string">"cm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-流程控制语句（应用）"><a href="#3-流程控制语句（应用）" class="headerlink" title="3. 流程控制语句（应用）"></a>3. 流程控制语句（应用）</h2><p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候要通过控制语句的执行顺序来实现我们想要的功能。</p><h3 id="3-1-流程控制语句分类"><a href="#3-1-流程控制语句分类" class="headerlink" title="3.1 流程控制语句分类"></a>3.1 流程控制语句分类</h3><p>​    顺序结构</p><p>​    分支结构(if, switch)</p><p>​    循环结构(for, while, do…while)</p><h3 id="3-2-顺序结构"><a href="#3-2-顺序结构" class="headerlink" title="3.2 顺序结构"></a>3.2 顺序结构</h3><p>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</p><p>顺序结构执行流程图：</p><p><img src="/2020/02/04/day02-java/p1.png" alt="图1"></p><h3 id="3-3-分支结构之if语句"><a href="#3-3-分支结构之if语句" class="headerlink" title="3.3 分支结构之if语句"></a>3.3 分支结构之if语句</h3><h4 id="if语句格式1"><a href="#if语句格式1" class="headerlink" title="if语句格式1"></a>if语句格式1</h4><pre class=" language-java"><code class="language-java">格式：<span class="token keyword">if</span> <span class="token punctuation">(</span>关系表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    语句体<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>执行流程：</p><p>①首先计算关系表达式的值</p><p>②如果关系表达式的值为true就执行语句体</p><p>③如果关系表达式的值为false就不执行语句体</p><p>④继续执行后面的语句内容</p><p><img src="/2020/02/04/day02-java/p2.png" alt="图2"></p><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IfDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义两个变量</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//需求：判断a和b的值是否相等，如果相等，就在控制台输出：a等于b</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a等于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//需求：判断a和c的值是否相等，如果相等，就在控制台输出：a等于c</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a等于c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="if语句格式2"><a href="#if语句格式2" class="headerlink" title="if语句格式2"></a>if语句格式2</h4><pre class=" language-java"><code class="language-java">格式：<span class="token keyword">if</span> <span class="token punctuation">(</span>关系表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    语句体<span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    语句体<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>执行流程：</p><p>①首先计算关系表达式的值</p><p>②如果关系表达式的值为true就执行语句体1</p><p>③如果关系表达式的值为false就执行语句体2</p><p>④继续执行后面的语句内容</p><p><img src="/2020/02/04/day02-java/p3.png" alt="图3"></p><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IfDemo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//定义两个变量</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//需求：判断a是否大于b，如果是，在控制台输出：a的值大于b，否则，在控制台输出：a的值不大于b</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a的值大于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a的值不大于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>if语句案例：奇偶数</p><p>需求：任意给出一个整数，请用程序实现判断该整数是奇数还是偶数，并在控制台输出该整数是奇数还是偶数。</p><p>分析：</p><p>​    ①为了体现任意给出一个整数，采用键盘录入一个数据</p><p>​    ②判断整数是偶数还是奇数要分两种情况进行判断，使用if..else结构</p><p>​    ③判断是否偶数需要使用取余运算符实现该功能 number % 2 == 0</p><p>​    ④根据判定情况，在控制台输出对应的内容</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IfTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为了体现任意给出一个整数，采用键盘录入一个数据。(导包，创建对象，接收数据)</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断整数是偶数还是奇数要分两种情况进行判断，使用if..else结构        </span>        <span class="token comment" spellcheck="true">//判断是否偶数需要使用取余运算符实现该功能 number % 2 == 0</span>        <span class="token comment" spellcheck="true">//根据判定情况，在控制台输出对应的内容</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>number<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">"是偶数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">"是奇数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="if语句格式3"><a href="#if语句格式3" class="headerlink" title="if语句格式3"></a>if语句格式3</h4><pre class=" language-java"><code class="language-java">格式：<span class="token keyword">if</span> <span class="token punctuation">(</span>关系表达式<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    语句体<span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>关系表达式<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    语句体<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> …<span class="token keyword">else</span> <span class="token punctuation">{</span>    语句体n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>执行流程：</p><p>①首先计算关系表达式1的值</p><p>②如果值为true就执行语句体1；如果值为false就计算关系表达式2的值</p><p>③如果值为true就执行语句体2；如果值为false就计算关系表达式3的值</p><p>④…</p><p>⑤如果没有任何关系表达式为true，就执行语句体n+1。</p><p><img src="/2020/02/04/day02-java/p4.png" alt="图4"></p><p>示例：键盘录入一个星期数(1,2,…7)，输出对应的星期一，星期二，…星期日</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IfDemo03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 需求：键盘录入一个星期数(1,2,...7)，输出对应的星期一，星期二，...星期日</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个星期数(1-7)："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> week <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>week <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>week <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>week <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>week <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>week <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>week <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>if语句格式3案例：</p><p>需求：小明快要期末考试了，小明爸爸对他说，会根据他不同的考试成绩，送他不同的礼物，假如你可以控制小明的得分，请用程序实现小明到底该获得什么样的礼物，并在控制台输出。</p><p>分析：</p><p>​    ①小明的考试成绩未知，可以使用键盘录入的方式获取值</p><p>​    ②由于奖励种类较多，属于多种判断，采用if…else…if格式实现</p><p>​    ③为每种判断设置对应的条件</p><p>​    ④为每种判断设置对应的奖励</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IfTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//小明的考试成绩未知，可以使用键盘录入的方式获取值</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个分数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> score <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//由于奖励种类较多，属于多种判断，采用if...else...if格式实现</span>        <span class="token comment" spellcheck="true">//为每种判断设置对应的条件</span>        <span class="token comment" spellcheck="true">//为每种判断设置对应的奖励    </span>        <span class="token comment" spellcheck="true">//数据测试：正确数据，边界数据，错误数据</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">></span><span class="token number">100</span> <span class="token operator">||</span> score<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的分数有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">>=</span><span class="token number">95</span> <span class="token operator">&amp;&amp;</span> score<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"山地自行车一辆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">>=</span><span class="token number">90</span> <span class="token operator">&amp;&amp;</span> score<span class="token operator">&lt;=</span><span class="token number">94</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"游乐场玩一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">>=</span><span class="token number">80</span> <span class="token operator">&amp;&amp;</span> score<span class="token operator">&lt;=</span><span class="token number">89</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"变形金刚玩具一个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"胖揍一顿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day01-Java入门</title>
      <link href="/2020/02/04/day01-java/"/>
      <url>/2020/02/04/day01-java/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Java概述"><a href="#1-Java概述" class="headerlink" title="1. Java概述"></a>1. Java概述</h2><h3 id="1-1-Java语言发展史（了解）"><a href="#1-1-Java语言发展史（了解）" class="headerlink" title="1.1 Java语言发展史（了解）"></a>1.1 Java语言发展史（了解）</h3><p>语言：人与人交流沟通的表达方式<br>计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言</p><p>Java语言是美国Sun公司（Stanford University Network）在1995年推出的计算机语言</p><p>Java之父：詹姆斯·高斯林（James Gosling）</p><p>2009年，Sun公司被甲骨文公司收购，所以我们现在访问oracle官网即可：<a href="https://www.oracle.com/" target="_blank" rel="noopener">https://www.oracle.com</a> </p><p>当前，我们课程使用的JDK版本：11.0</p><h3 id="1-2-Java语言跨平台原理（理解）"><a href="#1-2-Java语言跨平台原理（理解）" class="headerlink" title="1.2 Java语言跨平台原理（理解）"></a>1.2 Java语言跨平台原理（理解）</h3><p>Java程序并非是直接运行的，Java编译器将Java源程序编译成与平台无关的字节码文件(class文件)，然后由Java虚拟机（JVM）对字节码文件解释执行。所以在不同的操作系统下，只需安装不同的Java虚拟机即可实现java程序的跨平台。</p><h3 id="1-3-JRE和JDK（记忆）"><a href="#1-3-JRE和JDK（记忆）" class="headerlink" title="1.3 JRE和JDK（记忆）"></a>1.3 JRE和JDK（记忆）</h3><p>JVM（Java Virtual Machine），Java虚拟机</p><p>JRE（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API）</p><p>JDK（Java Development Kit）称为Java开发工具，包含了JRE和开发工具</p><p>总结：我们只需安装JDK即可，它包含了java的运行环境和虚拟机。</p><h3 id="1-4-JDK的下载和安装（应用）"><a href="#1-4-JDK的下载和安装（应用）" class="headerlink" title="1.4 JDK的下载和安装（应用）"></a>1.4 JDK的下载和安装（应用）</h3><h4 id="1-4-1-下载"><a href="#1-4-1-下载" class="headerlink" title="1.4.1 下载"></a>1.4.1 下载</h4><p>通过官方网站获取JDK</p><p><a href="http://www.oracle.com/" target="_blank" rel="noopener">http://www.oracle.com</a></p><p><strong>注意</strong>：针对不同的操作系统，需要下载对应版本的JDK。</p><p>具体下载步骤请参见《JDK下载及安装说明文档》</p><h4 id="1-4-2-安装"><a href="#1-4-2-安装" class="headerlink" title="1.4.2 安装"></a>1.4.2 安装</h4><p>傻瓜式安装，下一步即可。但默认的安装路径是在C:\Program Files下，为方便统一管理建议修改安装路径，将与开发相关的软件都安装到一个目录下，例如：E:\develop。</p><p><strong>注意</strong>：安装路径不要包含中文或者空格等特殊字符（使用纯英文目录）。</p><p>具体安装步骤请参见《JDK下载及安装说明文档》</p><h4 id="1-4-3-JDK的安装目录介绍"><a href="#1-4-3-JDK的安装目录介绍" class="headerlink" title="1.4.3 JDK的安装目录介绍"></a>1.4.3 JDK的安装目录介绍</h4><table><thead><tr><th>目录名称</th><th>说明</th></tr></thead><tbody><tr><td>bin</td><td>该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。</td></tr><tr><td>conf</td><td>该路径下存放了JDK的相关配置文件。</td></tr><tr><td>include</td><td>该路径下存放了一些平台特定的头文件。</td></tr><tr><td>jmods</td><td>该路径下存放了JDK的各种模块。</td></tr><tr><td>legal</td><td>该路径下存放了JDK各模块的授权文档。</td></tr><tr><td>lib</td><td>该路径下存放了JDK工具的一些补充JAR包。</td></tr></tbody></table><h2 id="2-第一个演示程序"><a href="#2-第一个演示程序" class="headerlink" title="2. 第一个演示程序"></a>2. 第一个演示程序</h2><h3 id="2-1-常用DOS命令（应用）"><a href="#2-1-常用DOS命令（应用）" class="headerlink" title="2.1 常用DOS命令（应用）"></a>2.1 常用DOS命令（应用）</h3><p>在接触集成开发环境之前，我们需要使用命令行窗口对java程序进行编译和运行，所以需要知道一些常用DOS命令。</p><p>1、打开命令行窗口的方式：win + r打开运行窗口，输入cmd，回车。</p><p>2、常用命令及其作用</p><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>盘符名称:</td><td>盘符切换。E:回车，表示切换到E盘。</td></tr><tr><td>dir</td><td>查看当前路径下的内容。</td></tr><tr><td>cd 目录</td><td>进入单级目录。cd itheima</td></tr><tr><td>cd ..</td><td>回退到上一级目录。</td></tr><tr><td>cd 目录1\目录2...</td><td>进入多级目录。cd itheima\JavaSE</td></tr><tr><td>cd \</td><td>回退到盘符目录。</td></tr><tr><td>cls</td><td>清屏。</td></tr><tr><td>exit</td><td>退出命令提示符窗口。</td></tr></tbody></table><h3 id="2-2-Path环境变量的配置（应用）"><a href="#2-2-Path环境变量的配置（应用）" class="headerlink" title="2.2 Path环境变量的配置（应用）"></a>2.2 Path环境变量的配置（应用）</h3><h4 id="2-2-1-为什么配置环境变量"><a href="#2-2-1-为什么配置环境变量" class="headerlink" title="2.2.1 为什么配置环境变量"></a>2.2.1 为什么配置环境变量</h4><p>开发Java程序，需要使用JDK提供的开发工具（比如javac.exe、java.exe等命令），而这些工具在JDK的安装目录的bin目录下，如果不配置环境变量，那么这些命令只可以在该目录下执行。我们不可能把所有的java文件都放到JDK的bin目录下，所以配置环境变量的作用就是可以使bin目录下的java相关命令可以在任意目录下使用。</p><h4 id="2-2-2-配置环境变量步骤"><a href="#2-2-2-配置环境变量步骤" class="headerlink" title="2.2.2 配置环境变量步骤"></a>2.2.2 配置环境变量步骤</h4><p>具体配置步骤请参见《Java环境变量配置说明》文档。    </p><h3 id="2-3-HelloWorld案例（应用）"><a href="#2-3-HelloWorld案例（应用）" class="headerlink" title="2.3 HelloWorld案例（应用）"></a>2.3 HelloWorld案例（应用）</h3><p>HelloWorld案例是指在计算机屏幕上输出“HelloWorld”这行文字。各种计算机语言都习惯使用该案例作为第一个演示案例。</p><h4 id="2-3-1-Java程序开发运行流程"><a href="#2-3-1-Java程序开发运行流程" class="headerlink" title="2.3.1 Java程序开发运行流程"></a>2.3.1 Java程序开发运行流程</h4><p>开发Java程序，需要三个步骤：编写程序，编译程序，运行程序。</p><h4 id="2-3-2-HelloWorld案例的编写"><a href="#2-3-2-HelloWorld案例的编写" class="headerlink" title="2.3.2 HelloWorld案例的编写"></a>2.3.2 HelloWorld案例的编写</h4><p>1、新建文本文档文件，修改名称为HelloWorld.java。</p><p>2、用记事本打开HelloWorld.java文件，输写程序内容。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-3-3-HelloWorld案例的编译和运行"><a href="#2-3-3-HelloWorld案例的编译和运行" class="headerlink" title="2.3.3 HelloWorld案例的编译和运行"></a>2.3.3 HelloWorld案例的编译和运行</h4><p>存文件，打开命令行窗口，将目录切换至java文件所在目录，编译java文件生成class文件，运行class文件。</p><blockquote><p>编译：javac 文件名.java</p><p>范例：javac HelloWorld.java</p><p>执行：java 类名</p><p>范例：java HelloWorld</p></blockquote><h3 id="2-4-HelloWorld案例常见问题（理解）"><a href="#2-4-HelloWorld案例常见问题（理解）" class="headerlink" title="2.4 HelloWorld案例常见问题（理解）"></a>2.4 HelloWorld案例常见问题（理解）</h3><h4 id="2-4-1-BUG"><a href="#2-4-1-BUG" class="headerlink" title="2.4.1 BUG"></a>2.4.1 BUG</h4><p>在电脑系统或程序中，隐藏着的一些未被发现的缺陷或问题统称为bug（漏洞）。</p><h4 id="2-4-2-BUG的解决"><a href="#2-4-2-BUG的解决" class="headerlink" title="2.4.2 BUG的解决"></a>2.4.2 BUG的解决</h4><p>1、具备识别BUG的能力：多看</p><p>2、具备分析BUG的能力：多思考，多查资料</p><p>3、具备解决BUG的能力：多尝试，多总结</p><h4 id="2-4-3-HelloWorld案例常见问题"><a href="#2-4-3-HelloWorld案例常见问题" class="headerlink" title="2.4.3 HelloWorld案例常见问题"></a>2.4.3 HelloWorld案例常见问题</h4><p>1、非法字符问题。Java中的符号都是英文格式的。</p><p>2、大小写问题。Java语言对大小写敏感（区分大小写）。</p><p>3、在系统中显示文件的扩展名，避免出现HelloWorld.java.txt文件。</p><p>4、编译命令后的java文件名需要带文件后缀.java</p><p>5、运行命令后的class文件名（类名）不带文件后缀.class</p><p>…</p><h3 id="2-5-Notepad-软件的安装和使用（应用）"><a href="#2-5-Notepad-软件的安装和使用（应用）" class="headerlink" title="2.5 Notepad++软件的安装和使用（应用）"></a>2.5 Notepad++软件的安装和使用（应用）</h3><h4 id="2-5-1-什么要使用Notepad-软件"><a href="#2-5-1-什么要使用Notepad-软件" class="headerlink" title="2.5.1 什么要使用Notepad++软件"></a>2.5.1 什么要使用Notepad++软件</h4><p>Notepad++功能比windows中的自带记事本功能强大，除了可以用来制作一般的纯文字说明文件，也十分适合编写计算机程序代码。Notepad++有行号，能够快速定位问题位置，还有语法高亮度显示、代码折叠等功能。而且它是免费的。</p><h4 id="2-5-2-Notepad-软件安装"><a href="#2-5-2-Notepad-软件安装" class="headerlink" title="2.5.2 Notepad++软件安装"></a>2.5.2 Notepad++软件安装</h4><p>安装：傻瓜式安装，一直下一步即可。建议也安装到统一的开发软件目录下，比如E:\develop。</p><p>具体安装步骤请参见《Nodepad++软件安装及配置说明》文档。</p><h4 id="2-5-3Notepad-软件配置"><a href="#2-5-3Notepad-软件配置" class="headerlink" title="2.5.3Notepad++软件配置"></a>2.5.3Notepad++软件配置</h4><p>安装完毕之后，为了使用方便，做一个简单的配置：修改默认语言和编码。</p><p>具体配置的说明请参见《Nodepad++软件安装及配置说明》文档。</p><h2 id="3-java基础语法"><a href="#3-java基础语法" class="headerlink" title="3. java基础语法"></a>3. java基础语法</h2><h4 id="3-1-注释（理解）"><a href="#3-1-注释（理解）" class="headerlink" title="3.1 注释（理解）"></a>3.1 注释（理解）</h4><p>注释是对代码的解释和说明文字，可以提高程序的可读性，因此在程序中添加必要的注释文字十分重要。Java中的注释分为三种：</p><p>单行注释。单行注释的格式是使用//，从//开始至本行结尾的文字将作为注释文字。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这是单行注释文字</span></code></pre><p>多行注释。多行注释的格式是使用/* 和 */将一段较长的注释括起来。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*这是多行注释文字这是多行注释文字这是多行注释文字*/</span>注意：多行注释不能嵌套使用。</code></pre><p>文档注释。文档注释以<code>/**</code>开始，以<code>*/</code>结束。（以后讲）</p><h4 id="3-2-关键字（理解）"><a href="#3-2-关键字（理解）" class="headerlink" title="3.2 关键字（理解）"></a>3.2 关键字（理解）</h4><p>关键字是指被java语言赋予了特殊含义的单词。</p><p>关键字的特点：</p><p>​    关键字的字母全部小写。</p><p>​    常用的代码编辑器对关键字都有高亮显示，比如现在我们能看到的public、class、static等。</p><h4 id="3-3-常量（应用）"><a href="#3-3-常量（应用）" class="headerlink" title="3.3 常量（应用）"></a>3.3 常量（应用）</h4><p>常量：在程序运行过程中，其值不可以发生改变的量。</p><p>Java中的常量分类：</p><p>​    字符串常量  用双引号括起来的多个字符（可以包含0个、一个或多个），例如”a”、”abc”、”中国”等</p><p>​    整数常量  整数，例如：-10、0、88等</p><p>​    小数常量  小数，例如：-5.5、1.0、88.88等</p><p>​    字符常量  用单引号括起来的一个字符，例如：’a’、’5’、’B’、’中’等</p><p>​    布尔常量  布尔值，表示真假，只有两个值true和false</p><p>​    空常量  一个特殊的值，空值，值为null</p><p>除空常量外，其他常量均可使用输出语句直接输出。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出一个整数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出一个小数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出一个字符</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出boolean值true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎来到黑马程序员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出字符串</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-4-数据类型（记忆、应用）"><a href="#3-4-数据类型（记忆、应用）" class="headerlink" title="3.4 数据类型（记忆、应用）"></a>3.4 数据类型（记忆、应用）</h4><h5 id="3-4-1-计算机存储单元"><a href="#3-4-1-计算机存储单元" class="headerlink" title="3.4.1 计算机存储单元"></a>3.4.1 计算机存储单元</h5><p>我们知道计算机是可以用来存储数据的，但是无论是内存还是硬盘，计算机存储设备的最小信息单元叫“位（bit）”，我们又称之为“比特位”，通常用小写的字母”b”表示。而计算机中最基本的存储单元叫“字节（byte）”，</p><p>通常用大写字母”B”表示，字节是由连续的8个位组成。</p><p>除了字节外还有一些常用的存储单位，其换算单位如下：</p><p>1B（字节） = 8bit</p><p>1KB = 1024B</p><p>1MB = 1024KB</p><p>1GB = 1024MB</p><p>1TB = 1024GB</p><h5 id="3-4-2-Java中的数据类型"><a href="#3-4-2-Java中的数据类型" class="headerlink" title="3.4.2 Java中的数据类型"></a>3.4.2 Java中的数据类型</h5><p>Java是一个强类型语言，Java中的数据必须明确数据类型。在Java中的数据类型包括基本数据类型和引用数据类型两种。</p><p>Java中的基本数据类型：</p><table><thead><tr><th align="left">数据类型</th><th>关键字</th><th>内存占用</th><th align="left">取值范围</th></tr></thead><tbody><tr><td align="left">整数类型</td><td>byte</td><td>1</td><td align="left">-128~127</td></tr><tr><td align="left"></td><td>short</td><td>2</td><td align="left">-32768~32767</td></tr><tr><td align="left"></td><td>int(默认)</td><td>4</td><td align="left">-2的31次方到2的31次方-1</td></tr><tr><td align="left"></td><td>long</td><td>8</td><td align="left">-2的63次方到2的63次方-1</td></tr><tr><td align="left">浮点类型</td><td>float</td><td>4</td><td align="left">负数：-3.402823E+38到-1.401298E-45                                                             正数：   1.401298E-45到3.402823E+38</td></tr><tr><td align="left"></td><td>double(默认)</td><td>8</td><td align="left">负数：-1.797693E+308到-4.9000000E-324                                              正数：4.9000000E-324   到1.797693E+308</td></tr><tr><td align="left">字符类型</td><td>char</td><td>2</td><td align="left">0-65535</td></tr><tr><td align="left">布尔类型</td><td>boolean</td><td>1</td><td align="left">true，false</td></tr></tbody></table><p>说明：</p><p>​    e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。</p><p>​    在java中整数默认是int类型，浮点数默认是double类型。</p><h4 id="3-5-变量（应用）"><a href="#3-5-变量（应用）" class="headerlink" title="3.5 变量（应用）"></a>3.5 变量（应用）</h4><h5 id="3-5-1-变量的定义"><a href="#3-5-1-变量的定义" class="headerlink" title="3.5.1 变量的定义"></a>3.5.1 变量的定义</h5><p>变量：在程序运行过程中，其值可以发生改变的量。</p><p>从本质上讲，变量是内存中的一小块区域，其值可以在一定范围内变化。</p><p>变量的定义格式：</p><pre class=" language-java"><code class="language-java">数据类型 变量名 <span class="token operator">=</span> 初始化值<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声明变量并赋值</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>或者</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 先声明，后赋值（使用前赋值即可）</span>数据类型 变量名<span class="token punctuation">;</span>变量名 <span class="token operator">=</span> 初始化值<span class="token punctuation">;</span><span class="token keyword">double</span> money<span class="token punctuation">;</span>money <span class="token operator">=</span> <span class="token number">55.5</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>还可以在同一行定义多个同一种数据类型的变量，中间使用逗号隔开。但不建议使用这种方式，降低程序的可读性。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义int类型的变量a和b，中间使用逗号隔开</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> c<span class="token punctuation">,</span>d<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声明int类型的变量c和d，中间使用逗号隔开</span>c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>变量的使用：通过变量名访问即可。</p><h5 id="3-5-2-使用变量时的注意事项"><a href="#3-5-2-使用变量时的注意事项" class="headerlink" title="3.5.2 使用变量时的注意事项"></a>3.5.2 使用变量时的注意事项</h5><ol><li>在同一对花括号中，变量名不能重复。</li><li>变量在使用之前，必须初始化（赋值）。</li><li>定义long类型的变量时，需要在整数的后面加L（大小写均可，建议大写）。因为整数默认是int类型，整数太大可能超出int范围。</li><li>定义float类型的变量时，需要在小数的后面加F（大小写均可，建议大写）。因为浮点数的默认类型是double， double的取值范围是大于float的，类型不兼容。</li></ol><h4 id="3-6-标识符（记忆、理解）"><a href="#3-6-标识符（记忆、理解）" class="headerlink" title="3.6 标识符（记忆、理解）"></a>3.6 标识符（记忆、理解）</h4><p>标识符是用户编程时使用的名字，用于给类、方法、变量、常量等命名。</p><p>Java中标识符的组成规则：</p><p>​    由字母、数字、下划线“_”、美元符号“$”组成，第一个字符不能是数字。</p><p>​    不能使用java中的关键字作为标识符。    </p><p>​    标识符对大小写敏感（区分大小写）。</p><p>Java中标识符的命名约定：</p><p>​    小驼峰式命名：变量名、方法名</p><p>​        首字母小写，从第二个单词开始每个单词的首字母大写。</p><p>​    大驼峰式命名：类名</p><p>​        每个单词的首字母都大写。</p><p>​    另外，标识符的命名最好可以做到见名知意</p><p>​        例如：username、studentNumber等。</p><h4 id="3-7-类型转换（理解）"><a href="#3-7-类型转换（理解）" class="headerlink" title="3.7 类型转换（理解）"></a>3.7 类型转换（理解）</h4><p>在Java中，一些数据类型之间是可以相互转换的。分为两种情况：自动类型转换和强制类型转换。</p><p>自动类型转换：</p><p>​    把一个表示数据范围小的数值或者变量赋值给另一个表示数据范围大的变量。这种转换方式是自动的，直接书写即可。例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将int类型的10直接赋值给double类型</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出10.0</span></code></pre><p>强制类型转换：</p><p>​    把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量。</p><p>​    强制类型转换格式：目标数据类型 变量名 = (目标数据类型)值或者变量;</p><p>​    例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">double</span> num1 <span class="token operator">=</span> <span class="token number">5.5</span><span class="token punctuation">;</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> num1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将double类型的num1强制转换为int类型</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出5（小数位直接舍弃）</span></code></pre><p><img src="/2020/02/04/day01-java/p1.png" alt="图1"></p><p>说明：</p><ol><li>char类型的数据转换为int类型是按照码表中对应的int值进行计算的。比如在ASCII码表中，’a’对应97。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将输出97</span></code></pre><ol start="2"><li>整数默认是int类型，byte、short和char类型数据参与运算均会自动转换为int类型。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b3 <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第三行代码会报错，b1和b2会自动转换为int类型，计算结果为int，int赋值给byte需要强制类型转换。</span><span class="token comment" spellcheck="true">// 修改为:</span><span class="token keyword">int</span> num <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或者：</span><span class="token keyword">byte</span> b3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b1 <span class="token operator">+</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>boolean类型不能与其他基本数据类型相互转换。</li></ol>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
